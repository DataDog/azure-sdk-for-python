# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.service_client import SDKClient
from msrest import Serializer, Deserializer
from msrestazure import AzureConfiguration
from .version import VERSION
from msrest.pipeline import ClientRawResponse
from msrestazure.azure_exceptions import CloudError
import uuid
from . import models


class Dynamics365BusinessCentralConfiguration(AzureConfiguration):
    """Configuration for Dynamics365BusinessCentral
    Note that all parameters used to create this instance are saved as instance
    attributes.

    :param credentials: Credentials needed for the client to connect to Azure.
    :type credentials: :mod:`A msrestazure Credentials
     object<msrestazure.azure_active_directory>`
    :param filter: Filtering expression
    :type filter: str
    :param top: Number of items to return from the top of the list
    :type top: int
    :param skip: Number of items to skip from the list
    :type skip: int
    :param limit: Number of items to return from the list
    :type limit: int
    :param if_match: Required. When this request header is included and the
     eTag provided does not match the current tag on the entity, this will not
     be updated.
    :type if_match: str
    :param str base_url: Service URL
    """

    def __init__(
            self, credentials, if_match, filter=None, top=None, skip=None, limit=None, base_url=None):

        if credentials is None:
            raise ValueError("Parameter 'credentials' must not be None.")
        if if_match is None:
            raise ValueError("Parameter 'if_match' must not be None.")
        if not base_url:
            base_url = 'https://api.businesscentral.dynamics.com/v1.0/api/v1.0'

        super(Dynamics365BusinessCentralConfiguration, self).__init__(base_url)

        self.add_user_agent('azure-mgmt-devtestlabs/{}'.format(VERSION))
        self.add_user_agent('Azure-SDK-For-Python')

        self.credentials = credentials
        self.filter = filter
        self.top = top
        self.skip = skip
        self.limit = limit
        self.if_match = if_match


class Dynamics365BusinessCentral(SDKClient):
    """Business Central Standard APIs

    :ivar config: Configuration for client.
    :vartype config: Dynamics365BusinessCentralConfiguration

    :param credentials: Credentials needed for the client to connect to Azure.
    :type credentials: :mod:`A msrestazure Credentials
     object<msrestazure.azure_active_directory>`
    :param filter: Filtering expression
    :type filter: str
    :param top: Number of items to return from the top of the list
    :type top: int
    :param skip: Number of items to skip from the list
    :type skip: int
    :param limit: Number of items to return from the list
    :type limit: int
    :param if_match: Required. When this request header is included and the
     eTag provided does not match the current tag on the entity, this will not
     be updated.
    :type if_match: str
    :param str base_url: Service URL
    """

    def __init__(
            self, credentials, if_match, filter=None, top=None, skip=None, limit=None, base_url=None):

        self.config = Dynamics365BusinessCentralConfiguration(credentials, if_match, filter, top, skip, limit, base_url)
        super(Dynamics365BusinessCentral, self).__init__(self.config.credentials, self.config)

        client_models = {k: v for k, v in models.__dict__.items() if isinstance(v, type)}
        self.api_version = '1.0.0'
        self._serialize = Serializer(client_models)
        self._deserialize = Deserializer(client_models)


    def get_companies(
            self, select=None, custom_headers=None, raw=False, **operation_config):
        """Returns a list of companies.

        :param select: Selected properties to be retrieved
        :type select: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: GetCompaniesOKResponse or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.GetCompaniesOKResponse or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.get_companies.metadata['url']

        # Construct parameters
        query_parameters = {}
        if self.config.top is not None:
            query_parameters['$top'] = self._serialize.query("self.config.top", self.config.top, 'int')
        if self.config.skip is not None:
            query_parameters['$skip'] = self._serialize.query("self.config.skip", self.config.skip, 'int')
        if self.config.limit is not None:
            query_parameters['$limit'] = self._serialize.query("self.config.limit", self.config.limit, 'int')
        if self.config.filter is not None:
            query_parameters['$filter'] = self._serialize.query("self.config.filter", self.config.filter, 'str')
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('GetCompaniesOKResponse', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_companies.metadata = {'url': '/companies'}

    def get_company_by_id(
            self, company_id, select=None, custom_headers=None, raw=False, **operation_config):
        """Retrieve the properties and relationships of an company object for
        Dynamics 365 Business Central.

        :param company_id: id for company
        :type company_id: str
        :param select: Selected properties to be retrieved
        :type select: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: Company or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.Company or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.get_company_by_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('Company', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_company_by_id.metadata = {'url': '/companies({company_id})'}

    def get_items(
            self, company_id, expand=None, select=None, custom_headers=None, raw=False, **operation_config):
        """Returns a list of items.

        :param company_id: id for company
        :type company_id: str
        :param expand: Entities to expand
        :type expand: list[str]
        :param select: Selected properties to be retrieved
        :type select: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: GetItemsOKResponse or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.GetItemsOKResponse or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.get_items.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if self.config.top is not None:
            query_parameters['$top'] = self._serialize.query("self.config.top", self.config.top, 'int')
        if self.config.skip is not None:
            query_parameters['$skip'] = self._serialize.query("self.config.skip", self.config.skip, 'int')
        if self.config.limit is not None:
            query_parameters['$limit'] = self._serialize.query("self.config.limit", self.config.limit, 'int')
        if self.config.filter is not None:
            query_parameters['$filter'] = self._serialize.query("self.config.filter", self.config.filter, 'str')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('GetItemsOKResponse', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_items.metadata = {'url': '/companies({company_id})/items'}

    def post_item(
            self, body, company_id, custom_headers=None, raw=False, **operation_config):
        """Creates a item in Dynamics 365 Business Central.

        :param body:
        :type body: ~azure.mgmt.devtestlabs.models.Body
        :param company_id: id for company
        :type company_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: Item or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.Item or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.post_item.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct body
        body_content = self._serialize.body(body, 'Body')

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [201]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 201:
            deserialized = self._deserialize('Item', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    post_item.metadata = {'url': '/companies({company_id})/items'}

    def get_item_by_id(
            self, company_id, item_id, expand=None, select=None, custom_headers=None, raw=False, **operation_config):
        """Retrieve the properties and relationships of an item object for
        Dynamics 365 Business Central.

        :param company_id: id for company
        :type company_id: str
        :param item_id: id for item
        :type item_id: str
        :param expand: Entities to expand
        :type expand: list[str]
        :param select: Selected properties to be retrieved
        :type select: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: Item or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.Item or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.get_item_by_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'item_id': self._serialize.url("item_id", item_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('Item', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_item_by_id.metadata = {'url': '/companies({company_id})/items({item_id})'}

    def delete_item_by_id(
            self, company_id, item_id, custom_headers=None, raw=False, **operation_config):
        """Delete an item in Dynamics 365 Business Central.

        :param company_id: id for company
        :type company_id: str
        :param item_id: id for item
        :type item_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.delete_item_by_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'item_id': self._serialize.url("item_id", item_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.delete(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [204]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    delete_item_by_id.metadata = {'url': '/companies({company_id})/items({item_id})'}

    def patch_item_by_id(
            self, body, company_id, item_id, custom_headers=None, raw=False, **operation_config):
        """Lets the user patch the specified item.

        :param body:
        :type body: ~azure.mgmt.devtestlabs.models.Body
        :param company_id: id for company
        :type company_id: str
        :param item_id: id for item
        :type item_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: Item or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.Item or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.patch_item_by_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'item_id': self._serialize.url("item_id", item_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        header_parameters['If-Match'] = self._serialize.header("self.config.if_match", self.config.if_match, 'str')
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct body
        body_content = self._serialize.body(body, 'Body')

        # Construct and send request
        request = self._client.patch(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('Item', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    patch_item_by_id.metadata = {'url': '/companies({company_id})/items({item_id})'}

    def get_picture_for_item(
            self, company_id, item_id, select=None, custom_headers=None, raw=False, **operation_config):
        """Returns a list of picture.

        :param company_id: id for company
        :type company_id: str
        :param item_id: id for item
        :type item_id: str
        :param select: Selected properties to be retrieved
        :type select: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: GetPictureForItemOKResponse or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.GetPictureForItemOKResponse or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.get_picture_for_item.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'item_id': self._serialize.url("item_id", item_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if self.config.top is not None:
            query_parameters['$top'] = self._serialize.query("self.config.top", self.config.top, 'int')
        if self.config.skip is not None:
            query_parameters['$skip'] = self._serialize.query("self.config.skip", self.config.skip, 'int')
        if self.config.limit is not None:
            query_parameters['$limit'] = self._serialize.query("self.config.limit", self.config.limit, 'int')
        if self.config.filter is not None:
            query_parameters['$filter'] = self._serialize.query("self.config.filter", self.config.filter, 'str')
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('GetPictureForItemOKResponse', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_picture_for_item.metadata = {'url': '/companies({company_id})/items({item_id})/picture'}

    def get_picture_for_item_by_id(
            self, company_id, item_id, picture_id, select=None, custom_headers=None, raw=False, **operation_config):
        """Retrieve the properties and relationships of an picture object for
        Dynamics 365 Business Central.

        :param company_id: id for company
        :type company_id: str
        :param item_id: id for item
        :type item_id: str
        :param picture_id: id for picture
        :type picture_id: str
        :param select: Selected properties to be retrieved
        :type select: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: Picture or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.Picture or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.get_picture_for_item_by_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'item_id': self._serialize.url("item_id", item_id, 'str'),
            'picture_id': self._serialize.url("picture_id", picture_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('Picture', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_picture_for_item_by_id.metadata = {'url': '/companies({company_id})/items({item_id})/picture({picture_id})'}

    def delete_picture_for_item_by_id_by_id(
            self, company_id, item_id, picture_id, custom_headers=None, raw=False, **operation_config):
        """Delete an picture in Dynamics 365 Business Central.

        :param company_id: id for company
        :type company_id: str
        :param item_id: id for item
        :type item_id: str
        :param picture_id: id for picture
        :type picture_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.delete_picture_for_item_by_id_by_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'item_id': self._serialize.url("item_id", item_id, 'str'),
            'picture_id': self._serialize.url("picture_id", picture_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.delete(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [204]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    delete_picture_for_item_by_id_by_id.metadata = {'url': '/companies({company_id})/items({item_id})/picture({picture_id})'}

    def patch_picture_for_item_by_id_by_id(
            self, body, company_id, item_id, picture_id, custom_headers=None, raw=False, **operation_config):
        """Lets the user patch the specified picture.

        :param body:
        :type body: ~azure.mgmt.devtestlabs.models.BodyModel
        :param company_id: id for company
        :type company_id: str
        :param item_id: id for item
        :type item_id: str
        :param picture_id: id for picture
        :type picture_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: Picture or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.Picture or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.patch_picture_for_item_by_id_by_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'item_id': self._serialize.url("item_id", item_id, 'str'),
            'picture_id': self._serialize.url("picture_id", picture_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        header_parameters['If-Match'] = self._serialize.header("self.config.if_match", self.config.if_match, 'str')
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct body
        body_content = self._serialize.body(body, 'BodyModel')

        # Construct and send request
        request = self._client.patch(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('Picture', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    patch_picture_for_item_by_id_by_id.metadata = {'url': '/companies({company_id})/items({item_id})/picture({picture_id})'}

    def get_default_dimensions_for_item(
            self, company_id, item_id, expand=None, select=None, custom_headers=None, raw=False, **operation_config):
        """Returns a list of defaultDimensions.

        :param company_id: id for company
        :type company_id: str
        :param item_id: id for item
        :type item_id: str
        :param expand: Entities to expand
        :type expand: list[str]
        :param select: Selected properties to be retrieved
        :type select: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: GetDefaultDimensionsForItemOKResponse or ClientRawResponse if
         raw=true
        :rtype:
         ~azure.mgmt.devtestlabs.models.GetDefaultDimensionsForItemOKResponse
         or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.get_default_dimensions_for_item.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'item_id': self._serialize.url("item_id", item_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if self.config.top is not None:
            query_parameters['$top'] = self._serialize.query("self.config.top", self.config.top, 'int')
        if self.config.skip is not None:
            query_parameters['$skip'] = self._serialize.query("self.config.skip", self.config.skip, 'int')
        if self.config.limit is not None:
            query_parameters['$limit'] = self._serialize.query("self.config.limit", self.config.limit, 'int')
        if self.config.filter is not None:
            query_parameters['$filter'] = self._serialize.query("self.config.filter", self.config.filter, 'str')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('GetDefaultDimensionsForItemOKResponse', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_default_dimensions_for_item.metadata = {'url': '/companies({company_id})/items({item_id})/defaultDimensions'}

    def post_default_dimensions_for_item(
            self, body, company_id, item_id, custom_headers=None, raw=False, **operation_config):
        """Creates a defaultDimensions in Dynamics 365 Business Central.

        :param body:
        :type body: ~azure.mgmt.devtestlabs.models.BodyModelModel
        :param company_id: id for company
        :type company_id: str
        :param item_id: id for item
        :type item_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: DefaultDimensions or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.DefaultDimensions or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.post_default_dimensions_for_item.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'item_id': self._serialize.url("item_id", item_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct body
        body_content = self._serialize.body(body, 'BodyModelModel')

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [201]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 201:
            deserialized = self._deserialize('DefaultDimensions', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    post_default_dimensions_for_item.metadata = {'url': '/companies({company_id})/items({item_id})/defaultDimensions'}

    def get_default_dimensions_for_item_by_dimension_id_by_parent_id(
            self, company_id, item_id, default_dimensions_parent_id, default_dimensions_dimension_id, expand=None, select=None, custom_headers=None, raw=False, **operation_config):
        """Retrieve the properties and relationships of an defaultDimensions
        object for Dynamics 365 Business Central.

        :param company_id: id for company
        :type company_id: str
        :param item_id: id for item
        :type item_id: str
        :param default_dimensions_parent_id: parentId for defaultDimensions
        :type default_dimensions_parent_id: str
        :param default_dimensions_dimension_id: dimensionId for
         defaultDimensions
        :type default_dimensions_dimension_id: str
        :param expand: Entities to expand
        :type expand: list[str]
        :param select: Selected properties to be retrieved
        :type select: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: DefaultDimensions or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.DefaultDimensions or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.get_default_dimensions_for_item_by_dimension_id_by_parent_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'item_id': self._serialize.url("item_id", item_id, 'str'),
            'defaultDimensions_parentId': self._serialize.url("default_dimensions_parent_id", default_dimensions_parent_id, 'str'),
            'defaultDimensions_dimensionId': self._serialize.url("default_dimensions_dimension_id", default_dimensions_dimension_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('DefaultDimensions', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_default_dimensions_for_item_by_dimension_id_by_parent_id.metadata = {'url': '/companies({company_id})/items({item_id})/defaultDimensions({defaultDimensions_parentId},{defaultDimensions_dimensionId})'}

    def delete_default_dimensions_for_item_by_dimension_id_by_parent_id_by_id(
            self, company_id, item_id, default_dimensions_parent_id, default_dimensions_dimension_id, custom_headers=None, raw=False, **operation_config):
        """Delete an defaultDimensions in Dynamics 365 Business Central.

        :param company_id: id for company
        :type company_id: str
        :param item_id: id for item
        :type item_id: str
        :param default_dimensions_parent_id: parentId for defaultDimensions
        :type default_dimensions_parent_id: str
        :param default_dimensions_dimension_id: dimensionId for
         defaultDimensions
        :type default_dimensions_dimension_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.delete_default_dimensions_for_item_by_dimension_id_by_parent_id_by_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'item_id': self._serialize.url("item_id", item_id, 'str'),
            'defaultDimensions_parentId': self._serialize.url("default_dimensions_parent_id", default_dimensions_parent_id, 'str'),
            'defaultDimensions_dimensionId': self._serialize.url("default_dimensions_dimension_id", default_dimensions_dimension_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.delete(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [204]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    delete_default_dimensions_for_item_by_dimension_id_by_parent_id_by_id.metadata = {'url': '/companies({company_id})/items({item_id})/defaultDimensions({defaultDimensions_parentId},{defaultDimensions_dimensionId})'}

    def patch_default_dimensions_for_item_by_dimension_id_by_parent_id_by_id(
            self, body, company_id, item_id, default_dimensions_parent_id, default_dimensions_dimension_id, custom_headers=None, raw=False, **operation_config):
        """Lets the user patch the specified defaultDimensions.

        :param body:
        :type body: ~azure.mgmt.devtestlabs.models.BodyModelModel
        :param company_id: id for company
        :type company_id: str
        :param item_id: id for item
        :type item_id: str
        :param default_dimensions_parent_id: parentId for defaultDimensions
        :type default_dimensions_parent_id: str
        :param default_dimensions_dimension_id: dimensionId for
         defaultDimensions
        :type default_dimensions_dimension_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: DefaultDimensions or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.DefaultDimensions or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.patch_default_dimensions_for_item_by_dimension_id_by_parent_id_by_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'item_id': self._serialize.url("item_id", item_id, 'str'),
            'defaultDimensions_parentId': self._serialize.url("default_dimensions_parent_id", default_dimensions_parent_id, 'str'),
            'defaultDimensions_dimensionId': self._serialize.url("default_dimensions_dimension_id", default_dimensions_dimension_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        header_parameters['If-Match'] = self._serialize.header("self.config.if_match", self.config.if_match, 'str')
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct body
        body_content = self._serialize.body(body, 'BodyModelModel')

        # Construct and send request
        request = self._client.patch(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('DefaultDimensions', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    patch_default_dimensions_for_item_by_dimension_id_by_parent_id_by_id.metadata = {'url': '/companies({company_id})/items({item_id})/defaultDimensions({defaultDimensions_parentId},{defaultDimensions_dimensionId})'}

    def get_picture(
            self, company_id, select=None, custom_headers=None, raw=False, **operation_config):
        """Returns a list of picture.

        :param company_id: id for company
        :type company_id: str
        :param select: Selected properties to be retrieved
        :type select: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: GetPictureOKResponse or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.GetPictureOKResponse or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.get_picture.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if self.config.top is not None:
            query_parameters['$top'] = self._serialize.query("self.config.top", self.config.top, 'int')
        if self.config.skip is not None:
            query_parameters['$skip'] = self._serialize.query("self.config.skip", self.config.skip, 'int')
        if self.config.limit is not None:
            query_parameters['$limit'] = self._serialize.query("self.config.limit", self.config.limit, 'int')
        if self.config.filter is not None:
            query_parameters['$filter'] = self._serialize.query("self.config.filter", self.config.filter, 'str')
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('GetPictureOKResponse', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_picture.metadata = {'url': '/companies({company_id})/picture'}

    def get_picture_by_id(
            self, company_id, picture_id, select=None, custom_headers=None, raw=False, **operation_config):
        """Retrieve the properties and relationships of an picture object for
        Dynamics 365 Business Central.

        :param company_id: id for company
        :type company_id: str
        :param picture_id: id for picture
        :type picture_id: str
        :param select: Selected properties to be retrieved
        :type select: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: Picture or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.Picture or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.get_picture_by_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'picture_id': self._serialize.url("picture_id", picture_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('Picture', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_picture_by_id.metadata = {'url': '/companies({company_id})/picture({picture_id})'}

    def delete_picture_by_id(
            self, company_id, picture_id, custom_headers=None, raw=False, **operation_config):
        """Delete an picture in Dynamics 365 Business Central.

        :param company_id: id for company
        :type company_id: str
        :param picture_id: id for picture
        :type picture_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.delete_picture_by_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'picture_id': self._serialize.url("picture_id", picture_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.delete(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [204]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    delete_picture_by_id.metadata = {'url': '/companies({company_id})/picture({picture_id})'}

    def patch_picture_by_id(
            self, body, company_id, picture_id, custom_headers=None, raw=False, **operation_config):
        """Lets the user patch the specified picture.

        :param body:
        :type body: ~azure.mgmt.devtestlabs.models.BodyModel
        :param company_id: id for company
        :type company_id: str
        :param picture_id: id for picture
        :type picture_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: Picture or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.Picture or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.patch_picture_by_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'picture_id': self._serialize.url("picture_id", picture_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        header_parameters['If-Match'] = self._serialize.header("self.config.if_match", self.config.if_match, 'str')
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct body
        body_content = self._serialize.body(body, 'BodyModel')

        # Construct and send request
        request = self._client.patch(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('Picture', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    patch_picture_by_id.metadata = {'url': '/companies({company_id})/picture({picture_id})'}

    def get_default_dimensions(
            self, company_id, expand=None, select=None, custom_headers=None, raw=False, **operation_config):
        """Returns a list of defaultDimensions.

        :param company_id: id for company
        :type company_id: str
        :param expand: Entities to expand
        :type expand: list[str]
        :param select: Selected properties to be retrieved
        :type select: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: GetDefaultDimensionsOKResponse or ClientRawResponse if
         raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.GetDefaultDimensionsOKResponse
         or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.get_default_dimensions.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if self.config.top is not None:
            query_parameters['$top'] = self._serialize.query("self.config.top", self.config.top, 'int')
        if self.config.skip is not None:
            query_parameters['$skip'] = self._serialize.query("self.config.skip", self.config.skip, 'int')
        if self.config.limit is not None:
            query_parameters['$limit'] = self._serialize.query("self.config.limit", self.config.limit, 'int')
        if self.config.filter is not None:
            query_parameters['$filter'] = self._serialize.query("self.config.filter", self.config.filter, 'str')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('GetDefaultDimensionsOKResponse', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_default_dimensions.metadata = {'url': '/companies({company_id})/defaultDimensions'}

    def post_default_dimensions(
            self, body, company_id, custom_headers=None, raw=False, **operation_config):
        """Creates a defaultDimensions in Dynamics 365 Business Central.

        :param body:
        :type body: ~azure.mgmt.devtestlabs.models.BodyModelModel
        :param company_id: id for company
        :type company_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: DefaultDimensions or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.DefaultDimensions or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.post_default_dimensions.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct body
        body_content = self._serialize.body(body, 'BodyModelModel')

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [201]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 201:
            deserialized = self._deserialize('DefaultDimensions', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    post_default_dimensions.metadata = {'url': '/companies({company_id})/defaultDimensions'}

    def get_default_dimensions_by_dimension_id_by_parent_id(
            self, company_id, default_dimensions_parent_id, default_dimensions_dimension_id, expand=None, select=None, custom_headers=None, raw=False, **operation_config):
        """Retrieve the properties and relationships of an defaultDimensions
        object for Dynamics 365 Business Central.

        :param company_id: id for company
        :type company_id: str
        :param default_dimensions_parent_id: parentId for defaultDimensions
        :type default_dimensions_parent_id: str
        :param default_dimensions_dimension_id: dimensionId for
         defaultDimensions
        :type default_dimensions_dimension_id: str
        :param expand: Entities to expand
        :type expand: list[str]
        :param select: Selected properties to be retrieved
        :type select: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: DefaultDimensions or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.DefaultDimensions or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.get_default_dimensions_by_dimension_id_by_parent_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'defaultDimensions_parentId': self._serialize.url("default_dimensions_parent_id", default_dimensions_parent_id, 'str'),
            'defaultDimensions_dimensionId': self._serialize.url("default_dimensions_dimension_id", default_dimensions_dimension_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('DefaultDimensions', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_default_dimensions_by_dimension_id_by_parent_id.metadata = {'url': '/companies({company_id})/defaultDimensions({defaultDimensions_parentId},{defaultDimensions_dimensionId})'}

    def delete_default_dimensions_by_dimension_id_by_parent_id(
            self, company_id, default_dimensions_parent_id, default_dimensions_dimension_id, custom_headers=None, raw=False, **operation_config):
        """Delete an defaultDimensions in Dynamics 365 Business Central.

        :param company_id: id for company
        :type company_id: str
        :param default_dimensions_parent_id: parentId for defaultDimensions
        :type default_dimensions_parent_id: str
        :param default_dimensions_dimension_id: dimensionId for
         defaultDimensions
        :type default_dimensions_dimension_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.delete_default_dimensions_by_dimension_id_by_parent_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'defaultDimensions_parentId': self._serialize.url("default_dimensions_parent_id", default_dimensions_parent_id, 'str'),
            'defaultDimensions_dimensionId': self._serialize.url("default_dimensions_dimension_id", default_dimensions_dimension_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.delete(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [204]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    delete_default_dimensions_by_dimension_id_by_parent_id.metadata = {'url': '/companies({company_id})/defaultDimensions({defaultDimensions_parentId},{defaultDimensions_dimensionId})'}

    def patch_default_dimensions_by_dimension_id_by_parent_id(
            self, body, company_id, default_dimensions_parent_id, default_dimensions_dimension_id, custom_headers=None, raw=False, **operation_config):
        """Lets the user patch the specified defaultDimensions.

        :param body:
        :type body: ~azure.mgmt.devtestlabs.models.BodyModelModel
        :param company_id: id for company
        :type company_id: str
        :param default_dimensions_parent_id: parentId for defaultDimensions
        :type default_dimensions_parent_id: str
        :param default_dimensions_dimension_id: dimensionId for
         defaultDimensions
        :type default_dimensions_dimension_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: DefaultDimensions or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.DefaultDimensions or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.patch_default_dimensions_by_dimension_id_by_parent_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'defaultDimensions_parentId': self._serialize.url("default_dimensions_parent_id", default_dimensions_parent_id, 'str'),
            'defaultDimensions_dimensionId': self._serialize.url("default_dimensions_dimension_id", default_dimensions_dimension_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        header_parameters['If-Match'] = self._serialize.header("self.config.if_match", self.config.if_match, 'str')
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct body
        body_content = self._serialize.body(body, 'BodyModelModel')

        # Construct and send request
        request = self._client.patch(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('DefaultDimensions', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    patch_default_dimensions_by_dimension_id_by_parent_id.metadata = {'url': '/companies({company_id})/defaultDimensions({defaultDimensions_parentId},{defaultDimensions_dimensionId})'}

    def get_customers(
            self, company_id, expand=None, select=None, custom_headers=None, raw=False, **operation_config):
        """Returns a list of customers.

        :param company_id: id for company
        :type company_id: str
        :param expand: Entities to expand
        :type expand: list[str]
        :param select: Selected properties to be retrieved
        :type select: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: GetCustomersOKResponse or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.GetCustomersOKResponse or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.get_customers.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if self.config.top is not None:
            query_parameters['$top'] = self._serialize.query("self.config.top", self.config.top, 'int')
        if self.config.skip is not None:
            query_parameters['$skip'] = self._serialize.query("self.config.skip", self.config.skip, 'int')
        if self.config.limit is not None:
            query_parameters['$limit'] = self._serialize.query("self.config.limit", self.config.limit, 'int')
        if self.config.filter is not None:
            query_parameters['$filter'] = self._serialize.query("self.config.filter", self.config.filter, 'str')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('GetCustomersOKResponse', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_customers.metadata = {'url': '/companies({company_id})/customers'}

    def post_customer(
            self, body, company_id, custom_headers=None, raw=False, **operation_config):
        """Creates a customer in Dynamics 365 Business Central.

        :param body:
        :type body: ~azure.mgmt.devtestlabs.models.BodyModelModelModel
        :param company_id: id for company
        :type company_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: Customer or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.Customer or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.post_customer.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct body
        body_content = self._serialize.body(body, 'BodyModelModelModel')

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [201]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 201:
            deserialized = self._deserialize('Customer', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    post_customer.metadata = {'url': '/companies({company_id})/customers'}

    def get_customer_by_id(
            self, company_id, customer_id, expand=None, select=None, custom_headers=None, raw=False, **operation_config):
        """Retrieve the properties and relationships of an customer object for
        Dynamics 365 Business Central.

        :param company_id: id for company
        :type company_id: str
        :param customer_id: id for customer
        :type customer_id: str
        :param expand: Entities to expand
        :type expand: list[str]
        :param select: Selected properties to be retrieved
        :type select: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: Customer or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.Customer or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.get_customer_by_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'customer_id': self._serialize.url("customer_id", customer_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('Customer', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_customer_by_id.metadata = {'url': '/companies({company_id})/customers({customer_id})'}

    def delete_customer_by_id(
            self, company_id, customer_id, custom_headers=None, raw=False, **operation_config):
        """Delete an customer in Dynamics 365 Business Central.

        :param company_id: id for company
        :type company_id: str
        :param customer_id: id for customer
        :type customer_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.delete_customer_by_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'customer_id': self._serialize.url("customer_id", customer_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.delete(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [204]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    delete_customer_by_id.metadata = {'url': '/companies({company_id})/customers({customer_id})'}

    def patch_customer_by_id(
            self, body, company_id, customer_id, custom_headers=None, raw=False, **operation_config):
        """Lets the user patch the specified customer.

        :param body:
        :type body: ~azure.mgmt.devtestlabs.models.BodyModelModelModel
        :param company_id: id for company
        :type company_id: str
        :param customer_id: id for customer
        :type customer_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: Customer or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.Customer or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.patch_customer_by_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'customer_id': self._serialize.url("customer_id", customer_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        header_parameters['If-Match'] = self._serialize.header("self.config.if_match", self.config.if_match, 'str')
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct body
        body_content = self._serialize.body(body, 'BodyModelModelModel')

        # Construct and send request
        request = self._client.patch(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('Customer', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    patch_customer_by_id.metadata = {'url': '/companies({company_id})/customers({customer_id})'}

    def get_customer_financial_details_for_customer(
            self, company_id, customer_id, select=None, custom_headers=None, raw=False, **operation_config):
        """Returns a list of customerFinancialDetails.

        :param company_id: id for company
        :type company_id: str
        :param customer_id: id for customer
        :type customer_id: str
        :param select: Selected properties to be retrieved
        :type select: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: GetCustomerFinancialDetailsForCustomerOKResponse or
         ClientRawResponse if raw=true
        :rtype:
         ~azure.mgmt.devtestlabs.models.GetCustomerFinancialDetailsForCustomerOKResponse
         or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.get_customer_financial_details_for_customer.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'customer_id': self._serialize.url("customer_id", customer_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if self.config.top is not None:
            query_parameters['$top'] = self._serialize.query("self.config.top", self.config.top, 'int')
        if self.config.skip is not None:
            query_parameters['$skip'] = self._serialize.query("self.config.skip", self.config.skip, 'int')
        if self.config.limit is not None:
            query_parameters['$limit'] = self._serialize.query("self.config.limit", self.config.limit, 'int')
        if self.config.filter is not None:
            query_parameters['$filter'] = self._serialize.query("self.config.filter", self.config.filter, 'str')
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('GetCustomerFinancialDetailsForCustomerOKResponse', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_customer_financial_details_for_customer.metadata = {'url': '/companies({company_id})/customers({customer_id})/customerFinancialDetails'}

    def get_customer_financial_detail_for_customer_by_id(
            self, company_id, customer_id, customer_financial_detail_id, select=None, custom_headers=None, raw=False, **operation_config):
        """Retrieve the properties and relationships of an customerFinancialDetail
        object for Dynamics 365 Business Central.

        :param company_id: id for company
        :type company_id: str
        :param customer_id: id for customer
        :type customer_id: str
        :param customer_financial_detail_id: id for customerFinancialDetail
        :type customer_financial_detail_id: str
        :param select: Selected properties to be retrieved
        :type select: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: CustomerFinancialDetail or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.CustomerFinancialDetail or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.get_customer_financial_detail_for_customer_by_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'customer_id': self._serialize.url("customer_id", customer_id, 'str'),
            'customerFinancialDetail_id': self._serialize.url("customer_financial_detail_id", customer_financial_detail_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('CustomerFinancialDetail', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_customer_financial_detail_for_customer_by_id.metadata = {'url': '/companies({company_id})/customers({customer_id})/customerFinancialDetails({customerFinancialDetail_id})'}

    def get_picture_for_customer(
            self, company_id, customer_id, select=None, custom_headers=None, raw=False, **operation_config):
        """Returns a list of picture.

        :param company_id: id for company
        :type company_id: str
        :param customer_id: id for customer
        :type customer_id: str
        :param select: Selected properties to be retrieved
        :type select: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: GetPictureForCustomerOKResponse or ClientRawResponse if
         raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.GetPictureForCustomerOKResponse
         or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.get_picture_for_customer.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'customer_id': self._serialize.url("customer_id", customer_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if self.config.top is not None:
            query_parameters['$top'] = self._serialize.query("self.config.top", self.config.top, 'int')
        if self.config.skip is not None:
            query_parameters['$skip'] = self._serialize.query("self.config.skip", self.config.skip, 'int')
        if self.config.limit is not None:
            query_parameters['$limit'] = self._serialize.query("self.config.limit", self.config.limit, 'int')
        if self.config.filter is not None:
            query_parameters['$filter'] = self._serialize.query("self.config.filter", self.config.filter, 'str')
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('GetPictureForCustomerOKResponse', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_picture_for_customer.metadata = {'url': '/companies({company_id})/customers({customer_id})/picture'}

    def get_picture_for_customer_by_id(
            self, company_id, customer_id, picture_id, select=None, custom_headers=None, raw=False, **operation_config):
        """Retrieve the properties and relationships of an picture object for
        Dynamics 365 Business Central.

        :param company_id: id for company
        :type company_id: str
        :param customer_id: id for customer
        :type customer_id: str
        :param picture_id: id for picture
        :type picture_id: str
        :param select: Selected properties to be retrieved
        :type select: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: Picture or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.Picture or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.get_picture_for_customer_by_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'customer_id': self._serialize.url("customer_id", customer_id, 'str'),
            'picture_id': self._serialize.url("picture_id", picture_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('Picture', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_picture_for_customer_by_id.metadata = {'url': '/companies({company_id})/customers({customer_id})/picture({picture_id})'}

    def delete_picture_for_customer_by_id_by_id(
            self, company_id, customer_id, picture_id, custom_headers=None, raw=False, **operation_config):
        """Delete an picture in Dynamics 365 Business Central.

        :param company_id: id for company
        :type company_id: str
        :param customer_id: id for customer
        :type customer_id: str
        :param picture_id: id for picture
        :type picture_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.delete_picture_for_customer_by_id_by_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'customer_id': self._serialize.url("customer_id", customer_id, 'str'),
            'picture_id': self._serialize.url("picture_id", picture_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.delete(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [204]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    delete_picture_for_customer_by_id_by_id.metadata = {'url': '/companies({company_id})/customers({customer_id})/picture({picture_id})'}

    def patch_picture_for_customer_by_id_by_id(
            self, body, company_id, customer_id, picture_id, custom_headers=None, raw=False, **operation_config):
        """Lets the user patch the specified picture.

        :param body:
        :type body: ~azure.mgmt.devtestlabs.models.BodyModel
        :param company_id: id for company
        :type company_id: str
        :param customer_id: id for customer
        :type customer_id: str
        :param picture_id: id for picture
        :type picture_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: Picture or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.Picture or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.patch_picture_for_customer_by_id_by_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'customer_id': self._serialize.url("customer_id", customer_id, 'str'),
            'picture_id': self._serialize.url("picture_id", picture_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        header_parameters['If-Match'] = self._serialize.header("self.config.if_match", self.config.if_match, 'str')
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct body
        body_content = self._serialize.body(body, 'BodyModel')

        # Construct and send request
        request = self._client.patch(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('Picture', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    patch_picture_for_customer_by_id_by_id.metadata = {'url': '/companies({company_id})/customers({customer_id})/picture({picture_id})'}

    def get_default_dimensions_for_customer(
            self, company_id, customer_id, expand=None, select=None, custom_headers=None, raw=False, **operation_config):
        """Returns a list of defaultDimensions.

        :param company_id: id for company
        :type company_id: str
        :param customer_id: id for customer
        :type customer_id: str
        :param expand: Entities to expand
        :type expand: list[str]
        :param select: Selected properties to be retrieved
        :type select: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: GetDefaultDimensionsForCustomerOKResponse or
         ClientRawResponse if raw=true
        :rtype:
         ~azure.mgmt.devtestlabs.models.GetDefaultDimensionsForCustomerOKResponse
         or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.get_default_dimensions_for_customer.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'customer_id': self._serialize.url("customer_id", customer_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if self.config.top is not None:
            query_parameters['$top'] = self._serialize.query("self.config.top", self.config.top, 'int')
        if self.config.skip is not None:
            query_parameters['$skip'] = self._serialize.query("self.config.skip", self.config.skip, 'int')
        if self.config.limit is not None:
            query_parameters['$limit'] = self._serialize.query("self.config.limit", self.config.limit, 'int')
        if self.config.filter is not None:
            query_parameters['$filter'] = self._serialize.query("self.config.filter", self.config.filter, 'str')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('GetDefaultDimensionsForCustomerOKResponse', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_default_dimensions_for_customer.metadata = {'url': '/companies({company_id})/customers({customer_id})/defaultDimensions'}

    def post_default_dimensions_for_customer(
            self, body, company_id, customer_id, custom_headers=None, raw=False, **operation_config):
        """Creates a defaultDimensions in Dynamics 365 Business Central.

        :param body:
        :type body: ~azure.mgmt.devtestlabs.models.BodyModelModel
        :param company_id: id for company
        :type company_id: str
        :param customer_id: id for customer
        :type customer_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: DefaultDimensions or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.DefaultDimensions or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.post_default_dimensions_for_customer.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'customer_id': self._serialize.url("customer_id", customer_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct body
        body_content = self._serialize.body(body, 'BodyModelModel')

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [201]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 201:
            deserialized = self._deserialize('DefaultDimensions', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    post_default_dimensions_for_customer.metadata = {'url': '/companies({company_id})/customers({customer_id})/defaultDimensions'}

    def get_default_dimensions_for_customer_by_dimension_id_by_parent_id(
            self, company_id, customer_id, default_dimensions_parent_id, default_dimensions_dimension_id, expand=None, select=None, custom_headers=None, raw=False, **operation_config):
        """Retrieve the properties and relationships of an defaultDimensions
        object for Dynamics 365 Business Central.

        :param company_id: id for company
        :type company_id: str
        :param customer_id: id for customer
        :type customer_id: str
        :param default_dimensions_parent_id: parentId for defaultDimensions
        :type default_dimensions_parent_id: str
        :param default_dimensions_dimension_id: dimensionId for
         defaultDimensions
        :type default_dimensions_dimension_id: str
        :param expand: Entities to expand
        :type expand: list[str]
        :param select: Selected properties to be retrieved
        :type select: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: DefaultDimensions or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.DefaultDimensions or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.get_default_dimensions_for_customer_by_dimension_id_by_parent_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'customer_id': self._serialize.url("customer_id", customer_id, 'str'),
            'defaultDimensions_parentId': self._serialize.url("default_dimensions_parent_id", default_dimensions_parent_id, 'str'),
            'defaultDimensions_dimensionId': self._serialize.url("default_dimensions_dimension_id", default_dimensions_dimension_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('DefaultDimensions', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_default_dimensions_for_customer_by_dimension_id_by_parent_id.metadata = {'url': '/companies({company_id})/customers({customer_id})/defaultDimensions({defaultDimensions_parentId},{defaultDimensions_dimensionId})'}

    def delete_default_dimensions_for_customer_by_dimension_id_by_parent_id_by_id(
            self, company_id, customer_id, default_dimensions_parent_id, default_dimensions_dimension_id, custom_headers=None, raw=False, **operation_config):
        """Delete an defaultDimensions in Dynamics 365 Business Central.

        :param company_id: id for company
        :type company_id: str
        :param customer_id: id for customer
        :type customer_id: str
        :param default_dimensions_parent_id: parentId for defaultDimensions
        :type default_dimensions_parent_id: str
        :param default_dimensions_dimension_id: dimensionId for
         defaultDimensions
        :type default_dimensions_dimension_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.delete_default_dimensions_for_customer_by_dimension_id_by_parent_id_by_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'customer_id': self._serialize.url("customer_id", customer_id, 'str'),
            'defaultDimensions_parentId': self._serialize.url("default_dimensions_parent_id", default_dimensions_parent_id, 'str'),
            'defaultDimensions_dimensionId': self._serialize.url("default_dimensions_dimension_id", default_dimensions_dimension_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.delete(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [204]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    delete_default_dimensions_for_customer_by_dimension_id_by_parent_id_by_id.metadata = {'url': '/companies({company_id})/customers({customer_id})/defaultDimensions({defaultDimensions_parentId},{defaultDimensions_dimensionId})'}

    def patch_default_dimensions_for_customer_by_dimension_id_by_parent_id_by_id(
            self, body, company_id, customer_id, default_dimensions_parent_id, default_dimensions_dimension_id, custom_headers=None, raw=False, **operation_config):
        """Lets the user patch the specified defaultDimensions.

        :param body:
        :type body: ~azure.mgmt.devtestlabs.models.BodyModelModel
        :param company_id: id for company
        :type company_id: str
        :param customer_id: id for customer
        :type customer_id: str
        :param default_dimensions_parent_id: parentId for defaultDimensions
        :type default_dimensions_parent_id: str
        :param default_dimensions_dimension_id: dimensionId for
         defaultDimensions
        :type default_dimensions_dimension_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: DefaultDimensions or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.DefaultDimensions or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.patch_default_dimensions_for_customer_by_dimension_id_by_parent_id_by_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'customer_id': self._serialize.url("customer_id", customer_id, 'str'),
            'defaultDimensions_parentId': self._serialize.url("default_dimensions_parent_id", default_dimensions_parent_id, 'str'),
            'defaultDimensions_dimensionId': self._serialize.url("default_dimensions_dimension_id", default_dimensions_dimension_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        header_parameters['If-Match'] = self._serialize.header("self.config.if_match", self.config.if_match, 'str')
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct body
        body_content = self._serialize.body(body, 'BodyModelModel')

        # Construct and send request
        request = self._client.patch(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('DefaultDimensions', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    patch_default_dimensions_for_customer_by_dimension_id_by_parent_id_by_id.metadata = {'url': '/companies({company_id})/customers({customer_id})/defaultDimensions({defaultDimensions_parentId},{defaultDimensions_dimensionId})'}

    def get_customer_financial_details(
            self, company_id, select=None, custom_headers=None, raw=False, **operation_config):
        """Returns a list of customerFinancialDetails.

        :param company_id: id for company
        :type company_id: str
        :param select: Selected properties to be retrieved
        :type select: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: GetCustomerFinancialDetailsOKResponse or ClientRawResponse if
         raw=true
        :rtype:
         ~azure.mgmt.devtestlabs.models.GetCustomerFinancialDetailsOKResponse
         or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.get_customer_financial_details.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if self.config.top is not None:
            query_parameters['$top'] = self._serialize.query("self.config.top", self.config.top, 'int')
        if self.config.skip is not None:
            query_parameters['$skip'] = self._serialize.query("self.config.skip", self.config.skip, 'int')
        if self.config.limit is not None:
            query_parameters['$limit'] = self._serialize.query("self.config.limit", self.config.limit, 'int')
        if self.config.filter is not None:
            query_parameters['$filter'] = self._serialize.query("self.config.filter", self.config.filter, 'str')
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('GetCustomerFinancialDetailsOKResponse', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_customer_financial_details.metadata = {'url': '/companies({company_id})/customerFinancialDetails'}

    def get_customer_financial_detail_by_id(
            self, company_id, customer_financial_detail_id, select=None, custom_headers=None, raw=False, **operation_config):
        """Retrieve the properties and relationships of an customerFinancialDetail
        object for Dynamics 365 Business Central.

        :param company_id: id for company
        :type company_id: str
        :param customer_financial_detail_id: id for customerFinancialDetail
        :type customer_financial_detail_id: str
        :param select: Selected properties to be retrieved
        :type select: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: CustomerFinancialDetail or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.CustomerFinancialDetail or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.get_customer_financial_detail_by_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'customerFinancialDetail_id': self._serialize.url("customer_financial_detail_id", customer_financial_detail_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('CustomerFinancialDetail', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_customer_financial_detail_by_id.metadata = {'url': '/companies({company_id})/customerFinancialDetails({customerFinancialDetail_id})'}

    def get_vendors(
            self, company_id, expand=None, select=None, custom_headers=None, raw=False, **operation_config):
        """Returns a list of vendors.

        :param company_id: id for company
        :type company_id: str
        :param expand: Entities to expand
        :type expand: list[str]
        :param select: Selected properties to be retrieved
        :type select: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: GetVendorsOKResponse or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.GetVendorsOKResponse or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.get_vendors.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if self.config.top is not None:
            query_parameters['$top'] = self._serialize.query("self.config.top", self.config.top, 'int')
        if self.config.skip is not None:
            query_parameters['$skip'] = self._serialize.query("self.config.skip", self.config.skip, 'int')
        if self.config.limit is not None:
            query_parameters['$limit'] = self._serialize.query("self.config.limit", self.config.limit, 'int')
        if self.config.filter is not None:
            query_parameters['$filter'] = self._serialize.query("self.config.filter", self.config.filter, 'str')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('GetVendorsOKResponse', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_vendors.metadata = {'url': '/companies({company_id})/vendors'}

    def post_vendor(
            self, body, company_id, custom_headers=None, raw=False, **operation_config):
        """Creates a vendor in Dynamics 365 Business Central.

        :param body:
        :type body: ~azure.mgmt.devtestlabs.models.BodyModelModelModelModel
        :param company_id: id for company
        :type company_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: Vendor or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.Vendor or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.post_vendor.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct body
        body_content = self._serialize.body(body, 'BodyModelModelModelModel')

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [201]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 201:
            deserialized = self._deserialize('Vendor', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    post_vendor.metadata = {'url': '/companies({company_id})/vendors'}

    def get_vendor_by_id(
            self, company_id, vendor_id, expand=None, select=None, custom_headers=None, raw=False, **operation_config):
        """Retrieve the properties and relationships of an vendor object for
        Dynamics 365 Business Central.

        :param company_id: id for company
        :type company_id: str
        :param vendor_id: id for vendor
        :type vendor_id: str
        :param expand: Entities to expand
        :type expand: list[str]
        :param select: Selected properties to be retrieved
        :type select: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: Vendor or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.Vendor or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.get_vendor_by_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'vendor_id': self._serialize.url("vendor_id", vendor_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('Vendor', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_vendor_by_id.metadata = {'url': '/companies({company_id})/vendors({vendor_id})'}

    def delete_vendor_by_id(
            self, company_id, vendor_id, custom_headers=None, raw=False, **operation_config):
        """Delete an vendor in Dynamics 365 Business Central.

        :param company_id: id for company
        :type company_id: str
        :param vendor_id: id for vendor
        :type vendor_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.delete_vendor_by_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'vendor_id': self._serialize.url("vendor_id", vendor_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.delete(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [204]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    delete_vendor_by_id.metadata = {'url': '/companies({company_id})/vendors({vendor_id})'}

    def patch_vendor_by_id(
            self, body, company_id, vendor_id, custom_headers=None, raw=False, **operation_config):
        """Lets the user patch the specified vendor.

        :param body:
        :type body: ~azure.mgmt.devtestlabs.models.BodyModelModelModelModel
        :param company_id: id for company
        :type company_id: str
        :param vendor_id: id for vendor
        :type vendor_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: Vendor or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.Vendor or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.patch_vendor_by_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'vendor_id': self._serialize.url("vendor_id", vendor_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        header_parameters['If-Match'] = self._serialize.header("self.config.if_match", self.config.if_match, 'str')
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct body
        body_content = self._serialize.body(body, 'BodyModelModelModelModel')

        # Construct and send request
        request = self._client.patch(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('Vendor', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    patch_vendor_by_id.metadata = {'url': '/companies({company_id})/vendors({vendor_id})'}

    def get_picture_for_vendor(
            self, company_id, vendor_id, select=None, custom_headers=None, raw=False, **operation_config):
        """Returns a list of picture.

        :param company_id: id for company
        :type company_id: str
        :param vendor_id: id for vendor
        :type vendor_id: str
        :param select: Selected properties to be retrieved
        :type select: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: GetPictureForVendorOKResponse or ClientRawResponse if
         raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.GetPictureForVendorOKResponse
         or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.get_picture_for_vendor.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'vendor_id': self._serialize.url("vendor_id", vendor_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if self.config.top is not None:
            query_parameters['$top'] = self._serialize.query("self.config.top", self.config.top, 'int')
        if self.config.skip is not None:
            query_parameters['$skip'] = self._serialize.query("self.config.skip", self.config.skip, 'int')
        if self.config.limit is not None:
            query_parameters['$limit'] = self._serialize.query("self.config.limit", self.config.limit, 'int')
        if self.config.filter is not None:
            query_parameters['$filter'] = self._serialize.query("self.config.filter", self.config.filter, 'str')
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('GetPictureForVendorOKResponse', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_picture_for_vendor.metadata = {'url': '/companies({company_id})/vendors({vendor_id})/picture'}

    def get_picture_for_vendor_by_id(
            self, company_id, vendor_id, picture_id, select=None, custom_headers=None, raw=False, **operation_config):
        """Retrieve the properties and relationships of an picture object for
        Dynamics 365 Business Central.

        :param company_id: id for company
        :type company_id: str
        :param vendor_id: id for vendor
        :type vendor_id: str
        :param picture_id: id for picture
        :type picture_id: str
        :param select: Selected properties to be retrieved
        :type select: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: Picture or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.Picture or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.get_picture_for_vendor_by_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'vendor_id': self._serialize.url("vendor_id", vendor_id, 'str'),
            'picture_id': self._serialize.url("picture_id", picture_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('Picture', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_picture_for_vendor_by_id.metadata = {'url': '/companies({company_id})/vendors({vendor_id})/picture({picture_id})'}

    def delete_picture_for_vendor_by_id_by_id(
            self, company_id, vendor_id, picture_id, custom_headers=None, raw=False, **operation_config):
        """Delete an picture in Dynamics 365 Business Central.

        :param company_id: id for company
        :type company_id: str
        :param vendor_id: id for vendor
        :type vendor_id: str
        :param picture_id: id for picture
        :type picture_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.delete_picture_for_vendor_by_id_by_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'vendor_id': self._serialize.url("vendor_id", vendor_id, 'str'),
            'picture_id': self._serialize.url("picture_id", picture_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.delete(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [204]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    delete_picture_for_vendor_by_id_by_id.metadata = {'url': '/companies({company_id})/vendors({vendor_id})/picture({picture_id})'}

    def patch_picture_for_vendor_by_id_by_id(
            self, body, company_id, vendor_id, picture_id, custom_headers=None, raw=False, **operation_config):
        """Lets the user patch the specified picture.

        :param body:
        :type body: ~azure.mgmt.devtestlabs.models.BodyModel
        :param company_id: id for company
        :type company_id: str
        :param vendor_id: id for vendor
        :type vendor_id: str
        :param picture_id: id for picture
        :type picture_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: Picture or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.Picture or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.patch_picture_for_vendor_by_id_by_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'vendor_id': self._serialize.url("vendor_id", vendor_id, 'str'),
            'picture_id': self._serialize.url("picture_id", picture_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        header_parameters['If-Match'] = self._serialize.header("self.config.if_match", self.config.if_match, 'str')
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct body
        body_content = self._serialize.body(body, 'BodyModel')

        # Construct and send request
        request = self._client.patch(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('Picture', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    patch_picture_for_vendor_by_id_by_id.metadata = {'url': '/companies({company_id})/vendors({vendor_id})/picture({picture_id})'}

    def get_default_dimensions_for_vendor(
            self, company_id, vendor_id, expand=None, select=None, custom_headers=None, raw=False, **operation_config):
        """Returns a list of defaultDimensions.

        :param company_id: id for company
        :type company_id: str
        :param vendor_id: id for vendor
        :type vendor_id: str
        :param expand: Entities to expand
        :type expand: list[str]
        :param select: Selected properties to be retrieved
        :type select: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: GetDefaultDimensionsForVendorOKResponse or ClientRawResponse
         if raw=true
        :rtype:
         ~azure.mgmt.devtestlabs.models.GetDefaultDimensionsForVendorOKResponse
         or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.get_default_dimensions_for_vendor.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'vendor_id': self._serialize.url("vendor_id", vendor_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if self.config.top is not None:
            query_parameters['$top'] = self._serialize.query("self.config.top", self.config.top, 'int')
        if self.config.skip is not None:
            query_parameters['$skip'] = self._serialize.query("self.config.skip", self.config.skip, 'int')
        if self.config.limit is not None:
            query_parameters['$limit'] = self._serialize.query("self.config.limit", self.config.limit, 'int')
        if self.config.filter is not None:
            query_parameters['$filter'] = self._serialize.query("self.config.filter", self.config.filter, 'str')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('GetDefaultDimensionsForVendorOKResponse', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_default_dimensions_for_vendor.metadata = {'url': '/companies({company_id})/vendors({vendor_id})/defaultDimensions'}

    def post_default_dimensions_for_vendor(
            self, body, company_id, vendor_id, custom_headers=None, raw=False, **operation_config):
        """Creates a defaultDimensions in Dynamics 365 Business Central.

        :param body:
        :type body: ~azure.mgmt.devtestlabs.models.BodyModelModel
        :param company_id: id for company
        :type company_id: str
        :param vendor_id: id for vendor
        :type vendor_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: DefaultDimensions or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.DefaultDimensions or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.post_default_dimensions_for_vendor.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'vendor_id': self._serialize.url("vendor_id", vendor_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct body
        body_content = self._serialize.body(body, 'BodyModelModel')

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [201]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 201:
            deserialized = self._deserialize('DefaultDimensions', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    post_default_dimensions_for_vendor.metadata = {'url': '/companies({company_id})/vendors({vendor_id})/defaultDimensions'}

    def get_default_dimensions_for_vendor_by_dimension_id_by_parent_id(
            self, company_id, vendor_id, default_dimensions_parent_id, default_dimensions_dimension_id, expand=None, select=None, custom_headers=None, raw=False, **operation_config):
        """Retrieve the properties and relationships of an defaultDimensions
        object for Dynamics 365 Business Central.

        :param company_id: id for company
        :type company_id: str
        :param vendor_id: id for vendor
        :type vendor_id: str
        :param default_dimensions_parent_id: parentId for defaultDimensions
        :type default_dimensions_parent_id: str
        :param default_dimensions_dimension_id: dimensionId for
         defaultDimensions
        :type default_dimensions_dimension_id: str
        :param expand: Entities to expand
        :type expand: list[str]
        :param select: Selected properties to be retrieved
        :type select: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: DefaultDimensions or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.DefaultDimensions or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.get_default_dimensions_for_vendor_by_dimension_id_by_parent_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'vendor_id': self._serialize.url("vendor_id", vendor_id, 'str'),
            'defaultDimensions_parentId': self._serialize.url("default_dimensions_parent_id", default_dimensions_parent_id, 'str'),
            'defaultDimensions_dimensionId': self._serialize.url("default_dimensions_dimension_id", default_dimensions_dimension_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('DefaultDimensions', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_default_dimensions_for_vendor_by_dimension_id_by_parent_id.metadata = {'url': '/companies({company_id})/vendors({vendor_id})/defaultDimensions({defaultDimensions_parentId},{defaultDimensions_dimensionId})'}

    def delete_default_dimensions_for_vendor_by_dimension_id_by_parent_id_by_id(
            self, company_id, vendor_id, default_dimensions_parent_id, default_dimensions_dimension_id, custom_headers=None, raw=False, **operation_config):
        """Delete an defaultDimensions in Dynamics 365 Business Central.

        :param company_id: id for company
        :type company_id: str
        :param vendor_id: id for vendor
        :type vendor_id: str
        :param default_dimensions_parent_id: parentId for defaultDimensions
        :type default_dimensions_parent_id: str
        :param default_dimensions_dimension_id: dimensionId for
         defaultDimensions
        :type default_dimensions_dimension_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.delete_default_dimensions_for_vendor_by_dimension_id_by_parent_id_by_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'vendor_id': self._serialize.url("vendor_id", vendor_id, 'str'),
            'defaultDimensions_parentId': self._serialize.url("default_dimensions_parent_id", default_dimensions_parent_id, 'str'),
            'defaultDimensions_dimensionId': self._serialize.url("default_dimensions_dimension_id", default_dimensions_dimension_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.delete(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [204]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    delete_default_dimensions_for_vendor_by_dimension_id_by_parent_id_by_id.metadata = {'url': '/companies({company_id})/vendors({vendor_id})/defaultDimensions({defaultDimensions_parentId},{defaultDimensions_dimensionId})'}

    def patch_default_dimensions_for_vendor_by_dimension_id_by_parent_id_by_id(
            self, body, company_id, vendor_id, default_dimensions_parent_id, default_dimensions_dimension_id, custom_headers=None, raw=False, **operation_config):
        """Lets the user patch the specified defaultDimensions.

        :param body:
        :type body: ~azure.mgmt.devtestlabs.models.BodyModelModel
        :param company_id: id for company
        :type company_id: str
        :param vendor_id: id for vendor
        :type vendor_id: str
        :param default_dimensions_parent_id: parentId for defaultDimensions
        :type default_dimensions_parent_id: str
        :param default_dimensions_dimension_id: dimensionId for
         defaultDimensions
        :type default_dimensions_dimension_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: DefaultDimensions or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.DefaultDimensions or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.patch_default_dimensions_for_vendor_by_dimension_id_by_parent_id_by_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'vendor_id': self._serialize.url("vendor_id", vendor_id, 'str'),
            'defaultDimensions_parentId': self._serialize.url("default_dimensions_parent_id", default_dimensions_parent_id, 'str'),
            'defaultDimensions_dimensionId': self._serialize.url("default_dimensions_dimension_id", default_dimensions_dimension_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        header_parameters['If-Match'] = self._serialize.header("self.config.if_match", self.config.if_match, 'str')
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct body
        body_content = self._serialize.body(body, 'BodyModelModel')

        # Construct and send request
        request = self._client.patch(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('DefaultDimensions', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    patch_default_dimensions_for_vendor_by_dimension_id_by_parent_id_by_id.metadata = {'url': '/companies({company_id})/vendors({vendor_id})/defaultDimensions({defaultDimensions_parentId},{defaultDimensions_dimensionId})'}

    def get_company_information(
            self, company_id, select=None, custom_headers=None, raw=False, **operation_config):
        """Returns a list of companyInformation.

        :param company_id: id for company
        :type company_id: str
        :param select: Selected properties to be retrieved
        :type select: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: GetCompanyInformationOKResponse or ClientRawResponse if
         raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.GetCompanyInformationOKResponse
         or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.get_company_information.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if self.config.top is not None:
            query_parameters['$top'] = self._serialize.query("self.config.top", self.config.top, 'int')
        if self.config.skip is not None:
            query_parameters['$skip'] = self._serialize.query("self.config.skip", self.config.skip, 'int')
        if self.config.limit is not None:
            query_parameters['$limit'] = self._serialize.query("self.config.limit", self.config.limit, 'int')
        if self.config.filter is not None:
            query_parameters['$filter'] = self._serialize.query("self.config.filter", self.config.filter, 'str')
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('GetCompanyInformationOKResponse', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_company_information.metadata = {'url': '/companies({company_id})/companyInformation'}

    def get_company_information_by_id(
            self, company_id, company_information_id, select=None, custom_headers=None, raw=False, **operation_config):
        """Retrieve the properties and relationships of an companyInformation
        object for Dynamics 365 Business Central.

        :param company_id: id for company
        :type company_id: str
        :param company_information_id: id for companyInformation
        :type company_information_id: str
        :param select: Selected properties to be retrieved
        :type select: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: CompanyInformation or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.CompanyInformation or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.get_company_information_by_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'companyInformation_id': self._serialize.url("company_information_id", company_information_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('CompanyInformation', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_company_information_by_id.metadata = {'url': '/companies({company_id})/companyInformation({companyInformation_id})'}

    def patch_company_information_by_id(
            self, body, company_id, company_information_id, custom_headers=None, raw=False, **operation_config):
        """Lets the user patch the specified companyInformation.

        :param body:
        :type body:
         ~azure.mgmt.devtestlabs.models.BodyModelModelModelModelModel
        :param company_id: id for company
        :type company_id: str
        :param company_information_id: id for companyInformation
        :type company_information_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: CompanyInformation or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.CompanyInformation or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.patch_company_information_by_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'companyInformation_id': self._serialize.url("company_information_id", company_information_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        header_parameters['If-Match'] = self._serialize.header("self.config.if_match", self.config.if_match, 'str')
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct body
        body_content = self._serialize.body(body, 'BodyModelModelModelModelModel')

        # Construct and send request
        request = self._client.patch(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('CompanyInformation', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    patch_company_information_by_id.metadata = {'url': '/companies({company_id})/companyInformation({companyInformation_id})'}

    def get_sales_invoices(
            self, company_id, expand=None, select=None, custom_headers=None, raw=False, **operation_config):
        """Returns a list of salesInvoices.

        :param company_id: id for company
        :type company_id: str
        :param expand: Entities to expand
        :type expand: list[str]
        :param select: Selected properties to be retrieved
        :type select: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: GetSalesInvoicesOKResponse or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.GetSalesInvoicesOKResponse or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.get_sales_invoices.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if self.config.top is not None:
            query_parameters['$top'] = self._serialize.query("self.config.top", self.config.top, 'int')
        if self.config.skip is not None:
            query_parameters['$skip'] = self._serialize.query("self.config.skip", self.config.skip, 'int')
        if self.config.limit is not None:
            query_parameters['$limit'] = self._serialize.query("self.config.limit", self.config.limit, 'int')
        if self.config.filter is not None:
            query_parameters['$filter'] = self._serialize.query("self.config.filter", self.config.filter, 'str')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('GetSalesInvoicesOKResponse', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_sales_invoices.metadata = {'url': '/companies({company_id})/salesInvoices'}

    def post_sales_invoice(
            self, body, company_id, custom_headers=None, raw=False, **operation_config):
        """Creates a salesInvoice in Dynamics 365 Business Central.

        :param body:
        :type body:
         ~azure.mgmt.devtestlabs.models.BodyModelModelModelModelModelModel
        :param company_id: id for company
        :type company_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: SalesInvoice or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.SalesInvoice or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.post_sales_invoice.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct body
        body_content = self._serialize.body(body, 'BodyModelModelModelModelModelModel')

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [201]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 201:
            deserialized = self._deserialize('SalesInvoice', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    post_sales_invoice.metadata = {'url': '/companies({company_id})/salesInvoices'}

    def get_sales_invoice_by_id(
            self, company_id, sales_invoice_id, expand=None, select=None, custom_headers=None, raw=False, **operation_config):
        """Retrieve the properties and relationships of an salesInvoice object for
        Dynamics 365 Business Central.

        :param company_id: id for company
        :type company_id: str
        :param sales_invoice_id: id for salesInvoice
        :type sales_invoice_id: str
        :param expand: Entities to expand
        :type expand: list[str]
        :param select: Selected properties to be retrieved
        :type select: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: SalesInvoice or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.SalesInvoice or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.get_sales_invoice_by_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'salesInvoice_id': self._serialize.url("sales_invoice_id", sales_invoice_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('SalesInvoice', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_sales_invoice_by_id.metadata = {'url': '/companies({company_id})/salesInvoices({salesInvoice_id})'}

    def delete_sales_invoice_by_id(
            self, company_id, sales_invoice_id, custom_headers=None, raw=False, **operation_config):
        """Delete an salesInvoice in Dynamics 365 Business Central.

        :param company_id: id for company
        :type company_id: str
        :param sales_invoice_id: id for salesInvoice
        :type sales_invoice_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.delete_sales_invoice_by_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'salesInvoice_id': self._serialize.url("sales_invoice_id", sales_invoice_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.delete(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [204]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    delete_sales_invoice_by_id.metadata = {'url': '/companies({company_id})/salesInvoices({salesInvoice_id})'}

    def patch_sales_invoice_by_id(
            self, body, company_id, sales_invoice_id, custom_headers=None, raw=False, **operation_config):
        """Lets the user patch the specified salesInvoice.

        :param body:
        :type body:
         ~azure.mgmt.devtestlabs.models.BodyModelModelModelModelModelModel
        :param company_id: id for company
        :type company_id: str
        :param sales_invoice_id: id for salesInvoice
        :type sales_invoice_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: SalesInvoice or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.SalesInvoice or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.patch_sales_invoice_by_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'salesInvoice_id': self._serialize.url("sales_invoice_id", sales_invoice_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        header_parameters['If-Match'] = self._serialize.header("self.config.if_match", self.config.if_match, 'str')
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct body
        body_content = self._serialize.body(body, 'BodyModelModelModelModelModelModel')

        # Construct and send request
        request = self._client.patch(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('SalesInvoice', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    patch_sales_invoice_by_id.metadata = {'url': '/companies({company_id})/salesInvoices({salesInvoice_id})'}

    def cancel_and_send_action_sales_invoices(
            self, company_id, sales_invoice_id, custom_headers=None, raw=False, **operation_config):
        """Performs the cancelAndSend action for salesInvoices entity.

        :param company_id: id for company
        :type company_id: str
        :param sales_invoice_id: id for salesInvoice
        :type sales_invoice_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.cancel_and_send_action_sales_invoices.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'salesInvoice_id': self._serialize.url("sales_invoice_id", sales_invoice_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [204]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    cancel_and_send_action_sales_invoices.metadata = {'url': '/companies({company_id})/salesInvoices({salesInvoice_id})/Microsoft.NAV.cancelAndSend'}

    def cancel_action_sales_invoices(
            self, company_id, sales_invoice_id, custom_headers=None, raw=False, **operation_config):
        """Performs the cancel action for salesInvoices entity.

        :param company_id: id for company
        :type company_id: str
        :param sales_invoice_id: id for salesInvoice
        :type sales_invoice_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.cancel_action_sales_invoices.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'salesInvoice_id': self._serialize.url("sales_invoice_id", sales_invoice_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [204]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    cancel_action_sales_invoices.metadata = {'url': '/companies({company_id})/salesInvoices({salesInvoice_id})/Microsoft.NAV.cancel'}

    def post_and_send_action_sales_invoices(
            self, company_id, sales_invoice_id, custom_headers=None, raw=False, **operation_config):
        """Performs the postAndSend action for salesInvoices entity.

        :param company_id: id for company
        :type company_id: str
        :param sales_invoice_id: id for salesInvoice
        :type sales_invoice_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.post_and_send_action_sales_invoices.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'salesInvoice_id': self._serialize.url("sales_invoice_id", sales_invoice_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [204]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    post_and_send_action_sales_invoices.metadata = {'url': '/companies({company_id})/salesInvoices({salesInvoice_id})/Microsoft.NAV.postAndSend'}

    def post_action_sales_invoices(
            self, company_id, sales_invoice_id, custom_headers=None, raw=False, **operation_config):
        """Performs the post action for salesInvoices entity.

        :param company_id: id for company
        :type company_id: str
        :param sales_invoice_id: id for salesInvoice
        :type sales_invoice_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.post_action_sales_invoices.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'salesInvoice_id': self._serialize.url("sales_invoice_id", sales_invoice_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [204]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    post_action_sales_invoices.metadata = {'url': '/companies({company_id})/salesInvoices({salesInvoice_id})/Microsoft.NAV.post'}

    def send_action_sales_invoices(
            self, company_id, sales_invoice_id, custom_headers=None, raw=False, **operation_config):
        """Performs the send action for salesInvoices entity.

        :param company_id: id for company
        :type company_id: str
        :param sales_invoice_id: id for salesInvoice
        :type sales_invoice_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.send_action_sales_invoices.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'salesInvoice_id': self._serialize.url("sales_invoice_id", sales_invoice_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [204]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    send_action_sales_invoices.metadata = {'url': '/companies({company_id})/salesInvoices({salesInvoice_id})/Microsoft.NAV.send'}

    def get_sales_invoice_lines_for_sales_invoice(
            self, company_id, sales_invoice_id, expand=None, select=None, custom_headers=None, raw=False, **operation_config):
        """Returns a list of salesInvoiceLines.

        :param company_id: id for company
        :type company_id: str
        :param sales_invoice_id: id for salesInvoice
        :type sales_invoice_id: str
        :param expand: Entities to expand
        :type expand: list[str]
        :param select: Selected properties to be retrieved
        :type select: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: GetSalesInvoiceLinesForSalesInvoiceOKResponse or
         ClientRawResponse if raw=true
        :rtype:
         ~azure.mgmt.devtestlabs.models.GetSalesInvoiceLinesForSalesInvoiceOKResponse
         or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.get_sales_invoice_lines_for_sales_invoice.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'salesInvoice_id': self._serialize.url("sales_invoice_id", sales_invoice_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if self.config.top is not None:
            query_parameters['$top'] = self._serialize.query("self.config.top", self.config.top, 'int')
        if self.config.skip is not None:
            query_parameters['$skip'] = self._serialize.query("self.config.skip", self.config.skip, 'int')
        if self.config.limit is not None:
            query_parameters['$limit'] = self._serialize.query("self.config.limit", self.config.limit, 'int')
        if self.config.filter is not None:
            query_parameters['$filter'] = self._serialize.query("self.config.filter", self.config.filter, 'str')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('GetSalesInvoiceLinesForSalesInvoiceOKResponse', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_sales_invoice_lines_for_sales_invoice.metadata = {'url': '/companies({company_id})/salesInvoices({salesInvoice_id})/salesInvoiceLines'}

    def post_sales_invoice_line_for_sales_invoice(
            self, body, company_id, sales_invoice_id, custom_headers=None, raw=False, **operation_config):
        """Creates a salesInvoiceLine in Dynamics 365 Business Central.

        :param body:
        :type body:
         ~azure.mgmt.devtestlabs.models.BodyModelModelModelModelModelModelModel
        :param company_id: id for company
        :type company_id: str
        :param sales_invoice_id: id for salesInvoice
        :type sales_invoice_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: SalesInvoiceLine or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.SalesInvoiceLine or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.post_sales_invoice_line_for_sales_invoice.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'salesInvoice_id': self._serialize.url("sales_invoice_id", sales_invoice_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct body
        body_content = self._serialize.body(body, 'BodyModelModelModelModelModelModelModel')

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [201]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 201:
            deserialized = self._deserialize('SalesInvoiceLine', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    post_sales_invoice_line_for_sales_invoice.metadata = {'url': '/companies({company_id})/salesInvoices({salesInvoice_id})/salesInvoiceLines'}

    def get_sales_invoice_line_for_sales_invoice_by_id(
            self, company_id, sales_invoice_id, sales_invoice_line_id, expand=None, select=None, custom_headers=None, raw=False, **operation_config):
        """Retrieve the properties and relationships of an salesInvoiceLine object
        for Dynamics 365 Business Central.

        :param company_id: id for company
        :type company_id: str
        :param sales_invoice_id: id for salesInvoice
        :type sales_invoice_id: str
        :param sales_invoice_line_id: id for salesInvoiceLine
        :type sales_invoice_line_id: str
        :param expand: Entities to expand
        :type expand: list[str]
        :param select: Selected properties to be retrieved
        :type select: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: SalesInvoiceLine or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.SalesInvoiceLine or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.get_sales_invoice_line_for_sales_invoice_by_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'salesInvoice_id': self._serialize.url("sales_invoice_id", sales_invoice_id, 'str'),
            'salesInvoiceLine_id': self._serialize.url("sales_invoice_line_id", sales_invoice_line_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('SalesInvoiceLine', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_sales_invoice_line_for_sales_invoice_by_id.metadata = {'url': '/companies({company_id})/salesInvoices({salesInvoice_id})/salesInvoiceLines('{salesInvoiceLine_id}')'}

    def delete_sales_invoice_line_for_sales_invoice_by_id_by_id(
            self, company_id, sales_invoice_id, sales_invoice_line_id, custom_headers=None, raw=False, **operation_config):
        """Delete an salesInvoiceLine in Dynamics 365 Business Central.

        :param company_id: id for company
        :type company_id: str
        :param sales_invoice_id: id for salesInvoice
        :type sales_invoice_id: str
        :param sales_invoice_line_id: id for salesInvoiceLine
        :type sales_invoice_line_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.delete_sales_invoice_line_for_sales_invoice_by_id_by_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'salesInvoice_id': self._serialize.url("sales_invoice_id", sales_invoice_id, 'str'),
            'salesInvoiceLine_id': self._serialize.url("sales_invoice_line_id", sales_invoice_line_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.delete(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [204]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    delete_sales_invoice_line_for_sales_invoice_by_id_by_id.metadata = {'url': '/companies({company_id})/salesInvoices({salesInvoice_id})/salesInvoiceLines('{salesInvoiceLine_id}')'}

    def patch_sales_invoice_line_for_sales_invoice_by_id_by_id(
            self, body, company_id, sales_invoice_id, sales_invoice_line_id, custom_headers=None, raw=False, **operation_config):
        """Lets the user patch the specified salesInvoiceLine.

        :param body:
        :type body:
         ~azure.mgmt.devtestlabs.models.BodyModelModelModelModelModelModelModel
        :param company_id: id for company
        :type company_id: str
        :param sales_invoice_id: id for salesInvoice
        :type sales_invoice_id: str
        :param sales_invoice_line_id: id for salesInvoiceLine
        :type sales_invoice_line_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: SalesInvoiceLine or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.SalesInvoiceLine or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.patch_sales_invoice_line_for_sales_invoice_by_id_by_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'salesInvoice_id': self._serialize.url("sales_invoice_id", sales_invoice_id, 'str'),
            'salesInvoiceLine_id': self._serialize.url("sales_invoice_line_id", sales_invoice_line_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        header_parameters['If-Match'] = self._serialize.header("self.config.if_match", self.config.if_match, 'str')
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct body
        body_content = self._serialize.body(body, 'BodyModelModelModelModelModelModelModel')

        # Construct and send request
        request = self._client.patch(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('SalesInvoiceLine', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    patch_sales_invoice_line_for_sales_invoice_by_id_by_id.metadata = {'url': '/companies({company_id})/salesInvoices({salesInvoice_id})/salesInvoiceLines('{salesInvoiceLine_id}')'}

    def get_pdf_document_for_sales_invoice(
            self, company_id, sales_invoice_id, select=None, custom_headers=None, raw=False, **operation_config):
        """Returns a list of pdfDocument.

        :param company_id: id for company
        :type company_id: str
        :param sales_invoice_id: id for salesInvoice
        :type sales_invoice_id: str
        :param select: Selected properties to be retrieved
        :type select: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: GetPdfDocumentForSalesInvoiceOKResponse or ClientRawResponse
         if raw=true
        :rtype:
         ~azure.mgmt.devtestlabs.models.GetPdfDocumentForSalesInvoiceOKResponse
         or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.get_pdf_document_for_sales_invoice.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'salesInvoice_id': self._serialize.url("sales_invoice_id", sales_invoice_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if self.config.top is not None:
            query_parameters['$top'] = self._serialize.query("self.config.top", self.config.top, 'int')
        if self.config.skip is not None:
            query_parameters['$skip'] = self._serialize.query("self.config.skip", self.config.skip, 'int')
        if self.config.limit is not None:
            query_parameters['$limit'] = self._serialize.query("self.config.limit", self.config.limit, 'int')
        if self.config.filter is not None:
            query_parameters['$filter'] = self._serialize.query("self.config.filter", self.config.filter, 'str')
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('GetPdfDocumentForSalesInvoiceOKResponse', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_pdf_document_for_sales_invoice.metadata = {'url': '/companies({company_id})/salesInvoices({salesInvoice_id})/pdfDocument'}

    def get_pdf_document_for_sales_invoice_by_id(
            self, company_id, sales_invoice_id, pdf_document_id, select=None, custom_headers=None, raw=False, **operation_config):
        """Retrieve the properties and relationships of an pdfDocument object for
        Dynamics 365 Business Central.

        :param company_id: id for company
        :type company_id: str
        :param sales_invoice_id: id for salesInvoice
        :type sales_invoice_id: str
        :param pdf_document_id: id for pdfDocument
        :type pdf_document_id: str
        :param select: Selected properties to be retrieved
        :type select: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: PdfDocument or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.PdfDocument or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.get_pdf_document_for_sales_invoice_by_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'salesInvoice_id': self._serialize.url("sales_invoice_id", sales_invoice_id, 'str'),
            'pdfDocument_id': self._serialize.url("pdf_document_id", pdf_document_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('PdfDocument', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_pdf_document_for_sales_invoice_by_id.metadata = {'url': '/companies({company_id})/salesInvoices({salesInvoice_id})/pdfDocument({pdfDocument_id})'}

    def get_sales_invoice_lines(
            self, company_id, expand=None, select=None, custom_headers=None, raw=False, **operation_config):
        """Returns a list of salesInvoiceLines.

        :param company_id: id for company
        :type company_id: str
        :param expand: Entities to expand
        :type expand: list[str]
        :param select: Selected properties to be retrieved
        :type select: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: GetSalesInvoiceLinesOKResponse or ClientRawResponse if
         raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.GetSalesInvoiceLinesOKResponse
         or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.get_sales_invoice_lines.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if self.config.top is not None:
            query_parameters['$top'] = self._serialize.query("self.config.top", self.config.top, 'int')
        if self.config.skip is not None:
            query_parameters['$skip'] = self._serialize.query("self.config.skip", self.config.skip, 'int')
        if self.config.limit is not None:
            query_parameters['$limit'] = self._serialize.query("self.config.limit", self.config.limit, 'int')
        if self.config.filter is not None:
            query_parameters['$filter'] = self._serialize.query("self.config.filter", self.config.filter, 'str')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('GetSalesInvoiceLinesOKResponse', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_sales_invoice_lines.metadata = {'url': '/companies({company_id})/salesInvoiceLines'}

    def post_sales_invoice_line(
            self, body, company_id, custom_headers=None, raw=False, **operation_config):
        """Creates a salesInvoiceLine in Dynamics 365 Business Central.

        :param body:
        :type body:
         ~azure.mgmt.devtestlabs.models.BodyModelModelModelModelModelModelModel
        :param company_id: id for company
        :type company_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: SalesInvoiceLine or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.SalesInvoiceLine or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.post_sales_invoice_line.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct body
        body_content = self._serialize.body(body, 'BodyModelModelModelModelModelModelModel')

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [201]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 201:
            deserialized = self._deserialize('SalesInvoiceLine', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    post_sales_invoice_line.metadata = {'url': '/companies({company_id})/salesInvoiceLines'}

    def get_sales_invoice_line_by_id(
            self, company_id, sales_invoice_line_id, expand=None, select=None, custom_headers=None, raw=False, **operation_config):
        """Retrieve the properties and relationships of an salesInvoiceLine object
        for Dynamics 365 Business Central.

        :param company_id: id for company
        :type company_id: str
        :param sales_invoice_line_id: id for salesInvoiceLine
        :type sales_invoice_line_id: str
        :param expand: Entities to expand
        :type expand: list[str]
        :param select: Selected properties to be retrieved
        :type select: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: SalesInvoiceLine or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.SalesInvoiceLine or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.get_sales_invoice_line_by_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'salesInvoiceLine_id': self._serialize.url("sales_invoice_line_id", sales_invoice_line_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('SalesInvoiceLine', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_sales_invoice_line_by_id.metadata = {'url': '/companies({company_id})/salesInvoiceLines('{salesInvoiceLine_id}')'}

    def delete_sales_invoice_line_by_id(
            self, company_id, sales_invoice_line_id, custom_headers=None, raw=False, **operation_config):
        """Delete an salesInvoiceLine in Dynamics 365 Business Central.

        :param company_id: id for company
        :type company_id: str
        :param sales_invoice_line_id: id for salesInvoiceLine
        :type sales_invoice_line_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.delete_sales_invoice_line_by_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'salesInvoiceLine_id': self._serialize.url("sales_invoice_line_id", sales_invoice_line_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.delete(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [204]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    delete_sales_invoice_line_by_id.metadata = {'url': '/companies({company_id})/salesInvoiceLines('{salesInvoiceLine_id}')'}

    def patch_sales_invoice_line_by_id(
            self, body, company_id, sales_invoice_line_id, custom_headers=None, raw=False, **operation_config):
        """Lets the user patch the specified salesInvoiceLine.

        :param body:
        :type body:
         ~azure.mgmt.devtestlabs.models.BodyModelModelModelModelModelModelModel
        :param company_id: id for company
        :type company_id: str
        :param sales_invoice_line_id: id for salesInvoiceLine
        :type sales_invoice_line_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: SalesInvoiceLine or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.SalesInvoiceLine or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.patch_sales_invoice_line_by_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'salesInvoiceLine_id': self._serialize.url("sales_invoice_line_id", sales_invoice_line_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        header_parameters['If-Match'] = self._serialize.header("self.config.if_match", self.config.if_match, 'str')
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct body
        body_content = self._serialize.body(body, 'BodyModelModelModelModelModelModelModel')

        # Construct and send request
        request = self._client.patch(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('SalesInvoiceLine', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    patch_sales_invoice_line_by_id.metadata = {'url': '/companies({company_id})/salesInvoiceLines('{salesInvoiceLine_id}')'}

    def get_pdf_document(
            self, company_id, select=None, custom_headers=None, raw=False, **operation_config):
        """Returns a list of pdfDocument.

        :param company_id: id for company
        :type company_id: str
        :param select: Selected properties to be retrieved
        :type select: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: GetPdfDocumentOKResponse or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.GetPdfDocumentOKResponse or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.get_pdf_document.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if self.config.top is not None:
            query_parameters['$top'] = self._serialize.query("self.config.top", self.config.top, 'int')
        if self.config.skip is not None:
            query_parameters['$skip'] = self._serialize.query("self.config.skip", self.config.skip, 'int')
        if self.config.limit is not None:
            query_parameters['$limit'] = self._serialize.query("self.config.limit", self.config.limit, 'int')
        if self.config.filter is not None:
            query_parameters['$filter'] = self._serialize.query("self.config.filter", self.config.filter, 'str')
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('GetPdfDocumentOKResponse', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_pdf_document.metadata = {'url': '/companies({company_id})/pdfDocument'}

    def get_pdf_document_by_id(
            self, company_id, pdf_document_id, select=None, custom_headers=None, raw=False, **operation_config):
        """Retrieve the properties and relationships of an pdfDocument object for
        Dynamics 365 Business Central.

        :param company_id: id for company
        :type company_id: str
        :param pdf_document_id: id for pdfDocument
        :type pdf_document_id: str
        :param select: Selected properties to be retrieved
        :type select: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: PdfDocument or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.PdfDocument or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.get_pdf_document_by_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'pdfDocument_id': self._serialize.url("pdf_document_id", pdf_document_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('PdfDocument', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_pdf_document_by_id.metadata = {'url': '/companies({company_id})/pdfDocument({pdfDocument_id})'}

    def get_customer_payment_journals(
            self, company_id, expand=None, select=None, custom_headers=None, raw=False, **operation_config):
        """Returns a list of customerPaymentJournals.

        :param company_id: id for company
        :type company_id: str
        :param expand: Entities to expand
        :type expand: list[str]
        :param select: Selected properties to be retrieved
        :type select: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: GetCustomerPaymentJournalsOKResponse or ClientRawResponse if
         raw=true
        :rtype:
         ~azure.mgmt.devtestlabs.models.GetCustomerPaymentJournalsOKResponse or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.get_customer_payment_journals.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if self.config.top is not None:
            query_parameters['$top'] = self._serialize.query("self.config.top", self.config.top, 'int')
        if self.config.skip is not None:
            query_parameters['$skip'] = self._serialize.query("self.config.skip", self.config.skip, 'int')
        if self.config.limit is not None:
            query_parameters['$limit'] = self._serialize.query("self.config.limit", self.config.limit, 'int')
        if self.config.filter is not None:
            query_parameters['$filter'] = self._serialize.query("self.config.filter", self.config.filter, 'str')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('GetCustomerPaymentJournalsOKResponse', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_customer_payment_journals.metadata = {'url': '/companies({company_id})/customerPaymentJournals'}

    def post_customer_payment_journal(
            self, body, company_id, custom_headers=None, raw=False, **operation_config):
        """Creates a customerPaymentJournal in Dynamics 365 Business Central.

        :param body:
        :type body:
         ~azure.mgmt.devtestlabs.models.BodyModelModelModelModelModelModelModelModel
        :param company_id: id for company
        :type company_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: CustomerPaymentJournal or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.CustomerPaymentJournal or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.post_customer_payment_journal.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct body
        body_content = self._serialize.body(body, 'BodyModelModelModelModelModelModelModelModel')

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [201]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 201:
            deserialized = self._deserialize('CustomerPaymentJournal', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    post_customer_payment_journal.metadata = {'url': '/companies({company_id})/customerPaymentJournals'}

    def get_customer_payment_journal_by_id(
            self, company_id, customer_payment_journal_id, expand=None, select=None, custom_headers=None, raw=False, **operation_config):
        """Retrieve the properties and relationships of an customerPaymentJournal
        object for Dynamics 365 Business Central.

        :param company_id: id for company
        :type company_id: str
        :param customer_payment_journal_id: id for customerPaymentJournal
        :type customer_payment_journal_id: str
        :param expand: Entities to expand
        :type expand: list[str]
        :param select: Selected properties to be retrieved
        :type select: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: CustomerPaymentJournal or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.CustomerPaymentJournal or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.get_customer_payment_journal_by_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'customerPaymentJournal_id': self._serialize.url("customer_payment_journal_id", customer_payment_journal_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('CustomerPaymentJournal', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_customer_payment_journal_by_id.metadata = {'url': '/companies({company_id})/customerPaymentJournals({customerPaymentJournal_id})'}

    def delete_customer_payment_journal_by_id(
            self, company_id, customer_payment_journal_id, custom_headers=None, raw=False, **operation_config):
        """Delete an customerPaymentJournal in Dynamics 365 Business Central.

        :param company_id: id for company
        :type company_id: str
        :param customer_payment_journal_id: id for customerPaymentJournal
        :type customer_payment_journal_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.delete_customer_payment_journal_by_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'customerPaymentJournal_id': self._serialize.url("customer_payment_journal_id", customer_payment_journal_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.delete(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [204]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    delete_customer_payment_journal_by_id.metadata = {'url': '/companies({company_id})/customerPaymentJournals({customerPaymentJournal_id})'}

    def patch_customer_payment_journal_by_id(
            self, body, company_id, customer_payment_journal_id, custom_headers=None, raw=False, **operation_config):
        """Lets the user patch the specified customerPaymentJournal.

        :param body:
        :type body:
         ~azure.mgmt.devtestlabs.models.BodyModelModelModelModelModelModelModelModel
        :param company_id: id for company
        :type company_id: str
        :param customer_payment_journal_id: id for customerPaymentJournal
        :type customer_payment_journal_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: CustomerPaymentJournal or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.CustomerPaymentJournal or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.patch_customer_payment_journal_by_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'customerPaymentJournal_id': self._serialize.url("customer_payment_journal_id", customer_payment_journal_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        header_parameters['If-Match'] = self._serialize.header("self.config.if_match", self.config.if_match, 'str')
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct body
        body_content = self._serialize.body(body, 'BodyModelModelModelModelModelModelModelModel')

        # Construct and send request
        request = self._client.patch(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('CustomerPaymentJournal', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    patch_customer_payment_journal_by_id.metadata = {'url': '/companies({company_id})/customerPaymentJournals({customerPaymentJournal_id})'}

    def get_customer_payments_for_customer_payment_journal(
            self, company_id, customer_payment_journal_id, expand=None, select=None, custom_headers=None, raw=False, **operation_config):
        """Returns a list of customerPayments.

        :param company_id: id for company
        :type company_id: str
        :param customer_payment_journal_id: id for customerPaymentJournal
        :type customer_payment_journal_id: str
        :param expand: Entities to expand
        :type expand: list[str]
        :param select: Selected properties to be retrieved
        :type select: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: GetCustomerPaymentsForCustomerPaymentJournalOKResponse or
         ClientRawResponse if raw=true
        :rtype:
         ~azure.mgmt.devtestlabs.models.GetCustomerPaymentsForCustomerPaymentJournalOKResponse
         or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.get_customer_payments_for_customer_payment_journal.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'customerPaymentJournal_id': self._serialize.url("customer_payment_journal_id", customer_payment_journal_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if self.config.top is not None:
            query_parameters['$top'] = self._serialize.query("self.config.top", self.config.top, 'int')
        if self.config.skip is not None:
            query_parameters['$skip'] = self._serialize.query("self.config.skip", self.config.skip, 'int')
        if self.config.limit is not None:
            query_parameters['$limit'] = self._serialize.query("self.config.limit", self.config.limit, 'int')
        if self.config.filter is not None:
            query_parameters['$filter'] = self._serialize.query("self.config.filter", self.config.filter, 'str')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('GetCustomerPaymentsForCustomerPaymentJournalOKResponse', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_customer_payments_for_customer_payment_journal.metadata = {'url': '/companies({company_id})/customerPaymentJournals({customerPaymentJournal_id})/customerPayments'}

    def post_customer_payment_for_customer_payment_journal(
            self, body, company_id, customer_payment_journal_id, custom_headers=None, raw=False, **operation_config):
        """Creates a customerPayment in Dynamics 365 Business Central.

        :param body:
        :type body:
         ~azure.mgmt.devtestlabs.models.BodyModelModelModelModelModelModelModelModelModel
        :param company_id: id for company
        :type company_id: str
        :param customer_payment_journal_id: id for customerPaymentJournal
        :type customer_payment_journal_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: CustomerPayment or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.CustomerPayment or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.post_customer_payment_for_customer_payment_journal.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'customerPaymentJournal_id': self._serialize.url("customer_payment_journal_id", customer_payment_journal_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct body
        body_content = self._serialize.body(body, 'BodyModelModelModelModelModelModelModelModelModel')

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [201]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 201:
            deserialized = self._deserialize('CustomerPayment', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    post_customer_payment_for_customer_payment_journal.metadata = {'url': '/companies({company_id})/customerPaymentJournals({customerPaymentJournal_id})/customerPayments'}

    def get_customer_payment_for_customer_payment_journal_by_id(
            self, company_id, customer_payment_journal_id, customer_payment_id, expand=None, select=None, custom_headers=None, raw=False, **operation_config):
        """Retrieve the properties and relationships of an customerPayment object
        for Dynamics 365 Business Central.

        :param company_id: id for company
        :type company_id: str
        :param customer_payment_journal_id: id for customerPaymentJournal
        :type customer_payment_journal_id: str
        :param customer_payment_id: id for customerPayment
        :type customer_payment_id: str
        :param expand: Entities to expand
        :type expand: list[str]
        :param select: Selected properties to be retrieved
        :type select: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: CustomerPayment or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.CustomerPayment or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.get_customer_payment_for_customer_payment_journal_by_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'customerPaymentJournal_id': self._serialize.url("customer_payment_journal_id", customer_payment_journal_id, 'str'),
            'customerPayment_id': self._serialize.url("customer_payment_id", customer_payment_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('CustomerPayment', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_customer_payment_for_customer_payment_journal_by_id.metadata = {'url': '/companies({company_id})/customerPaymentJournals({customerPaymentJournal_id})/customerPayments({customerPayment_id})'}

    def delete_customer_payment_for_customer_payment_journal_by_id_by_id(
            self, company_id, customer_payment_journal_id, customer_payment_id, custom_headers=None, raw=False, **operation_config):
        """Delete an customerPayment in Dynamics 365 Business Central.

        :param company_id: id for company
        :type company_id: str
        :param customer_payment_journal_id: id for customerPaymentJournal
        :type customer_payment_journal_id: str
        :param customer_payment_id: id for customerPayment
        :type customer_payment_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.delete_customer_payment_for_customer_payment_journal_by_id_by_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'customerPaymentJournal_id': self._serialize.url("customer_payment_journal_id", customer_payment_journal_id, 'str'),
            'customerPayment_id': self._serialize.url("customer_payment_id", customer_payment_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.delete(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [204]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    delete_customer_payment_for_customer_payment_journal_by_id_by_id.metadata = {'url': '/companies({company_id})/customerPaymentJournals({customerPaymentJournal_id})/customerPayments({customerPayment_id})'}

    def patch_customer_payment_for_customer_payment_journal_by_id_by_id(
            self, body, company_id, customer_payment_journal_id, customer_payment_id, custom_headers=None, raw=False, **operation_config):
        """Lets the user patch the specified customerPayment.

        :param body:
        :type body:
         ~azure.mgmt.devtestlabs.models.BodyModelModelModelModelModelModelModelModelModel
        :param company_id: id for company
        :type company_id: str
        :param customer_payment_journal_id: id for customerPaymentJournal
        :type customer_payment_journal_id: str
        :param customer_payment_id: id for customerPayment
        :type customer_payment_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: CustomerPayment or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.CustomerPayment or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.patch_customer_payment_for_customer_payment_journal_by_id_by_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'customerPaymentJournal_id': self._serialize.url("customer_payment_journal_id", customer_payment_journal_id, 'str'),
            'customerPayment_id': self._serialize.url("customer_payment_id", customer_payment_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        header_parameters['If-Match'] = self._serialize.header("self.config.if_match", self.config.if_match, 'str')
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct body
        body_content = self._serialize.body(body, 'BodyModelModelModelModelModelModelModelModelModel')

        # Construct and send request
        request = self._client.patch(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('CustomerPayment', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    patch_customer_payment_for_customer_payment_journal_by_id_by_id.metadata = {'url': '/companies({company_id})/customerPaymentJournals({customerPaymentJournal_id})/customerPayments({customerPayment_id})'}

    def get_customer_payments(
            self, company_id, expand=None, select=None, custom_headers=None, raw=False, **operation_config):
        """Returns a list of customerPayments.

        :param company_id: id for company
        :type company_id: str
        :param expand: Entities to expand
        :type expand: list[str]
        :param select: Selected properties to be retrieved
        :type select: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: GetCustomerPaymentsOKResponse or ClientRawResponse if
         raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.GetCustomerPaymentsOKResponse
         or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.get_customer_payments.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if self.config.top is not None:
            query_parameters['$top'] = self._serialize.query("self.config.top", self.config.top, 'int')
        if self.config.skip is not None:
            query_parameters['$skip'] = self._serialize.query("self.config.skip", self.config.skip, 'int')
        if self.config.limit is not None:
            query_parameters['$limit'] = self._serialize.query("self.config.limit", self.config.limit, 'int')
        if self.config.filter is not None:
            query_parameters['$filter'] = self._serialize.query("self.config.filter", self.config.filter, 'str')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('GetCustomerPaymentsOKResponse', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_customer_payments.metadata = {'url': '/companies({company_id})/customerPayments'}

    def post_customer_payment(
            self, body, company_id, custom_headers=None, raw=False, **operation_config):
        """Creates a customerPayment in Dynamics 365 Business Central.

        :param body:
        :type body:
         ~azure.mgmt.devtestlabs.models.BodyModelModelModelModelModelModelModelModelModel
        :param company_id: id for company
        :type company_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: CustomerPayment or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.CustomerPayment or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.post_customer_payment.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct body
        body_content = self._serialize.body(body, 'BodyModelModelModelModelModelModelModelModelModel')

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [201]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 201:
            deserialized = self._deserialize('CustomerPayment', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    post_customer_payment.metadata = {'url': '/companies({company_id})/customerPayments'}

    def get_customer_payment_by_id(
            self, company_id, customer_payment_id, expand=None, select=None, custom_headers=None, raw=False, **operation_config):
        """Retrieve the properties and relationships of an customerPayment object
        for Dynamics 365 Business Central.

        :param company_id: id for company
        :type company_id: str
        :param customer_payment_id: id for customerPayment
        :type customer_payment_id: str
        :param expand: Entities to expand
        :type expand: list[str]
        :param select: Selected properties to be retrieved
        :type select: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: CustomerPayment or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.CustomerPayment or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.get_customer_payment_by_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'customerPayment_id': self._serialize.url("customer_payment_id", customer_payment_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('CustomerPayment', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_customer_payment_by_id.metadata = {'url': '/companies({company_id})/customerPayments({customerPayment_id})'}

    def delete_customer_payment_by_id(
            self, company_id, customer_payment_id, custom_headers=None, raw=False, **operation_config):
        """Delete an customerPayment in Dynamics 365 Business Central.

        :param company_id: id for company
        :type company_id: str
        :param customer_payment_id: id for customerPayment
        :type customer_payment_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.delete_customer_payment_by_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'customerPayment_id': self._serialize.url("customer_payment_id", customer_payment_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.delete(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [204]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    delete_customer_payment_by_id.metadata = {'url': '/companies({company_id})/customerPayments({customerPayment_id})'}

    def patch_customer_payment_by_id(
            self, body, company_id, customer_payment_id, custom_headers=None, raw=False, **operation_config):
        """Lets the user patch the specified customerPayment.

        :param body:
        :type body:
         ~azure.mgmt.devtestlabs.models.BodyModelModelModelModelModelModelModelModelModel
        :param company_id: id for company
        :type company_id: str
        :param customer_payment_id: id for customerPayment
        :type customer_payment_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: CustomerPayment or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.CustomerPayment or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.patch_customer_payment_by_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'customerPayment_id': self._serialize.url("customer_payment_id", customer_payment_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        header_parameters['If-Match'] = self._serialize.header("self.config.if_match", self.config.if_match, 'str')
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct body
        body_content = self._serialize.body(body, 'BodyModelModelModelModelModelModelModelModelModel')

        # Construct and send request
        request = self._client.patch(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('CustomerPayment', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    patch_customer_payment_by_id.metadata = {'url': '/companies({company_id})/customerPayments({customerPayment_id})'}

    def get_accounts(
            self, company_id, select=None, custom_headers=None, raw=False, **operation_config):
        """Returns a list of accounts.

        :param company_id: id for company
        :type company_id: str
        :param select: Selected properties to be retrieved
        :type select: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: GetAccountsOKResponse or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.GetAccountsOKResponse or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.get_accounts.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if self.config.top is not None:
            query_parameters['$top'] = self._serialize.query("self.config.top", self.config.top, 'int')
        if self.config.skip is not None:
            query_parameters['$skip'] = self._serialize.query("self.config.skip", self.config.skip, 'int')
        if self.config.limit is not None:
            query_parameters['$limit'] = self._serialize.query("self.config.limit", self.config.limit, 'int')
        if self.config.filter is not None:
            query_parameters['$filter'] = self._serialize.query("self.config.filter", self.config.filter, 'str')
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('GetAccountsOKResponse', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_accounts.metadata = {'url': '/companies({company_id})/accounts'}

    def get_account_by_id(
            self, company_id, account_id, select=None, custom_headers=None, raw=False, **operation_config):
        """Retrieve the properties and relationships of an account object for
        Dynamics 365 Business Central.

        :param company_id: id for company
        :type company_id: str
        :param account_id: id for account
        :type account_id: str
        :param select: Selected properties to be retrieved
        :type select: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: Account or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.Account or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.get_account_by_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'account_id': self._serialize.url("account_id", account_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('Account', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_account_by_id.metadata = {'url': '/companies({company_id})/accounts({account_id})'}

    def get_tax_groups(
            self, company_id, select=None, custom_headers=None, raw=False, **operation_config):
        """Returns a list of taxGroups.

        :param company_id: id for company
        :type company_id: str
        :param select: Selected properties to be retrieved
        :type select: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: GetTaxGroupsOKResponse or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.GetTaxGroupsOKResponse or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.get_tax_groups.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if self.config.top is not None:
            query_parameters['$top'] = self._serialize.query("self.config.top", self.config.top, 'int')
        if self.config.skip is not None:
            query_parameters['$skip'] = self._serialize.query("self.config.skip", self.config.skip, 'int')
        if self.config.limit is not None:
            query_parameters['$limit'] = self._serialize.query("self.config.limit", self.config.limit, 'int')
        if self.config.filter is not None:
            query_parameters['$filter'] = self._serialize.query("self.config.filter", self.config.filter, 'str')
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('GetTaxGroupsOKResponse', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_tax_groups.metadata = {'url': '/companies({company_id})/taxGroups'}

    def post_tax_group(
            self, body, company_id, custom_headers=None, raw=False, **operation_config):
        """Creates a taxGroup in Dynamics 365 Business Central.

        :param body:
        :type body:
         ~azure.mgmt.devtestlabs.models.BodyModelModelModelModelModelModelModelModelModelModel
        :param company_id: id for company
        :type company_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: TaxGroup or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.TaxGroup or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.post_tax_group.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct body
        body_content = self._serialize.body(body, 'BodyModelModelModelModelModelModelModelModelModelModel')

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [201]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 201:
            deserialized = self._deserialize('TaxGroup', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    post_tax_group.metadata = {'url': '/companies({company_id})/taxGroups'}

    def get_tax_group_by_id(
            self, company_id, tax_group_id, select=None, custom_headers=None, raw=False, **operation_config):
        """Retrieve the properties and relationships of an taxGroup object for
        Dynamics 365 Business Central.

        :param company_id: id for company
        :type company_id: str
        :param tax_group_id: id for taxGroup
        :type tax_group_id: str
        :param select: Selected properties to be retrieved
        :type select: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: TaxGroup or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.TaxGroup or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.get_tax_group_by_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'taxGroup_id': self._serialize.url("tax_group_id", tax_group_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('TaxGroup', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_tax_group_by_id.metadata = {'url': '/companies({company_id})/taxGroups({taxGroup_id})'}

    def delete_tax_group_by_id(
            self, company_id, tax_group_id, custom_headers=None, raw=False, **operation_config):
        """Delete an taxGroup in Dynamics 365 Business Central.

        :param company_id: id for company
        :type company_id: str
        :param tax_group_id: id for taxGroup
        :type tax_group_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.delete_tax_group_by_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'taxGroup_id': self._serialize.url("tax_group_id", tax_group_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.delete(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [204]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    delete_tax_group_by_id.metadata = {'url': '/companies({company_id})/taxGroups({taxGroup_id})'}

    def patch_tax_group_by_id(
            self, body, company_id, tax_group_id, custom_headers=None, raw=False, **operation_config):
        """Lets the user patch the specified taxGroup.

        :param body:
        :type body:
         ~azure.mgmt.devtestlabs.models.BodyModelModelModelModelModelModelModelModelModelModel
        :param company_id: id for company
        :type company_id: str
        :param tax_group_id: id for taxGroup
        :type tax_group_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: TaxGroup or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.TaxGroup or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.patch_tax_group_by_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'taxGroup_id': self._serialize.url("tax_group_id", tax_group_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        header_parameters['If-Match'] = self._serialize.header("self.config.if_match", self.config.if_match, 'str')
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct body
        body_content = self._serialize.body(body, 'BodyModelModelModelModelModelModelModelModelModelModel')

        # Construct and send request
        request = self._client.patch(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('TaxGroup', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    patch_tax_group_by_id.metadata = {'url': '/companies({company_id})/taxGroups({taxGroup_id})'}

    def get_journals(
            self, company_id, expand=None, select=None, custom_headers=None, raw=False, **operation_config):
        """Returns a list of journals.

        :param company_id: id for company
        :type company_id: str
        :param expand: Entities to expand
        :type expand: list[str]
        :param select: Selected properties to be retrieved
        :type select: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: GetJournalsOKResponse or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.GetJournalsOKResponse or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.get_journals.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if self.config.top is not None:
            query_parameters['$top'] = self._serialize.query("self.config.top", self.config.top, 'int')
        if self.config.skip is not None:
            query_parameters['$skip'] = self._serialize.query("self.config.skip", self.config.skip, 'int')
        if self.config.limit is not None:
            query_parameters['$limit'] = self._serialize.query("self.config.limit", self.config.limit, 'int')
        if self.config.filter is not None:
            query_parameters['$filter'] = self._serialize.query("self.config.filter", self.config.filter, 'str')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('GetJournalsOKResponse', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_journals.metadata = {'url': '/companies({company_id})/journals'}

    def post_journal(
            self, body, company_id, custom_headers=None, raw=False, **operation_config):
        """Creates a journal in Dynamics 365 Business Central.

        :param body:
        :type body:
         ~azure.mgmt.devtestlabs.models.BodyModelModelModelModelModelModelModelModelModelModelModel
        :param company_id: id for company
        :type company_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: Journal or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.Journal or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.post_journal.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct body
        body_content = self._serialize.body(body, 'BodyModelModelModelModelModelModelModelModelModelModelModel')

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [201]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 201:
            deserialized = self._deserialize('Journal', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    post_journal.metadata = {'url': '/companies({company_id})/journals'}

    def get_journal_by_id(
            self, company_id, journal_id, expand=None, select=None, custom_headers=None, raw=False, **operation_config):
        """Retrieve the properties and relationships of an journal object for
        Dynamics 365 Business Central.

        :param company_id: id for company
        :type company_id: str
        :param journal_id: id for journal
        :type journal_id: str
        :param expand: Entities to expand
        :type expand: list[str]
        :param select: Selected properties to be retrieved
        :type select: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: Journal or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.Journal or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.get_journal_by_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'journal_id': self._serialize.url("journal_id", journal_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('Journal', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_journal_by_id.metadata = {'url': '/companies({company_id})/journals({journal_id})'}

    def delete_journal_by_id(
            self, company_id, journal_id, custom_headers=None, raw=False, **operation_config):
        """Delete an journal in Dynamics 365 Business Central.

        :param company_id: id for company
        :type company_id: str
        :param journal_id: id for journal
        :type journal_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.delete_journal_by_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'journal_id': self._serialize.url("journal_id", journal_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.delete(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [204]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    delete_journal_by_id.metadata = {'url': '/companies({company_id})/journals({journal_id})'}

    def patch_journal_by_id(
            self, body, company_id, journal_id, custom_headers=None, raw=False, **operation_config):
        """Lets the user patch the specified journal.

        :param body:
        :type body:
         ~azure.mgmt.devtestlabs.models.BodyModelModelModelModelModelModelModelModelModelModelModel
        :param company_id: id for company
        :type company_id: str
        :param journal_id: id for journal
        :type journal_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: Journal or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.Journal or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.patch_journal_by_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'journal_id': self._serialize.url("journal_id", journal_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        header_parameters['If-Match'] = self._serialize.header("self.config.if_match", self.config.if_match, 'str')
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct body
        body_content = self._serialize.body(body, 'BodyModelModelModelModelModelModelModelModelModelModelModel')

        # Construct and send request
        request = self._client.patch(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('Journal', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    patch_journal_by_id.metadata = {'url': '/companies({company_id})/journals({journal_id})'}

    def post_action_journals(
            self, company_id, journal_id, custom_headers=None, raw=False, **operation_config):
        """Performs the post action for journals entity.

        :param company_id: id for company
        :type company_id: str
        :param journal_id: id for journal
        :type journal_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.post_action_journals.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'journal_id': self._serialize.url("journal_id", journal_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [204]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    post_action_journals.metadata = {'url': '/companies({company_id})/journals({journal_id})/Microsoft.NAV.post'}

    def get_journal_lines_for_journal(
            self, company_id, journal_id, expand=None, select=None, custom_headers=None, raw=False, **operation_config):
        """Returns a list of journalLines.

        :param company_id: id for company
        :type company_id: str
        :param journal_id: id for journal
        :type journal_id: str
        :param expand: Entities to expand
        :type expand: list[str]
        :param select: Selected properties to be retrieved
        :type select: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: GetJournalLinesForJournalOKResponse or ClientRawResponse if
         raw=true
        :rtype:
         ~azure.mgmt.devtestlabs.models.GetJournalLinesForJournalOKResponse or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.get_journal_lines_for_journal.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'journal_id': self._serialize.url("journal_id", journal_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if self.config.top is not None:
            query_parameters['$top'] = self._serialize.query("self.config.top", self.config.top, 'int')
        if self.config.skip is not None:
            query_parameters['$skip'] = self._serialize.query("self.config.skip", self.config.skip, 'int')
        if self.config.limit is not None:
            query_parameters['$limit'] = self._serialize.query("self.config.limit", self.config.limit, 'int')
        if self.config.filter is not None:
            query_parameters['$filter'] = self._serialize.query("self.config.filter", self.config.filter, 'str')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('GetJournalLinesForJournalOKResponse', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_journal_lines_for_journal.metadata = {'url': '/companies({company_id})/journals({journal_id})/journalLines'}

    def post_journal_line_for_journal(
            self, body, company_id, journal_id, custom_headers=None, raw=False, **operation_config):
        """Creates a journalLine in Dynamics 365 Business Central.

        :param body:
        :type body:
         ~azure.mgmt.devtestlabs.models.BodyModelModelModelModelModelModelModelModelModelModelModelModel
        :param company_id: id for company
        :type company_id: str
        :param journal_id: id for journal
        :type journal_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: JournalLine or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.JournalLine or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.post_journal_line_for_journal.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'journal_id': self._serialize.url("journal_id", journal_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct body
        body_content = self._serialize.body(body, 'BodyModelModelModelModelModelModelModelModelModelModelModelModel')

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [201]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 201:
            deserialized = self._deserialize('JournalLine', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    post_journal_line_for_journal.metadata = {'url': '/companies({company_id})/journals({journal_id})/journalLines'}

    def get_journal_line_for_journal_by_id(
            self, company_id, journal_id, journal_line_id, expand=None, select=None, custom_headers=None, raw=False, **operation_config):
        """Retrieve the properties and relationships of an journalLine object for
        Dynamics 365 Business Central.

        :param company_id: id for company
        :type company_id: str
        :param journal_id: id for journal
        :type journal_id: str
        :param journal_line_id: id for journalLine
        :type journal_line_id: str
        :param expand: Entities to expand
        :type expand: list[str]
        :param select: Selected properties to be retrieved
        :type select: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: JournalLine or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.JournalLine or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.get_journal_line_for_journal_by_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'journal_id': self._serialize.url("journal_id", journal_id, 'str'),
            'journalLine_id': self._serialize.url("journal_line_id", journal_line_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('JournalLine', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_journal_line_for_journal_by_id.metadata = {'url': '/companies({company_id})/journals({journal_id})/journalLines({journalLine_id})'}

    def delete_journal_line_for_journal_by_id_by_id(
            self, company_id, journal_id, journal_line_id, custom_headers=None, raw=False, **operation_config):
        """Delete an journalLine in Dynamics 365 Business Central.

        :param company_id: id for company
        :type company_id: str
        :param journal_id: id for journal
        :type journal_id: str
        :param journal_line_id: id for journalLine
        :type journal_line_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.delete_journal_line_for_journal_by_id_by_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'journal_id': self._serialize.url("journal_id", journal_id, 'str'),
            'journalLine_id': self._serialize.url("journal_line_id", journal_line_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.delete(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [204]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    delete_journal_line_for_journal_by_id_by_id.metadata = {'url': '/companies({company_id})/journals({journal_id})/journalLines({journalLine_id})'}

    def patch_journal_line_for_journal_by_id_by_id(
            self, body, company_id, journal_id, journal_line_id, custom_headers=None, raw=False, **operation_config):
        """Lets the user patch the specified journalLine.

        :param body:
        :type body:
         ~azure.mgmt.devtestlabs.models.BodyModelModelModelModelModelModelModelModelModelModelModelModel
        :param company_id: id for company
        :type company_id: str
        :param journal_id: id for journal
        :type journal_id: str
        :param journal_line_id: id for journalLine
        :type journal_line_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: JournalLine or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.JournalLine or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.patch_journal_line_for_journal_by_id_by_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'journal_id': self._serialize.url("journal_id", journal_id, 'str'),
            'journalLine_id': self._serialize.url("journal_line_id", journal_line_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        header_parameters['If-Match'] = self._serialize.header("self.config.if_match", self.config.if_match, 'str')
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct body
        body_content = self._serialize.body(body, 'BodyModelModelModelModelModelModelModelModelModelModelModelModel')

        # Construct and send request
        request = self._client.patch(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('JournalLine', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    patch_journal_line_for_journal_by_id_by_id.metadata = {'url': '/companies({company_id})/journals({journal_id})/journalLines({journalLine_id})'}

    def get_attachments_for_journal_line_for_journal(
            self, company_id, journal_id, journal_line_id, select=None, custom_headers=None, raw=False, **operation_config):
        """Returns a list of attachments.

        :param company_id: id for company
        :type company_id: str
        :param journal_id: id for journal
        :type journal_id: str
        :param journal_line_id: id for journalLine
        :type journal_line_id: str
        :param select: Selected properties to be retrieved
        :type select: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: GetAttachmentsForJournalLineForJournalOKResponse or
         ClientRawResponse if raw=true
        :rtype:
         ~azure.mgmt.devtestlabs.models.GetAttachmentsForJournalLineForJournalOKResponse
         or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.get_attachments_for_journal_line_for_journal.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'journal_id': self._serialize.url("journal_id", journal_id, 'str'),
            'journalLine_id': self._serialize.url("journal_line_id", journal_line_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if self.config.top is not None:
            query_parameters['$top'] = self._serialize.query("self.config.top", self.config.top, 'int')
        if self.config.skip is not None:
            query_parameters['$skip'] = self._serialize.query("self.config.skip", self.config.skip, 'int')
        if self.config.limit is not None:
            query_parameters['$limit'] = self._serialize.query("self.config.limit", self.config.limit, 'int')
        if self.config.filter is not None:
            query_parameters['$filter'] = self._serialize.query("self.config.filter", self.config.filter, 'str')
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('GetAttachmentsForJournalLineForJournalOKResponse', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_attachments_for_journal_line_for_journal.metadata = {'url': '/companies({company_id})/journals({journal_id})/journalLines({journalLine_id})/attachments'}

    def post_attachments_for_journal_line_for_journal(
            self, body, company_id, journal_id, journal_line_id, custom_headers=None, raw=False, **operation_config):
        """Creates a attachments in Dynamics 365 Business Central.

        :param body:
        :type body:
         ~azure.mgmt.devtestlabs.models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModel
        :param company_id: id for company
        :type company_id: str
        :param journal_id: id for journal
        :type journal_id: str
        :param journal_line_id: id for journalLine
        :type journal_line_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: Attachments or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.Attachments or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.post_attachments_for_journal_line_for_journal.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'journal_id': self._serialize.url("journal_id", journal_id, 'str'),
            'journalLine_id': self._serialize.url("journal_line_id", journal_line_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct body
        body_content = self._serialize.body(body, 'BodyModelModelModelModelModelModelModelModelModelModelModelModelModel')

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [201]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 201:
            deserialized = self._deserialize('Attachments', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    post_attachments_for_journal_line_for_journal.metadata = {'url': '/companies({company_id})/journals({journal_id})/journalLines({journalLine_id})/attachments'}

    def get_attachments_for_journal_line_for_journal_by_id_by_parent_id(
            self, company_id, journal_id, journal_line_id, attachments_parent_id, attachments_id, select=None, custom_headers=None, raw=False, **operation_config):
        """Retrieve the properties and relationships of an attachments object for
        Dynamics 365 Business Central.

        :param company_id: id for company
        :type company_id: str
        :param journal_id: id for journal
        :type journal_id: str
        :param journal_line_id: id for journalLine
        :type journal_line_id: str
        :param attachments_parent_id: parentId for attachments
        :type attachments_parent_id: str
        :param attachments_id: id for attachments
        :type attachments_id: str
        :param select: Selected properties to be retrieved
        :type select: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: Attachments or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.Attachments or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.get_attachments_for_journal_line_for_journal_by_id_by_parent_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'journal_id': self._serialize.url("journal_id", journal_id, 'str'),
            'journalLine_id': self._serialize.url("journal_line_id", journal_line_id, 'str'),
            'attachments_parentId': self._serialize.url("attachments_parent_id", attachments_parent_id, 'str'),
            'attachments_id': self._serialize.url("attachments_id", attachments_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('Attachments', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_attachments_for_journal_line_for_journal_by_id_by_parent_id.metadata = {'url': '/companies({company_id})/journals({journal_id})/journalLines({journalLine_id})/attachments({attachments_parentId},{attachments_id})'}

    def delete_attachments_for_journal_line_for_journal_by_id_by_parent_id_by_id_by_id(
            self, company_id, journal_id, journal_line_id, attachments_parent_id, attachments_id, custom_headers=None, raw=False, **operation_config):
        """Delete an attachments in Dynamics 365 Business Central.

        :param company_id: id for company
        :type company_id: str
        :param journal_id: id for journal
        :type journal_id: str
        :param journal_line_id: id for journalLine
        :type journal_line_id: str
        :param attachments_parent_id: parentId for attachments
        :type attachments_parent_id: str
        :param attachments_id: id for attachments
        :type attachments_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.delete_attachments_for_journal_line_for_journal_by_id_by_parent_id_by_id_by_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'journal_id': self._serialize.url("journal_id", journal_id, 'str'),
            'journalLine_id': self._serialize.url("journal_line_id", journal_line_id, 'str'),
            'attachments_parentId': self._serialize.url("attachments_parent_id", attachments_parent_id, 'str'),
            'attachments_id': self._serialize.url("attachments_id", attachments_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.delete(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [204]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    delete_attachments_for_journal_line_for_journal_by_id_by_parent_id_by_id_by_id.metadata = {'url': '/companies({company_id})/journals({journal_id})/journalLines({journalLine_id})/attachments({attachments_parentId},{attachments_id})'}

    def patch_attachments_for_journal_line_for_journal_by_id_by_parent_id_by_id_by_id(
            self, body, company_id, journal_id, journal_line_id, attachments_parent_id, attachments_id, custom_headers=None, raw=False, **operation_config):
        """Lets the user patch the specified attachments.

        :param body:
        :type body:
         ~azure.mgmt.devtestlabs.models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModel
        :param company_id: id for company
        :type company_id: str
        :param journal_id: id for journal
        :type journal_id: str
        :param journal_line_id: id for journalLine
        :type journal_line_id: str
        :param attachments_parent_id: parentId for attachments
        :type attachments_parent_id: str
        :param attachments_id: id for attachments
        :type attachments_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: Attachments or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.Attachments or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.patch_attachments_for_journal_line_for_journal_by_id_by_parent_id_by_id_by_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'journal_id': self._serialize.url("journal_id", journal_id, 'str'),
            'journalLine_id': self._serialize.url("journal_line_id", journal_line_id, 'str'),
            'attachments_parentId': self._serialize.url("attachments_parent_id", attachments_parent_id, 'str'),
            'attachments_id': self._serialize.url("attachments_id", attachments_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        header_parameters['If-Match'] = self._serialize.header("self.config.if_match", self.config.if_match, 'str')
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct body
        body_content = self._serialize.body(body, 'BodyModelModelModelModelModelModelModelModelModelModelModelModelModel')

        # Construct and send request
        request = self._client.patch(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('Attachments', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    patch_attachments_for_journal_line_for_journal_by_id_by_parent_id_by_id_by_id.metadata = {'url': '/companies({company_id})/journals({journal_id})/journalLines({journalLine_id})/attachments({attachments_parentId},{attachments_id})'}

    def get_journal_lines(
            self, company_id, expand=None, select=None, custom_headers=None, raw=False, **operation_config):
        """Returns a list of journalLines.

        :param company_id: id for company
        :type company_id: str
        :param expand: Entities to expand
        :type expand: list[str]
        :param select: Selected properties to be retrieved
        :type select: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: GetJournalLinesOKResponse or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.GetJournalLinesOKResponse or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.get_journal_lines.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if self.config.top is not None:
            query_parameters['$top'] = self._serialize.query("self.config.top", self.config.top, 'int')
        if self.config.skip is not None:
            query_parameters['$skip'] = self._serialize.query("self.config.skip", self.config.skip, 'int')
        if self.config.limit is not None:
            query_parameters['$limit'] = self._serialize.query("self.config.limit", self.config.limit, 'int')
        if self.config.filter is not None:
            query_parameters['$filter'] = self._serialize.query("self.config.filter", self.config.filter, 'str')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('GetJournalLinesOKResponse', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_journal_lines.metadata = {'url': '/companies({company_id})/journalLines'}

    def post_journal_line(
            self, body, company_id, custom_headers=None, raw=False, **operation_config):
        """Creates a journalLine in Dynamics 365 Business Central.

        :param body:
        :type body:
         ~azure.mgmt.devtestlabs.models.BodyModelModelModelModelModelModelModelModelModelModelModelModel
        :param company_id: id for company
        :type company_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: JournalLine or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.JournalLine or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.post_journal_line.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct body
        body_content = self._serialize.body(body, 'BodyModelModelModelModelModelModelModelModelModelModelModelModel')

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [201]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 201:
            deserialized = self._deserialize('JournalLine', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    post_journal_line.metadata = {'url': '/companies({company_id})/journalLines'}

    def get_journal_line_by_id(
            self, company_id, journal_line_id, expand=None, select=None, custom_headers=None, raw=False, **operation_config):
        """Retrieve the properties and relationships of an journalLine object for
        Dynamics 365 Business Central.

        :param company_id: id for company
        :type company_id: str
        :param journal_line_id: id for journalLine
        :type journal_line_id: str
        :param expand: Entities to expand
        :type expand: list[str]
        :param select: Selected properties to be retrieved
        :type select: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: JournalLine or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.JournalLine or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.get_journal_line_by_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'journalLine_id': self._serialize.url("journal_line_id", journal_line_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('JournalLine', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_journal_line_by_id.metadata = {'url': '/companies({company_id})/journalLines({journalLine_id})'}

    def delete_journal_line_by_id(
            self, company_id, journal_line_id, custom_headers=None, raw=False, **operation_config):
        """Delete an journalLine in Dynamics 365 Business Central.

        :param company_id: id for company
        :type company_id: str
        :param journal_line_id: id for journalLine
        :type journal_line_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.delete_journal_line_by_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'journalLine_id': self._serialize.url("journal_line_id", journal_line_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.delete(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [204]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    delete_journal_line_by_id.metadata = {'url': '/companies({company_id})/journalLines({journalLine_id})'}

    def patch_journal_line_by_id(
            self, body, company_id, journal_line_id, custom_headers=None, raw=False, **operation_config):
        """Lets the user patch the specified journalLine.

        :param body:
        :type body:
         ~azure.mgmt.devtestlabs.models.BodyModelModelModelModelModelModelModelModelModelModelModelModel
        :param company_id: id for company
        :type company_id: str
        :param journal_line_id: id for journalLine
        :type journal_line_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: JournalLine or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.JournalLine or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.patch_journal_line_by_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'journalLine_id': self._serialize.url("journal_line_id", journal_line_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        header_parameters['If-Match'] = self._serialize.header("self.config.if_match", self.config.if_match, 'str')
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct body
        body_content = self._serialize.body(body, 'BodyModelModelModelModelModelModelModelModelModelModelModelModel')

        # Construct and send request
        request = self._client.patch(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('JournalLine', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    patch_journal_line_by_id.metadata = {'url': '/companies({company_id})/journalLines({journalLine_id})'}

    def get_attachments_for_journal_line(
            self, company_id, journal_line_id, select=None, custom_headers=None, raw=False, **operation_config):
        """Returns a list of attachments.

        :param company_id: id for company
        :type company_id: str
        :param journal_line_id: id for journalLine
        :type journal_line_id: str
        :param select: Selected properties to be retrieved
        :type select: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: GetAttachmentsForJournalLineOKResponse or ClientRawResponse
         if raw=true
        :rtype:
         ~azure.mgmt.devtestlabs.models.GetAttachmentsForJournalLineOKResponse
         or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.get_attachments_for_journal_line.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'journalLine_id': self._serialize.url("journal_line_id", journal_line_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if self.config.top is not None:
            query_parameters['$top'] = self._serialize.query("self.config.top", self.config.top, 'int')
        if self.config.skip is not None:
            query_parameters['$skip'] = self._serialize.query("self.config.skip", self.config.skip, 'int')
        if self.config.limit is not None:
            query_parameters['$limit'] = self._serialize.query("self.config.limit", self.config.limit, 'int')
        if self.config.filter is not None:
            query_parameters['$filter'] = self._serialize.query("self.config.filter", self.config.filter, 'str')
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('GetAttachmentsForJournalLineOKResponse', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_attachments_for_journal_line.metadata = {'url': '/companies({company_id})/journalLines({journalLine_id})/attachments'}

    def post_attachments_for_journal_line(
            self, body, company_id, journal_line_id, custom_headers=None, raw=False, **operation_config):
        """Creates a attachments in Dynamics 365 Business Central.

        :param body:
        :type body:
         ~azure.mgmt.devtestlabs.models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModel
        :param company_id: id for company
        :type company_id: str
        :param journal_line_id: id for journalLine
        :type journal_line_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: Attachments or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.Attachments or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.post_attachments_for_journal_line.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'journalLine_id': self._serialize.url("journal_line_id", journal_line_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct body
        body_content = self._serialize.body(body, 'BodyModelModelModelModelModelModelModelModelModelModelModelModelModel')

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [201]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 201:
            deserialized = self._deserialize('Attachments', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    post_attachments_for_journal_line.metadata = {'url': '/companies({company_id})/journalLines({journalLine_id})/attachments'}

    def get_attachments_for_journal_line_by_id_by_parent_id(
            self, company_id, journal_line_id, attachments_parent_id, attachments_id, select=None, custom_headers=None, raw=False, **operation_config):
        """Retrieve the properties and relationships of an attachments object for
        Dynamics 365 Business Central.

        :param company_id: id for company
        :type company_id: str
        :param journal_line_id: id for journalLine
        :type journal_line_id: str
        :param attachments_parent_id: parentId for attachments
        :type attachments_parent_id: str
        :param attachments_id: id for attachments
        :type attachments_id: str
        :param select: Selected properties to be retrieved
        :type select: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: Attachments or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.Attachments or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.get_attachments_for_journal_line_by_id_by_parent_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'journalLine_id': self._serialize.url("journal_line_id", journal_line_id, 'str'),
            'attachments_parentId': self._serialize.url("attachments_parent_id", attachments_parent_id, 'str'),
            'attachments_id': self._serialize.url("attachments_id", attachments_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('Attachments', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_attachments_for_journal_line_by_id_by_parent_id.metadata = {'url': '/companies({company_id})/journalLines({journalLine_id})/attachments({attachments_parentId},{attachments_id})'}

    def delete_attachments_for_journal_line_by_id_by_parent_id_by_id(
            self, company_id, journal_line_id, attachments_parent_id, attachments_id, custom_headers=None, raw=False, **operation_config):
        """Delete an attachments in Dynamics 365 Business Central.

        :param company_id: id for company
        :type company_id: str
        :param journal_line_id: id for journalLine
        :type journal_line_id: str
        :param attachments_parent_id: parentId for attachments
        :type attachments_parent_id: str
        :param attachments_id: id for attachments
        :type attachments_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.delete_attachments_for_journal_line_by_id_by_parent_id_by_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'journalLine_id': self._serialize.url("journal_line_id", journal_line_id, 'str'),
            'attachments_parentId': self._serialize.url("attachments_parent_id", attachments_parent_id, 'str'),
            'attachments_id': self._serialize.url("attachments_id", attachments_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.delete(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [204]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    delete_attachments_for_journal_line_by_id_by_parent_id_by_id.metadata = {'url': '/companies({company_id})/journalLines({journalLine_id})/attachments({attachments_parentId},{attachments_id})'}

    def patch_attachments_for_journal_line_by_id_by_parent_id_by_id(
            self, body, company_id, journal_line_id, attachments_parent_id, attachments_id, custom_headers=None, raw=False, **operation_config):
        """Lets the user patch the specified attachments.

        :param body:
        :type body:
         ~azure.mgmt.devtestlabs.models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModel
        :param company_id: id for company
        :type company_id: str
        :param journal_line_id: id for journalLine
        :type journal_line_id: str
        :param attachments_parent_id: parentId for attachments
        :type attachments_parent_id: str
        :param attachments_id: id for attachments
        :type attachments_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: Attachments or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.Attachments or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.patch_attachments_for_journal_line_by_id_by_parent_id_by_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'journalLine_id': self._serialize.url("journal_line_id", journal_line_id, 'str'),
            'attachments_parentId': self._serialize.url("attachments_parent_id", attachments_parent_id, 'str'),
            'attachments_id': self._serialize.url("attachments_id", attachments_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        header_parameters['If-Match'] = self._serialize.header("self.config.if_match", self.config.if_match, 'str')
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct body
        body_content = self._serialize.body(body, 'BodyModelModelModelModelModelModelModelModelModelModelModelModelModel')

        # Construct and send request
        request = self._client.patch(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('Attachments', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    patch_attachments_for_journal_line_by_id_by_parent_id_by_id.metadata = {'url': '/companies({company_id})/journalLines({journalLine_id})/attachments({attachments_parentId},{attachments_id})'}

    def get_attachments(
            self, company_id, select=None, custom_headers=None, raw=False, **operation_config):
        """Returns a list of attachments.

        :param company_id: id for company
        :type company_id: str
        :param select: Selected properties to be retrieved
        :type select: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: GetAttachmentsOKResponse or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.GetAttachmentsOKResponse or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.get_attachments.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if self.config.top is not None:
            query_parameters['$top'] = self._serialize.query("self.config.top", self.config.top, 'int')
        if self.config.skip is not None:
            query_parameters['$skip'] = self._serialize.query("self.config.skip", self.config.skip, 'int')
        if self.config.limit is not None:
            query_parameters['$limit'] = self._serialize.query("self.config.limit", self.config.limit, 'int')
        if self.config.filter is not None:
            query_parameters['$filter'] = self._serialize.query("self.config.filter", self.config.filter, 'str')
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('GetAttachmentsOKResponse', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_attachments.metadata = {'url': '/companies({company_id})/attachments'}

    def post_attachments(
            self, body, company_id, custom_headers=None, raw=False, **operation_config):
        """Creates a attachments in Dynamics 365 Business Central.

        :param body:
        :type body:
         ~azure.mgmt.devtestlabs.models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModel
        :param company_id: id for company
        :type company_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: Attachments or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.Attachments or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.post_attachments.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct body
        body_content = self._serialize.body(body, 'BodyModelModelModelModelModelModelModelModelModelModelModelModelModel')

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [201]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 201:
            deserialized = self._deserialize('Attachments', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    post_attachments.metadata = {'url': '/companies({company_id})/attachments'}

    def get_attachments_by_id_by_parent_id(
            self, company_id, attachments_parent_id, attachments_id, select=None, custom_headers=None, raw=False, **operation_config):
        """Retrieve the properties and relationships of an attachments object for
        Dynamics 365 Business Central.

        :param company_id: id for company
        :type company_id: str
        :param attachments_parent_id: parentId for attachments
        :type attachments_parent_id: str
        :param attachments_id: id for attachments
        :type attachments_id: str
        :param select: Selected properties to be retrieved
        :type select: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: Attachments or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.Attachments or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.get_attachments_by_id_by_parent_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'attachments_parentId': self._serialize.url("attachments_parent_id", attachments_parent_id, 'str'),
            'attachments_id': self._serialize.url("attachments_id", attachments_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('Attachments', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_attachments_by_id_by_parent_id.metadata = {'url': '/companies({company_id})/attachments({attachments_parentId},{attachments_id})'}

    def delete_attachments_by_id_by_parent_id(
            self, company_id, attachments_parent_id, attachments_id, custom_headers=None, raw=False, **operation_config):
        """Delete an attachments in Dynamics 365 Business Central.

        :param company_id: id for company
        :type company_id: str
        :param attachments_parent_id: parentId for attachments
        :type attachments_parent_id: str
        :param attachments_id: id for attachments
        :type attachments_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.delete_attachments_by_id_by_parent_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'attachments_parentId': self._serialize.url("attachments_parent_id", attachments_parent_id, 'str'),
            'attachments_id': self._serialize.url("attachments_id", attachments_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.delete(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [204]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    delete_attachments_by_id_by_parent_id.metadata = {'url': '/companies({company_id})/attachments({attachments_parentId},{attachments_id})'}

    def patch_attachments_by_id_by_parent_id(
            self, body, company_id, attachments_parent_id, attachments_id, custom_headers=None, raw=False, **operation_config):
        """Lets the user patch the specified attachments.

        :param body:
        :type body:
         ~azure.mgmt.devtestlabs.models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModel
        :param company_id: id for company
        :type company_id: str
        :param attachments_parent_id: parentId for attachments
        :type attachments_parent_id: str
        :param attachments_id: id for attachments
        :type attachments_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: Attachments or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.Attachments or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.patch_attachments_by_id_by_parent_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'attachments_parentId': self._serialize.url("attachments_parent_id", attachments_parent_id, 'str'),
            'attachments_id': self._serialize.url("attachments_id", attachments_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        header_parameters['If-Match'] = self._serialize.header("self.config.if_match", self.config.if_match, 'str')
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct body
        body_content = self._serialize.body(body, 'BodyModelModelModelModelModelModelModelModelModelModelModelModelModel')

        # Construct and send request
        request = self._client.patch(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('Attachments', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    patch_attachments_by_id_by_parent_id.metadata = {'url': '/companies({company_id})/attachments({attachments_parentId},{attachments_id})'}

    def get_employees(
            self, company_id, expand=None, select=None, custom_headers=None, raw=False, **operation_config):
        """Returns a list of employees.

        :param company_id: id for company
        :type company_id: str
        :param expand: Entities to expand
        :type expand: list[str]
        :param select: Selected properties to be retrieved
        :type select: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: GetEmployeesOKResponse or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.GetEmployeesOKResponse or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.get_employees.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if self.config.top is not None:
            query_parameters['$top'] = self._serialize.query("self.config.top", self.config.top, 'int')
        if self.config.skip is not None:
            query_parameters['$skip'] = self._serialize.query("self.config.skip", self.config.skip, 'int')
        if self.config.limit is not None:
            query_parameters['$limit'] = self._serialize.query("self.config.limit", self.config.limit, 'int')
        if self.config.filter is not None:
            query_parameters['$filter'] = self._serialize.query("self.config.filter", self.config.filter, 'str')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('GetEmployeesOKResponse', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_employees.metadata = {'url': '/companies({company_id})/employees'}

    def post_employee(
            self, body, company_id, custom_headers=None, raw=False, **operation_config):
        """Creates a employee in Dynamics 365 Business Central.

        :param body:
        :type body:
         ~azure.mgmt.devtestlabs.models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModel
        :param company_id: id for company
        :type company_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: Employee or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.Employee or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.post_employee.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct body
        body_content = self._serialize.body(body, 'BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModel')

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [201]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 201:
            deserialized = self._deserialize('Employee', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    post_employee.metadata = {'url': '/companies({company_id})/employees'}

    def get_employee_by_id(
            self, company_id, employee_id, expand=None, select=None, custom_headers=None, raw=False, **operation_config):
        """Retrieve the properties and relationships of an employee object for
        Dynamics 365 Business Central.

        :param company_id: id for company
        :type company_id: str
        :param employee_id: id for employee
        :type employee_id: str
        :param expand: Entities to expand
        :type expand: list[str]
        :param select: Selected properties to be retrieved
        :type select: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: Employee or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.Employee or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.get_employee_by_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'employee_id': self._serialize.url("employee_id", employee_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('Employee', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_employee_by_id.metadata = {'url': '/companies({company_id})/employees({employee_id})'}

    def delete_employee_by_id(
            self, company_id, employee_id, custom_headers=None, raw=False, **operation_config):
        """Delete an employee in Dynamics 365 Business Central.

        :param company_id: id for company
        :type company_id: str
        :param employee_id: id for employee
        :type employee_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.delete_employee_by_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'employee_id': self._serialize.url("employee_id", employee_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.delete(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [204]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    delete_employee_by_id.metadata = {'url': '/companies({company_id})/employees({employee_id})'}

    def patch_employee_by_id(
            self, body, company_id, employee_id, custom_headers=None, raw=False, **operation_config):
        """Lets the user patch the specified employee.

        :param body:
        :type body:
         ~azure.mgmt.devtestlabs.models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModel
        :param company_id: id for company
        :type company_id: str
        :param employee_id: id for employee
        :type employee_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: Employee or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.Employee or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.patch_employee_by_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'employee_id': self._serialize.url("employee_id", employee_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        header_parameters['If-Match'] = self._serialize.header("self.config.if_match", self.config.if_match, 'str')
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct body
        body_content = self._serialize.body(body, 'BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModel')

        # Construct and send request
        request = self._client.patch(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('Employee', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    patch_employee_by_id.metadata = {'url': '/companies({company_id})/employees({employee_id})'}

    def get_picture_for_employee(
            self, company_id, employee_id, select=None, custom_headers=None, raw=False, **operation_config):
        """Returns a list of picture.

        :param company_id: id for company
        :type company_id: str
        :param employee_id: id for employee
        :type employee_id: str
        :param select: Selected properties to be retrieved
        :type select: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: GetPictureForEmployeeOKResponse or ClientRawResponse if
         raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.GetPictureForEmployeeOKResponse
         or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.get_picture_for_employee.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'employee_id': self._serialize.url("employee_id", employee_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if self.config.top is not None:
            query_parameters['$top'] = self._serialize.query("self.config.top", self.config.top, 'int')
        if self.config.skip is not None:
            query_parameters['$skip'] = self._serialize.query("self.config.skip", self.config.skip, 'int')
        if self.config.limit is not None:
            query_parameters['$limit'] = self._serialize.query("self.config.limit", self.config.limit, 'int')
        if self.config.filter is not None:
            query_parameters['$filter'] = self._serialize.query("self.config.filter", self.config.filter, 'str')
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('GetPictureForEmployeeOKResponse', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_picture_for_employee.metadata = {'url': '/companies({company_id})/employees({employee_id})/picture'}

    def get_picture_for_employee_by_id(
            self, company_id, employee_id, picture_id, select=None, custom_headers=None, raw=False, **operation_config):
        """Retrieve the properties and relationships of an picture object for
        Dynamics 365 Business Central.

        :param company_id: id for company
        :type company_id: str
        :param employee_id: id for employee
        :type employee_id: str
        :param picture_id: id for picture
        :type picture_id: str
        :param select: Selected properties to be retrieved
        :type select: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: Picture or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.Picture or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.get_picture_for_employee_by_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'employee_id': self._serialize.url("employee_id", employee_id, 'str'),
            'picture_id': self._serialize.url("picture_id", picture_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('Picture', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_picture_for_employee_by_id.metadata = {'url': '/companies({company_id})/employees({employee_id})/picture({picture_id})'}

    def delete_picture_for_employee_by_id_by_id(
            self, company_id, employee_id, picture_id, custom_headers=None, raw=False, **operation_config):
        """Delete an picture in Dynamics 365 Business Central.

        :param company_id: id for company
        :type company_id: str
        :param employee_id: id for employee
        :type employee_id: str
        :param picture_id: id for picture
        :type picture_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.delete_picture_for_employee_by_id_by_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'employee_id': self._serialize.url("employee_id", employee_id, 'str'),
            'picture_id': self._serialize.url("picture_id", picture_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.delete(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [204]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    delete_picture_for_employee_by_id_by_id.metadata = {'url': '/companies({company_id})/employees({employee_id})/picture({picture_id})'}

    def patch_picture_for_employee_by_id_by_id(
            self, body, company_id, employee_id, picture_id, custom_headers=None, raw=False, **operation_config):
        """Lets the user patch the specified picture.

        :param body:
        :type body: ~azure.mgmt.devtestlabs.models.BodyModel
        :param company_id: id for company
        :type company_id: str
        :param employee_id: id for employee
        :type employee_id: str
        :param picture_id: id for picture
        :type picture_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: Picture or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.Picture or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.patch_picture_for_employee_by_id_by_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'employee_id': self._serialize.url("employee_id", employee_id, 'str'),
            'picture_id': self._serialize.url("picture_id", picture_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        header_parameters['If-Match'] = self._serialize.header("self.config.if_match", self.config.if_match, 'str')
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct body
        body_content = self._serialize.body(body, 'BodyModel')

        # Construct and send request
        request = self._client.patch(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('Picture', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    patch_picture_for_employee_by_id_by_id.metadata = {'url': '/companies({company_id})/employees({employee_id})/picture({picture_id})'}

    def get_default_dimensions_for_employee(
            self, company_id, employee_id, expand=None, select=None, custom_headers=None, raw=False, **operation_config):
        """Returns a list of defaultDimensions.

        :param company_id: id for company
        :type company_id: str
        :param employee_id: id for employee
        :type employee_id: str
        :param expand: Entities to expand
        :type expand: list[str]
        :param select: Selected properties to be retrieved
        :type select: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: GetDefaultDimensionsForEmployeeOKResponse or
         ClientRawResponse if raw=true
        :rtype:
         ~azure.mgmt.devtestlabs.models.GetDefaultDimensionsForEmployeeOKResponse
         or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.get_default_dimensions_for_employee.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'employee_id': self._serialize.url("employee_id", employee_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if self.config.top is not None:
            query_parameters['$top'] = self._serialize.query("self.config.top", self.config.top, 'int')
        if self.config.skip is not None:
            query_parameters['$skip'] = self._serialize.query("self.config.skip", self.config.skip, 'int')
        if self.config.limit is not None:
            query_parameters['$limit'] = self._serialize.query("self.config.limit", self.config.limit, 'int')
        if self.config.filter is not None:
            query_parameters['$filter'] = self._serialize.query("self.config.filter", self.config.filter, 'str')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('GetDefaultDimensionsForEmployeeOKResponse', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_default_dimensions_for_employee.metadata = {'url': '/companies({company_id})/employees({employee_id})/defaultDimensions'}

    def post_default_dimensions_for_employee(
            self, body, company_id, employee_id, custom_headers=None, raw=False, **operation_config):
        """Creates a defaultDimensions in Dynamics 365 Business Central.

        :param body:
        :type body: ~azure.mgmt.devtestlabs.models.BodyModelModel
        :param company_id: id for company
        :type company_id: str
        :param employee_id: id for employee
        :type employee_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: DefaultDimensions or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.DefaultDimensions or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.post_default_dimensions_for_employee.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'employee_id': self._serialize.url("employee_id", employee_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct body
        body_content = self._serialize.body(body, 'BodyModelModel')

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [201]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 201:
            deserialized = self._deserialize('DefaultDimensions', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    post_default_dimensions_for_employee.metadata = {'url': '/companies({company_id})/employees({employee_id})/defaultDimensions'}

    def get_default_dimensions_for_employee_by_dimension_id_by_parent_id(
            self, company_id, employee_id, default_dimensions_parent_id, default_dimensions_dimension_id, expand=None, select=None, custom_headers=None, raw=False, **operation_config):
        """Retrieve the properties and relationships of an defaultDimensions
        object for Dynamics 365 Business Central.

        :param company_id: id for company
        :type company_id: str
        :param employee_id: id for employee
        :type employee_id: str
        :param default_dimensions_parent_id: parentId for defaultDimensions
        :type default_dimensions_parent_id: str
        :param default_dimensions_dimension_id: dimensionId for
         defaultDimensions
        :type default_dimensions_dimension_id: str
        :param expand: Entities to expand
        :type expand: list[str]
        :param select: Selected properties to be retrieved
        :type select: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: DefaultDimensions or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.DefaultDimensions or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.get_default_dimensions_for_employee_by_dimension_id_by_parent_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'employee_id': self._serialize.url("employee_id", employee_id, 'str'),
            'defaultDimensions_parentId': self._serialize.url("default_dimensions_parent_id", default_dimensions_parent_id, 'str'),
            'defaultDimensions_dimensionId': self._serialize.url("default_dimensions_dimension_id", default_dimensions_dimension_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('DefaultDimensions', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_default_dimensions_for_employee_by_dimension_id_by_parent_id.metadata = {'url': '/companies({company_id})/employees({employee_id})/defaultDimensions({defaultDimensions_parentId},{defaultDimensions_dimensionId})'}

    def delete_default_dimensions_for_employee_by_dimension_id_by_parent_id_by_id(
            self, company_id, employee_id, default_dimensions_parent_id, default_dimensions_dimension_id, custom_headers=None, raw=False, **operation_config):
        """Delete an defaultDimensions in Dynamics 365 Business Central.

        :param company_id: id for company
        :type company_id: str
        :param employee_id: id for employee
        :type employee_id: str
        :param default_dimensions_parent_id: parentId for defaultDimensions
        :type default_dimensions_parent_id: str
        :param default_dimensions_dimension_id: dimensionId for
         defaultDimensions
        :type default_dimensions_dimension_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.delete_default_dimensions_for_employee_by_dimension_id_by_parent_id_by_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'employee_id': self._serialize.url("employee_id", employee_id, 'str'),
            'defaultDimensions_parentId': self._serialize.url("default_dimensions_parent_id", default_dimensions_parent_id, 'str'),
            'defaultDimensions_dimensionId': self._serialize.url("default_dimensions_dimension_id", default_dimensions_dimension_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.delete(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [204]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    delete_default_dimensions_for_employee_by_dimension_id_by_parent_id_by_id.metadata = {'url': '/companies({company_id})/employees({employee_id})/defaultDimensions({defaultDimensions_parentId},{defaultDimensions_dimensionId})'}

    def patch_default_dimensions_for_employee_by_dimension_id_by_parent_id_by_id(
            self, body, company_id, employee_id, default_dimensions_parent_id, default_dimensions_dimension_id, custom_headers=None, raw=False, **operation_config):
        """Lets the user patch the specified defaultDimensions.

        :param body:
        :type body: ~azure.mgmt.devtestlabs.models.BodyModelModel
        :param company_id: id for company
        :type company_id: str
        :param employee_id: id for employee
        :type employee_id: str
        :param default_dimensions_parent_id: parentId for defaultDimensions
        :type default_dimensions_parent_id: str
        :param default_dimensions_dimension_id: dimensionId for
         defaultDimensions
        :type default_dimensions_dimension_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: DefaultDimensions or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.DefaultDimensions or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.patch_default_dimensions_for_employee_by_dimension_id_by_parent_id_by_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'employee_id': self._serialize.url("employee_id", employee_id, 'str'),
            'defaultDimensions_parentId': self._serialize.url("default_dimensions_parent_id", default_dimensions_parent_id, 'str'),
            'defaultDimensions_dimensionId': self._serialize.url("default_dimensions_dimension_id", default_dimensions_dimension_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        header_parameters['If-Match'] = self._serialize.header("self.config.if_match", self.config.if_match, 'str')
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct body
        body_content = self._serialize.body(body, 'BodyModelModel')

        # Construct and send request
        request = self._client.patch(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('DefaultDimensions', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    patch_default_dimensions_for_employee_by_dimension_id_by_parent_id_by_id.metadata = {'url': '/companies({company_id})/employees({employee_id})/defaultDimensions({defaultDimensions_parentId},{defaultDimensions_dimensionId})'}

    def get_time_registration_entries_for_employee(
            self, company_id, employee_id, select=None, custom_headers=None, raw=False, **operation_config):
        """Returns a list of timeRegistrationEntries.

        :param company_id: id for company
        :type company_id: str
        :param employee_id: id for employee
        :type employee_id: str
        :param select: Selected properties to be retrieved
        :type select: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: GetTimeRegistrationEntriesForEmployeeOKResponse or
         ClientRawResponse if raw=true
        :rtype:
         ~azure.mgmt.devtestlabs.models.GetTimeRegistrationEntriesForEmployeeOKResponse
         or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.get_time_registration_entries_for_employee.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'employee_id': self._serialize.url("employee_id", employee_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if self.config.top is not None:
            query_parameters['$top'] = self._serialize.query("self.config.top", self.config.top, 'int')
        if self.config.skip is not None:
            query_parameters['$skip'] = self._serialize.query("self.config.skip", self.config.skip, 'int')
        if self.config.limit is not None:
            query_parameters['$limit'] = self._serialize.query("self.config.limit", self.config.limit, 'int')
        if self.config.filter is not None:
            query_parameters['$filter'] = self._serialize.query("self.config.filter", self.config.filter, 'str')
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('GetTimeRegistrationEntriesForEmployeeOKResponse', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_time_registration_entries_for_employee.metadata = {'url': '/companies({company_id})/employees({employee_id})/timeRegistrationEntries'}

    def post_time_registration_entry_for_employee(
            self, body, company_id, employee_id, custom_headers=None, raw=False, **operation_config):
        """Creates a timeRegistrationEntry in Dynamics 365 Business Central.

        :param body:
        :type body:
         ~azure.mgmt.devtestlabs.models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel
        :param company_id: id for company
        :type company_id: str
        :param employee_id: id for employee
        :type employee_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: TimeRegistrationEntry or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.TimeRegistrationEntry or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.post_time_registration_entry_for_employee.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'employee_id': self._serialize.url("employee_id", employee_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct body
        body_content = self._serialize.body(body, 'BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel')

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [201]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 201:
            deserialized = self._deserialize('TimeRegistrationEntry', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    post_time_registration_entry_for_employee.metadata = {'url': '/companies({company_id})/employees({employee_id})/timeRegistrationEntries'}

    def get_time_registration_entry_for_employee_by_id(
            self, company_id, employee_id, time_registration_entry_id, select=None, custom_headers=None, raw=False, **operation_config):
        """Retrieve the properties and relationships of an timeRegistrationEntry
        object for Dynamics 365 Business Central.

        :param company_id: id for company
        :type company_id: str
        :param employee_id: id for employee
        :type employee_id: str
        :param time_registration_entry_id: id for timeRegistrationEntry
        :type time_registration_entry_id: str
        :param select: Selected properties to be retrieved
        :type select: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: TimeRegistrationEntry or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.TimeRegistrationEntry or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.get_time_registration_entry_for_employee_by_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'employee_id': self._serialize.url("employee_id", employee_id, 'str'),
            'timeRegistrationEntry_id': self._serialize.url("time_registration_entry_id", time_registration_entry_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('TimeRegistrationEntry', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_time_registration_entry_for_employee_by_id.metadata = {'url': '/companies({company_id})/employees({employee_id})/timeRegistrationEntries({timeRegistrationEntry_id})'}

    def delete_time_registration_entry_for_employee_by_id_by_id(
            self, company_id, employee_id, time_registration_entry_id, custom_headers=None, raw=False, **operation_config):
        """Delete an timeRegistrationEntry in Dynamics 365 Business Central.

        :param company_id: id for company
        :type company_id: str
        :param employee_id: id for employee
        :type employee_id: str
        :param time_registration_entry_id: id for timeRegistrationEntry
        :type time_registration_entry_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.delete_time_registration_entry_for_employee_by_id_by_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'employee_id': self._serialize.url("employee_id", employee_id, 'str'),
            'timeRegistrationEntry_id': self._serialize.url("time_registration_entry_id", time_registration_entry_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.delete(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [204]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    delete_time_registration_entry_for_employee_by_id_by_id.metadata = {'url': '/companies({company_id})/employees({employee_id})/timeRegistrationEntries({timeRegistrationEntry_id})'}

    def patch_time_registration_entry_for_employee_by_id_by_id(
            self, body, company_id, employee_id, time_registration_entry_id, custom_headers=None, raw=False, **operation_config):
        """Lets the user patch the specified timeRegistrationEntry.

        :param body:
        :type body:
         ~azure.mgmt.devtestlabs.models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel
        :param company_id: id for company
        :type company_id: str
        :param employee_id: id for employee
        :type employee_id: str
        :param time_registration_entry_id: id for timeRegistrationEntry
        :type time_registration_entry_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: TimeRegistrationEntry or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.TimeRegistrationEntry or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.patch_time_registration_entry_for_employee_by_id_by_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'employee_id': self._serialize.url("employee_id", employee_id, 'str'),
            'timeRegistrationEntry_id': self._serialize.url("time_registration_entry_id", time_registration_entry_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        header_parameters['If-Match'] = self._serialize.header("self.config.if_match", self.config.if_match, 'str')
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct body
        body_content = self._serialize.body(body, 'BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel')

        # Construct and send request
        request = self._client.patch(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('TimeRegistrationEntry', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    patch_time_registration_entry_for_employee_by_id_by_id.metadata = {'url': '/companies({company_id})/employees({employee_id})/timeRegistrationEntries({timeRegistrationEntry_id})'}

    def get_time_registration_entries(
            self, company_id, select=None, custom_headers=None, raw=False, **operation_config):
        """Returns a list of timeRegistrationEntries.

        :param company_id: id for company
        :type company_id: str
        :param select: Selected properties to be retrieved
        :type select: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: GetTimeRegistrationEntriesOKResponse or ClientRawResponse if
         raw=true
        :rtype:
         ~azure.mgmt.devtestlabs.models.GetTimeRegistrationEntriesOKResponse or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.get_time_registration_entries.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if self.config.top is not None:
            query_parameters['$top'] = self._serialize.query("self.config.top", self.config.top, 'int')
        if self.config.skip is not None:
            query_parameters['$skip'] = self._serialize.query("self.config.skip", self.config.skip, 'int')
        if self.config.limit is not None:
            query_parameters['$limit'] = self._serialize.query("self.config.limit", self.config.limit, 'int')
        if self.config.filter is not None:
            query_parameters['$filter'] = self._serialize.query("self.config.filter", self.config.filter, 'str')
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('GetTimeRegistrationEntriesOKResponse', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_time_registration_entries.metadata = {'url': '/companies({company_id})/timeRegistrationEntries'}

    def post_time_registration_entry(
            self, body, company_id, custom_headers=None, raw=False, **operation_config):
        """Creates a timeRegistrationEntry in Dynamics 365 Business Central.

        :param body:
        :type body:
         ~azure.mgmt.devtestlabs.models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel
        :param company_id: id for company
        :type company_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: TimeRegistrationEntry or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.TimeRegistrationEntry or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.post_time_registration_entry.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct body
        body_content = self._serialize.body(body, 'BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel')

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [201]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 201:
            deserialized = self._deserialize('TimeRegistrationEntry', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    post_time_registration_entry.metadata = {'url': '/companies({company_id})/timeRegistrationEntries'}

    def get_time_registration_entry_by_id(
            self, company_id, time_registration_entry_id, select=None, custom_headers=None, raw=False, **operation_config):
        """Retrieve the properties and relationships of an timeRegistrationEntry
        object for Dynamics 365 Business Central.

        :param company_id: id for company
        :type company_id: str
        :param time_registration_entry_id: id for timeRegistrationEntry
        :type time_registration_entry_id: str
        :param select: Selected properties to be retrieved
        :type select: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: TimeRegistrationEntry or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.TimeRegistrationEntry or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.get_time_registration_entry_by_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'timeRegistrationEntry_id': self._serialize.url("time_registration_entry_id", time_registration_entry_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('TimeRegistrationEntry', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_time_registration_entry_by_id.metadata = {'url': '/companies({company_id})/timeRegistrationEntries({timeRegistrationEntry_id})'}

    def delete_time_registration_entry_by_id(
            self, company_id, time_registration_entry_id, custom_headers=None, raw=False, **operation_config):
        """Delete an timeRegistrationEntry in Dynamics 365 Business Central.

        :param company_id: id for company
        :type company_id: str
        :param time_registration_entry_id: id for timeRegistrationEntry
        :type time_registration_entry_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.delete_time_registration_entry_by_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'timeRegistrationEntry_id': self._serialize.url("time_registration_entry_id", time_registration_entry_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.delete(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [204]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    delete_time_registration_entry_by_id.metadata = {'url': '/companies({company_id})/timeRegistrationEntries({timeRegistrationEntry_id})'}

    def patch_time_registration_entry_by_id(
            self, body, company_id, time_registration_entry_id, custom_headers=None, raw=False, **operation_config):
        """Lets the user patch the specified timeRegistrationEntry.

        :param body:
        :type body:
         ~azure.mgmt.devtestlabs.models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel
        :param company_id: id for company
        :type company_id: str
        :param time_registration_entry_id: id for timeRegistrationEntry
        :type time_registration_entry_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: TimeRegistrationEntry or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.TimeRegistrationEntry or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.patch_time_registration_entry_by_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'timeRegistrationEntry_id': self._serialize.url("time_registration_entry_id", time_registration_entry_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        header_parameters['If-Match'] = self._serialize.header("self.config.if_match", self.config.if_match, 'str')
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct body
        body_content = self._serialize.body(body, 'BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel')

        # Construct and send request
        request = self._client.patch(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('TimeRegistrationEntry', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    patch_time_registration_entry_by_id.metadata = {'url': '/companies({company_id})/timeRegistrationEntries({timeRegistrationEntry_id})'}

    def get_general_ledger_entries(
            self, company_id, expand=None, select=None, custom_headers=None, raw=False, **operation_config):
        """Returns a list of generalLedgerEntries.

        :param company_id: id for company
        :type company_id: str
        :param expand: Entities to expand
        :type expand: list[str]
        :param select: Selected properties to be retrieved
        :type select: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: GetGeneralLedgerEntriesOKResponse or ClientRawResponse if
         raw=true
        :rtype:
         ~azure.mgmt.devtestlabs.models.GetGeneralLedgerEntriesOKResponse or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.get_general_ledger_entries.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if self.config.top is not None:
            query_parameters['$top'] = self._serialize.query("self.config.top", self.config.top, 'int')
        if self.config.skip is not None:
            query_parameters['$skip'] = self._serialize.query("self.config.skip", self.config.skip, 'int')
        if self.config.limit is not None:
            query_parameters['$limit'] = self._serialize.query("self.config.limit", self.config.limit, 'int')
        if self.config.filter is not None:
            query_parameters['$filter'] = self._serialize.query("self.config.filter", self.config.filter, 'str')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('GetGeneralLedgerEntriesOKResponse', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_general_ledger_entries.metadata = {'url': '/companies({company_id})/generalLedgerEntries'}

    def get_general_ledger_entry_by_id(
            self, company_id, general_ledger_entry_id, expand=None, select=None, custom_headers=None, raw=False, **operation_config):
        """Retrieve the properties and relationships of an generalLedgerEntry
        object for Dynamics 365 Business Central.

        :param company_id: id for company
        :type company_id: str
        :param general_ledger_entry_id: id for generalLedgerEntry
        :type general_ledger_entry_id: int
        :param expand: Entities to expand
        :type expand: list[str]
        :param select: Selected properties to be retrieved
        :type select: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: GeneralLedgerEntry or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.GeneralLedgerEntry or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.get_general_ledger_entry_by_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'generalLedgerEntry_id': self._serialize.url("general_ledger_entry_id", general_ledger_entry_id, 'int')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('GeneralLedgerEntry', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_general_ledger_entry_by_id.metadata = {'url': '/companies({company_id})/generalLedgerEntries({generalLedgerEntry_id})'}

    def get_currencies(
            self, company_id, select=None, custom_headers=None, raw=False, **operation_config):
        """Returns a list of currencies.

        :param company_id: id for company
        :type company_id: str
        :param select: Selected properties to be retrieved
        :type select: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: GetCurrenciesOKResponse or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.GetCurrenciesOKResponse or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.get_currencies.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if self.config.top is not None:
            query_parameters['$top'] = self._serialize.query("self.config.top", self.config.top, 'int')
        if self.config.skip is not None:
            query_parameters['$skip'] = self._serialize.query("self.config.skip", self.config.skip, 'int')
        if self.config.limit is not None:
            query_parameters['$limit'] = self._serialize.query("self.config.limit", self.config.limit, 'int')
        if self.config.filter is not None:
            query_parameters['$filter'] = self._serialize.query("self.config.filter", self.config.filter, 'str')
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('GetCurrenciesOKResponse', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_currencies.metadata = {'url': '/companies({company_id})/currencies'}

    def post_currency(
            self, body, company_id, custom_headers=None, raw=False, **operation_config):
        """Creates a currency in Dynamics 365 Business Central.

        :param body:
        :type body:
         ~azure.mgmt.devtestlabs.models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel
        :param company_id: id for company
        :type company_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: Currency or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.Currency or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.post_currency.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct body
        body_content = self._serialize.body(body, 'BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel')

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [201]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 201:
            deserialized = self._deserialize('Currency', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    post_currency.metadata = {'url': '/companies({company_id})/currencies'}

    def get_currency_by_id(
            self, company_id, currency_id, select=None, custom_headers=None, raw=False, **operation_config):
        """Retrieve the properties and relationships of an currency object for
        Dynamics 365 Business Central.

        :param company_id: id for company
        :type company_id: str
        :param currency_id: id for currency
        :type currency_id: str
        :param select: Selected properties to be retrieved
        :type select: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: Currency or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.Currency or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.get_currency_by_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'currency_id': self._serialize.url("currency_id", currency_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('Currency', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_currency_by_id.metadata = {'url': '/companies({company_id})/currencies({currency_id})'}

    def delete_currency_by_id(
            self, company_id, currency_id, custom_headers=None, raw=False, **operation_config):
        """Delete an currency in Dynamics 365 Business Central.

        :param company_id: id for company
        :type company_id: str
        :param currency_id: id for currency
        :type currency_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.delete_currency_by_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'currency_id': self._serialize.url("currency_id", currency_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.delete(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [204]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    delete_currency_by_id.metadata = {'url': '/companies({company_id})/currencies({currency_id})'}

    def patch_currency_by_id(
            self, body, company_id, currency_id, custom_headers=None, raw=False, **operation_config):
        """Lets the user patch the specified currency.

        :param body:
        :type body:
         ~azure.mgmt.devtestlabs.models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel
        :param company_id: id for company
        :type company_id: str
        :param currency_id: id for currency
        :type currency_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: Currency or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.Currency or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.patch_currency_by_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'currency_id': self._serialize.url("currency_id", currency_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        header_parameters['If-Match'] = self._serialize.header("self.config.if_match", self.config.if_match, 'str')
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct body
        body_content = self._serialize.body(body, 'BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel')

        # Construct and send request
        request = self._client.patch(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('Currency', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    patch_currency_by_id.metadata = {'url': '/companies({company_id})/currencies({currency_id})'}

    def get_payment_methods(
            self, company_id, select=None, custom_headers=None, raw=False, **operation_config):
        """Returns a list of paymentMethods.

        :param company_id: id for company
        :type company_id: str
        :param select: Selected properties to be retrieved
        :type select: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: GetPaymentMethodsOKResponse or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.GetPaymentMethodsOKResponse or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.get_payment_methods.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if self.config.top is not None:
            query_parameters['$top'] = self._serialize.query("self.config.top", self.config.top, 'int')
        if self.config.skip is not None:
            query_parameters['$skip'] = self._serialize.query("self.config.skip", self.config.skip, 'int')
        if self.config.limit is not None:
            query_parameters['$limit'] = self._serialize.query("self.config.limit", self.config.limit, 'int')
        if self.config.filter is not None:
            query_parameters['$filter'] = self._serialize.query("self.config.filter", self.config.filter, 'str')
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('GetPaymentMethodsOKResponse', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_payment_methods.metadata = {'url': '/companies({company_id})/paymentMethods'}

    def post_payment_method(
            self, body, company_id, custom_headers=None, raw=False, **operation_config):
        """Creates a paymentMethod in Dynamics 365 Business Central.

        :param body:
        :type body:
         ~azure.mgmt.devtestlabs.models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel
        :param company_id: id for company
        :type company_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: PaymentMethod or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.PaymentMethod or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.post_payment_method.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct body
        body_content = self._serialize.body(body, 'BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel')

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [201]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 201:
            deserialized = self._deserialize('PaymentMethod', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    post_payment_method.metadata = {'url': '/companies({company_id})/paymentMethods'}

    def get_payment_method_by_id(
            self, company_id, payment_method_id, select=None, custom_headers=None, raw=False, **operation_config):
        """Retrieve the properties and relationships of an paymentMethod object
        for Dynamics 365 Business Central.

        :param company_id: id for company
        :type company_id: str
        :param payment_method_id: id for paymentMethod
        :type payment_method_id: str
        :param select: Selected properties to be retrieved
        :type select: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: PaymentMethod or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.PaymentMethod or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.get_payment_method_by_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'paymentMethod_id': self._serialize.url("payment_method_id", payment_method_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('PaymentMethod', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_payment_method_by_id.metadata = {'url': '/companies({company_id})/paymentMethods({paymentMethod_id})'}

    def delete_payment_method_by_id(
            self, company_id, payment_method_id, custom_headers=None, raw=False, **operation_config):
        """Delete an paymentMethod in Dynamics 365 Business Central.

        :param company_id: id for company
        :type company_id: str
        :param payment_method_id: id for paymentMethod
        :type payment_method_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.delete_payment_method_by_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'paymentMethod_id': self._serialize.url("payment_method_id", payment_method_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.delete(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [204]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    delete_payment_method_by_id.metadata = {'url': '/companies({company_id})/paymentMethods({paymentMethod_id})'}

    def patch_payment_method_by_id(
            self, body, company_id, payment_method_id, custom_headers=None, raw=False, **operation_config):
        """Lets the user patch the specified paymentMethod.

        :param body:
        :type body:
         ~azure.mgmt.devtestlabs.models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel
        :param company_id: id for company
        :type company_id: str
        :param payment_method_id: id for paymentMethod
        :type payment_method_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: PaymentMethod or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.PaymentMethod or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.patch_payment_method_by_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'paymentMethod_id': self._serialize.url("payment_method_id", payment_method_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        header_parameters['If-Match'] = self._serialize.header("self.config.if_match", self.config.if_match, 'str')
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct body
        body_content = self._serialize.body(body, 'BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel')

        # Construct and send request
        request = self._client.patch(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('PaymentMethod', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    patch_payment_method_by_id.metadata = {'url': '/companies({company_id})/paymentMethods({paymentMethod_id})'}

    def get_dimensions(
            self, company_id, expand=None, select=None, custom_headers=None, raw=False, **operation_config):
        """Returns a list of dimensions.

        :param company_id: id for company
        :type company_id: str
        :param expand: Entities to expand
        :type expand: list[str]
        :param select: Selected properties to be retrieved
        :type select: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: GetDimensionsOKResponse or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.GetDimensionsOKResponse or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.get_dimensions.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if self.config.top is not None:
            query_parameters['$top'] = self._serialize.query("self.config.top", self.config.top, 'int')
        if self.config.skip is not None:
            query_parameters['$skip'] = self._serialize.query("self.config.skip", self.config.skip, 'int')
        if self.config.limit is not None:
            query_parameters['$limit'] = self._serialize.query("self.config.limit", self.config.limit, 'int')
        if self.config.filter is not None:
            query_parameters['$filter'] = self._serialize.query("self.config.filter", self.config.filter, 'str')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('GetDimensionsOKResponse', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_dimensions.metadata = {'url': '/companies({company_id})/dimensions'}

    def get_dimension_by_id(
            self, company_id, dimension_id, expand=None, select=None, custom_headers=None, raw=False, **operation_config):
        """Retrieve the properties and relationships of an dimension object for
        Dynamics 365 Business Central.

        :param company_id: id for company
        :type company_id: str
        :param dimension_id: id for dimension
        :type dimension_id: str
        :param expand: Entities to expand
        :type expand: list[str]
        :param select: Selected properties to be retrieved
        :type select: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: Dimension or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.Dimension or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.get_dimension_by_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'dimension_id': self._serialize.url("dimension_id", dimension_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('Dimension', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_dimension_by_id.metadata = {'url': '/companies({company_id})/dimensions({dimension_id})'}

    def get_dimension_values_for_dimension(
            self, company_id, dimension_id, select=None, custom_headers=None, raw=False, **operation_config):
        """Returns a list of dimensionValues.

        :param company_id: id for company
        :type company_id: str
        :param dimension_id: id for dimension
        :type dimension_id: str
        :param select: Selected properties to be retrieved
        :type select: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: GetDimensionValuesForDimensionOKResponse or ClientRawResponse
         if raw=true
        :rtype:
         ~azure.mgmt.devtestlabs.models.GetDimensionValuesForDimensionOKResponse
         or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.get_dimension_values_for_dimension.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'dimension_id': self._serialize.url("dimension_id", dimension_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if self.config.top is not None:
            query_parameters['$top'] = self._serialize.query("self.config.top", self.config.top, 'int')
        if self.config.skip is not None:
            query_parameters['$skip'] = self._serialize.query("self.config.skip", self.config.skip, 'int')
        if self.config.limit is not None:
            query_parameters['$limit'] = self._serialize.query("self.config.limit", self.config.limit, 'int')
        if self.config.filter is not None:
            query_parameters['$filter'] = self._serialize.query("self.config.filter", self.config.filter, 'str')
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('GetDimensionValuesForDimensionOKResponse', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_dimension_values_for_dimension.metadata = {'url': '/companies({company_id})/dimensions({dimension_id})/dimensionValues'}

    def get_dimension_value_for_dimension_by_id(
            self, company_id, dimension_id, dimension_value_id, select=None, custom_headers=None, raw=False, **operation_config):
        """Retrieve the properties and relationships of an dimensionValue object
        for Dynamics 365 Business Central.

        :param company_id: id for company
        :type company_id: str
        :param dimension_id: id for dimension
        :type dimension_id: str
        :param dimension_value_id: id for dimensionValue
        :type dimension_value_id: str
        :param select: Selected properties to be retrieved
        :type select: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: DimensionValue or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.DimensionValue or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.get_dimension_value_for_dimension_by_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'dimension_id': self._serialize.url("dimension_id", dimension_id, 'str'),
            'dimensionValue_id': self._serialize.url("dimension_value_id", dimension_value_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('DimensionValue', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_dimension_value_for_dimension_by_id.metadata = {'url': '/companies({company_id})/dimensions({dimension_id})/dimensionValues({dimensionValue_id})'}

    def get_dimension_values(
            self, company_id, select=None, custom_headers=None, raw=False, **operation_config):
        """Returns a list of dimensionValues.

        :param company_id: id for company
        :type company_id: str
        :param select: Selected properties to be retrieved
        :type select: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: GetDimensionValuesOKResponse or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.GetDimensionValuesOKResponse or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.get_dimension_values.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if self.config.top is not None:
            query_parameters['$top'] = self._serialize.query("self.config.top", self.config.top, 'int')
        if self.config.skip is not None:
            query_parameters['$skip'] = self._serialize.query("self.config.skip", self.config.skip, 'int')
        if self.config.limit is not None:
            query_parameters['$limit'] = self._serialize.query("self.config.limit", self.config.limit, 'int')
        if self.config.filter is not None:
            query_parameters['$filter'] = self._serialize.query("self.config.filter", self.config.filter, 'str')
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('GetDimensionValuesOKResponse', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_dimension_values.metadata = {'url': '/companies({company_id})/dimensionValues'}

    def get_dimension_value_by_id(
            self, company_id, dimension_value_id, select=None, custom_headers=None, raw=False, **operation_config):
        """Retrieve the properties and relationships of an dimensionValue object
        for Dynamics 365 Business Central.

        :param company_id: id for company
        :type company_id: str
        :param dimension_value_id: id for dimensionValue
        :type dimension_value_id: str
        :param select: Selected properties to be retrieved
        :type select: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: DimensionValue or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.DimensionValue or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.get_dimension_value_by_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'dimensionValue_id': self._serialize.url("dimension_value_id", dimension_value_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('DimensionValue', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_dimension_value_by_id.metadata = {'url': '/companies({company_id})/dimensionValues({dimensionValue_id})'}

    def get_dimension_lines(
            self, company_id, expand=None, select=None, custom_headers=None, raw=False, **operation_config):
        """Returns a list of dimensionLines.

        :param company_id: id for company
        :type company_id: str
        :param expand: Entities to expand
        :type expand: list[str]
        :param select: Selected properties to be retrieved
        :type select: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: GetDimensionLinesOKResponse or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.GetDimensionLinesOKResponse or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.get_dimension_lines.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if self.config.top is not None:
            query_parameters['$top'] = self._serialize.query("self.config.top", self.config.top, 'int')
        if self.config.skip is not None:
            query_parameters['$skip'] = self._serialize.query("self.config.skip", self.config.skip, 'int')
        if self.config.limit is not None:
            query_parameters['$limit'] = self._serialize.query("self.config.limit", self.config.limit, 'int')
        if self.config.filter is not None:
            query_parameters['$filter'] = self._serialize.query("self.config.filter", self.config.filter, 'str')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('GetDimensionLinesOKResponse', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_dimension_lines.metadata = {'url': '/companies({company_id})/dimensionLines'}

    def post_dimension_line(
            self, body, company_id, custom_headers=None, raw=False, **operation_config):
        """Creates a dimensionLine in Dynamics 365 Business Central.

        :param body:
        :type body:
         ~azure.mgmt.devtestlabs.models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel
        :param company_id: id for company
        :type company_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: DimensionLine or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.DimensionLine or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.post_dimension_line.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct body
        body_content = self._serialize.body(body, 'BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel')

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [201]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 201:
            deserialized = self._deserialize('DimensionLine', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    post_dimension_line.metadata = {'url': '/companies({company_id})/dimensionLines'}

    def get_dimension_line_by_id_by_parent_id(
            self, company_id, dimension_line_parent_id, dimension_line_id, expand=None, select=None, custom_headers=None, raw=False, **operation_config):
        """Retrieve the properties and relationships of an dimensionLine object
        for Dynamics 365 Business Central.

        :param company_id: id for company
        :type company_id: str
        :param dimension_line_parent_id: parentId for dimensionLine
        :type dimension_line_parent_id: str
        :param dimension_line_id: id for dimensionLine
        :type dimension_line_id: str
        :param expand: Entities to expand
        :type expand: list[str]
        :param select: Selected properties to be retrieved
        :type select: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: DimensionLine or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.DimensionLine or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.get_dimension_line_by_id_by_parent_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'dimensionLine_parentId': self._serialize.url("dimension_line_parent_id", dimension_line_parent_id, 'str'),
            'dimensionLine_id': self._serialize.url("dimension_line_id", dimension_line_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('DimensionLine', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_dimension_line_by_id_by_parent_id.metadata = {'url': '/companies({company_id})/dimensionLines({dimensionLine_parentId},{dimensionLine_id})'}

    def delete_dimension_line_by_id_by_parent_id(
            self, company_id, dimension_line_parent_id, dimension_line_id, custom_headers=None, raw=False, **operation_config):
        """Delete an dimensionLine in Dynamics 365 Business Central.

        :param company_id: id for company
        :type company_id: str
        :param dimension_line_parent_id: parentId for dimensionLine
        :type dimension_line_parent_id: str
        :param dimension_line_id: id for dimensionLine
        :type dimension_line_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.delete_dimension_line_by_id_by_parent_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'dimensionLine_parentId': self._serialize.url("dimension_line_parent_id", dimension_line_parent_id, 'str'),
            'dimensionLine_id': self._serialize.url("dimension_line_id", dimension_line_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.delete(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [204]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    delete_dimension_line_by_id_by_parent_id.metadata = {'url': '/companies({company_id})/dimensionLines({dimensionLine_parentId},{dimensionLine_id})'}

    def patch_dimension_line_by_id_by_parent_id(
            self, body, company_id, dimension_line_parent_id, dimension_line_id, custom_headers=None, raw=False, **operation_config):
        """Lets the user patch the specified dimensionLine.

        :param body:
        :type body:
         ~azure.mgmt.devtestlabs.models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel
        :param company_id: id for company
        :type company_id: str
        :param dimension_line_parent_id: parentId for dimensionLine
        :type dimension_line_parent_id: str
        :param dimension_line_id: id for dimensionLine
        :type dimension_line_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: DimensionLine or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.DimensionLine or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.patch_dimension_line_by_id_by_parent_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'dimensionLine_parentId': self._serialize.url("dimension_line_parent_id", dimension_line_parent_id, 'str'),
            'dimensionLine_id': self._serialize.url("dimension_line_id", dimension_line_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        header_parameters['If-Match'] = self._serialize.header("self.config.if_match", self.config.if_match, 'str')
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct body
        body_content = self._serialize.body(body, 'BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel')

        # Construct and send request
        request = self._client.patch(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('DimensionLine', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    patch_dimension_line_by_id_by_parent_id.metadata = {'url': '/companies({company_id})/dimensionLines({dimensionLine_parentId},{dimensionLine_id})'}

    def get_payment_terms(
            self, company_id, select=None, custom_headers=None, raw=False, **operation_config):
        """Returns a list of paymentTerms.

        :param company_id: id for company
        :type company_id: str
        :param select: Selected properties to be retrieved
        :type select: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: GetPaymentTermsOKResponse or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.GetPaymentTermsOKResponse or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.get_payment_terms.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if self.config.top is not None:
            query_parameters['$top'] = self._serialize.query("self.config.top", self.config.top, 'int')
        if self.config.skip is not None:
            query_parameters['$skip'] = self._serialize.query("self.config.skip", self.config.skip, 'int')
        if self.config.limit is not None:
            query_parameters['$limit'] = self._serialize.query("self.config.limit", self.config.limit, 'int')
        if self.config.filter is not None:
            query_parameters['$filter'] = self._serialize.query("self.config.filter", self.config.filter, 'str')
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('GetPaymentTermsOKResponse', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_payment_terms.metadata = {'url': '/companies({company_id})/paymentTerms'}

    def post_payment_term(
            self, body, company_id, custom_headers=None, raw=False, **operation_config):
        """Creates a paymentTerm in Dynamics 365 Business Central.

        :param body:
        :type body:
         ~azure.mgmt.devtestlabs.models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel
        :param company_id: id for company
        :type company_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: PaymentTerm or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.PaymentTerm or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.post_payment_term.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct body
        body_content = self._serialize.body(body, 'BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel')

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [201]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 201:
            deserialized = self._deserialize('PaymentTerm', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    post_payment_term.metadata = {'url': '/companies({company_id})/paymentTerms'}

    def get_payment_term_by_id(
            self, company_id, payment_term_id, select=None, custom_headers=None, raw=False, **operation_config):
        """Retrieve the properties and relationships of an paymentTerm object for
        Dynamics 365 Business Central.

        :param company_id: id for company
        :type company_id: str
        :param payment_term_id: id for paymentTerm
        :type payment_term_id: str
        :param select: Selected properties to be retrieved
        :type select: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: PaymentTerm or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.PaymentTerm or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.get_payment_term_by_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'paymentTerm_id': self._serialize.url("payment_term_id", payment_term_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('PaymentTerm', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_payment_term_by_id.metadata = {'url': '/companies({company_id})/paymentTerms({paymentTerm_id})'}

    def delete_payment_term_by_id(
            self, company_id, payment_term_id, custom_headers=None, raw=False, **operation_config):
        """Delete an paymentTerm in Dynamics 365 Business Central.

        :param company_id: id for company
        :type company_id: str
        :param payment_term_id: id for paymentTerm
        :type payment_term_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.delete_payment_term_by_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'paymentTerm_id': self._serialize.url("payment_term_id", payment_term_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.delete(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [204]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    delete_payment_term_by_id.metadata = {'url': '/companies({company_id})/paymentTerms({paymentTerm_id})'}

    def patch_payment_term_by_id(
            self, body, company_id, payment_term_id, custom_headers=None, raw=False, **operation_config):
        """Lets the user patch the specified paymentTerm.

        :param body:
        :type body:
         ~azure.mgmt.devtestlabs.models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel
        :param company_id: id for company
        :type company_id: str
        :param payment_term_id: id for paymentTerm
        :type payment_term_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: PaymentTerm or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.PaymentTerm or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.patch_payment_term_by_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'paymentTerm_id': self._serialize.url("payment_term_id", payment_term_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        header_parameters['If-Match'] = self._serialize.header("self.config.if_match", self.config.if_match, 'str')
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct body
        body_content = self._serialize.body(body, 'BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel')

        # Construct and send request
        request = self._client.patch(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('PaymentTerm', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    patch_payment_term_by_id.metadata = {'url': '/companies({company_id})/paymentTerms({paymentTerm_id})'}

    def get_shipment_methods(
            self, company_id, select=None, custom_headers=None, raw=False, **operation_config):
        """Returns a list of shipmentMethods.

        :param company_id: id for company
        :type company_id: str
        :param select: Selected properties to be retrieved
        :type select: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: GetShipmentMethodsOKResponse or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.GetShipmentMethodsOKResponse or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.get_shipment_methods.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if self.config.top is not None:
            query_parameters['$top'] = self._serialize.query("self.config.top", self.config.top, 'int')
        if self.config.skip is not None:
            query_parameters['$skip'] = self._serialize.query("self.config.skip", self.config.skip, 'int')
        if self.config.limit is not None:
            query_parameters['$limit'] = self._serialize.query("self.config.limit", self.config.limit, 'int')
        if self.config.filter is not None:
            query_parameters['$filter'] = self._serialize.query("self.config.filter", self.config.filter, 'str')
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('GetShipmentMethodsOKResponse', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_shipment_methods.metadata = {'url': '/companies({company_id})/shipmentMethods'}

    def post_shipment_method(
            self, body, company_id, custom_headers=None, raw=False, **operation_config):
        """Creates a shipmentMethod in Dynamics 365 Business Central.

        :param body:
        :type body:
         ~azure.mgmt.devtestlabs.models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel
        :param company_id: id for company
        :type company_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: ShipmentMethod or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.ShipmentMethod or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.post_shipment_method.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct body
        body_content = self._serialize.body(body, 'BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel')

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [201]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 201:
            deserialized = self._deserialize('ShipmentMethod', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    post_shipment_method.metadata = {'url': '/companies({company_id})/shipmentMethods'}

    def get_shipment_method_by_id(
            self, company_id, shipment_method_id, select=None, custom_headers=None, raw=False, **operation_config):
        """Retrieve the properties and relationships of an shipmentMethod object
        for Dynamics 365 Business Central.

        :param company_id: id for company
        :type company_id: str
        :param shipment_method_id: id for shipmentMethod
        :type shipment_method_id: str
        :param select: Selected properties to be retrieved
        :type select: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: ShipmentMethod or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.ShipmentMethod or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.get_shipment_method_by_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'shipmentMethod_id': self._serialize.url("shipment_method_id", shipment_method_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('ShipmentMethod', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_shipment_method_by_id.metadata = {'url': '/companies({company_id})/shipmentMethods({shipmentMethod_id})'}

    def delete_shipment_method_by_id(
            self, company_id, shipment_method_id, custom_headers=None, raw=False, **operation_config):
        """Delete an shipmentMethod in Dynamics 365 Business Central.

        :param company_id: id for company
        :type company_id: str
        :param shipment_method_id: id for shipmentMethod
        :type shipment_method_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.delete_shipment_method_by_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'shipmentMethod_id': self._serialize.url("shipment_method_id", shipment_method_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.delete(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [204]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    delete_shipment_method_by_id.metadata = {'url': '/companies({company_id})/shipmentMethods({shipmentMethod_id})'}

    def patch_shipment_method_by_id(
            self, body, company_id, shipment_method_id, custom_headers=None, raw=False, **operation_config):
        """Lets the user patch the specified shipmentMethod.

        :param body:
        :type body:
         ~azure.mgmt.devtestlabs.models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel
        :param company_id: id for company
        :type company_id: str
        :param shipment_method_id: id for shipmentMethod
        :type shipment_method_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: ShipmentMethod or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.ShipmentMethod or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.patch_shipment_method_by_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'shipmentMethod_id': self._serialize.url("shipment_method_id", shipment_method_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        header_parameters['If-Match'] = self._serialize.header("self.config.if_match", self.config.if_match, 'str')
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct body
        body_content = self._serialize.body(body, 'BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel')

        # Construct and send request
        request = self._client.patch(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('ShipmentMethod', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    patch_shipment_method_by_id.metadata = {'url': '/companies({company_id})/shipmentMethods({shipmentMethod_id})'}

    def get_item_categories(
            self, company_id, select=None, custom_headers=None, raw=False, **operation_config):
        """Returns a list of itemCategories.

        :param company_id: id for company
        :type company_id: str
        :param select: Selected properties to be retrieved
        :type select: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: GetItemCategoriesOKResponse or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.GetItemCategoriesOKResponse or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.get_item_categories.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if self.config.top is not None:
            query_parameters['$top'] = self._serialize.query("self.config.top", self.config.top, 'int')
        if self.config.skip is not None:
            query_parameters['$skip'] = self._serialize.query("self.config.skip", self.config.skip, 'int')
        if self.config.limit is not None:
            query_parameters['$limit'] = self._serialize.query("self.config.limit", self.config.limit, 'int')
        if self.config.filter is not None:
            query_parameters['$filter'] = self._serialize.query("self.config.filter", self.config.filter, 'str')
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('GetItemCategoriesOKResponse', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_item_categories.metadata = {'url': '/companies({company_id})/itemCategories'}

    def post_item_category(
            self, body, company_id, custom_headers=None, raw=False, **operation_config):
        """Creates a itemCategory in Dynamics 365 Business Central.

        :param body:
        :type body:
         ~azure.mgmt.devtestlabs.models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel
        :param company_id: id for company
        :type company_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: ItemCategory or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.ItemCategory or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.post_item_category.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct body
        body_content = self._serialize.body(body, 'BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel')

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [201]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 201:
            deserialized = self._deserialize('ItemCategory', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    post_item_category.metadata = {'url': '/companies({company_id})/itemCategories'}

    def get_item_category_by_id(
            self, company_id, item_category_id, select=None, custom_headers=None, raw=False, **operation_config):
        """Retrieve the properties and relationships of an itemCategory object for
        Dynamics 365 Business Central.

        :param company_id: id for company
        :type company_id: str
        :param item_category_id: id for itemCategory
        :type item_category_id: str
        :param select: Selected properties to be retrieved
        :type select: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: ItemCategory or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.ItemCategory or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.get_item_category_by_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'itemCategory_id': self._serialize.url("item_category_id", item_category_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('ItemCategory', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_item_category_by_id.metadata = {'url': '/companies({company_id})/itemCategories({itemCategory_id})'}

    def delete_item_category_by_id(
            self, company_id, item_category_id, custom_headers=None, raw=False, **operation_config):
        """Delete an itemCategory in Dynamics 365 Business Central.

        :param company_id: id for company
        :type company_id: str
        :param item_category_id: id for itemCategory
        :type item_category_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.delete_item_category_by_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'itemCategory_id': self._serialize.url("item_category_id", item_category_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.delete(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [204]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    delete_item_category_by_id.metadata = {'url': '/companies({company_id})/itemCategories({itemCategory_id})'}

    def patch_item_category_by_id(
            self, body, company_id, item_category_id, custom_headers=None, raw=False, **operation_config):
        """Lets the user patch the specified itemCategory.

        :param body:
        :type body:
         ~azure.mgmt.devtestlabs.models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel
        :param company_id: id for company
        :type company_id: str
        :param item_category_id: id for itemCategory
        :type item_category_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: ItemCategory or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.ItemCategory or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.patch_item_category_by_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'itemCategory_id': self._serialize.url("item_category_id", item_category_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        header_parameters['If-Match'] = self._serialize.header("self.config.if_match", self.config.if_match, 'str')
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct body
        body_content = self._serialize.body(body, 'BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel')

        # Construct and send request
        request = self._client.patch(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('ItemCategory', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    patch_item_category_by_id.metadata = {'url': '/companies({company_id})/itemCategories({itemCategory_id})'}

    def get_cash_flow_statement(
            self, company_id, select=None, custom_headers=None, raw=False, **operation_config):
        """Returns a list of cashFlowStatement.

        :param company_id: id for company
        :type company_id: str
        :param select: Selected properties to be retrieved
        :type select: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: GetCashFlowStatementOKResponse or ClientRawResponse if
         raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.GetCashFlowStatementOKResponse
         or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.get_cash_flow_statement.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if self.config.top is not None:
            query_parameters['$top'] = self._serialize.query("self.config.top", self.config.top, 'int')
        if self.config.skip is not None:
            query_parameters['$skip'] = self._serialize.query("self.config.skip", self.config.skip, 'int')
        if self.config.limit is not None:
            query_parameters['$limit'] = self._serialize.query("self.config.limit", self.config.limit, 'int')
        if self.config.filter is not None:
            query_parameters['$filter'] = self._serialize.query("self.config.filter", self.config.filter, 'str')
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('GetCashFlowStatementOKResponse', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_cash_flow_statement.metadata = {'url': '/companies({company_id})/cashFlowStatement'}

    def get_cash_flow_statement_by_line_number(
            self, company_id, cash_flow_statement_line_number, select=None, custom_headers=None, raw=False, **operation_config):
        """Retrieve the properties and relationships of an cashFlowStatement
        object for Dynamics 365 Business Central.

        :param company_id: id for company
        :type company_id: str
        :param cash_flow_statement_line_number: lineNumber for
         cashFlowStatement
        :type cash_flow_statement_line_number: int
        :param select: Selected properties to be retrieved
        :type select: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: CashFlowStatement or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.CashFlowStatement or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.get_cash_flow_statement_by_line_number.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'cashFlowStatement_lineNumber': self._serialize.url("cash_flow_statement_line_number", cash_flow_statement_line_number, 'int')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('CashFlowStatement', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_cash_flow_statement_by_line_number.metadata = {'url': '/companies({company_id})/cashFlowStatement({cashFlowStatement_lineNumber})'}

    def get_countries_regions(
            self, company_id, select=None, custom_headers=None, raw=False, **operation_config):
        """Returns a list of countriesRegions.

        :param company_id: id for company
        :type company_id: str
        :param select: Selected properties to be retrieved
        :type select: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: GetCountriesRegionsOKResponse or ClientRawResponse if
         raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.GetCountriesRegionsOKResponse
         or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.get_countries_regions.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if self.config.top is not None:
            query_parameters['$top'] = self._serialize.query("self.config.top", self.config.top, 'int')
        if self.config.skip is not None:
            query_parameters['$skip'] = self._serialize.query("self.config.skip", self.config.skip, 'int')
        if self.config.limit is not None:
            query_parameters['$limit'] = self._serialize.query("self.config.limit", self.config.limit, 'int')
        if self.config.filter is not None:
            query_parameters['$filter'] = self._serialize.query("self.config.filter", self.config.filter, 'str')
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('GetCountriesRegionsOKResponse', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_countries_regions.metadata = {'url': '/companies({company_id})/countriesRegions'}

    def post_country_region(
            self, body, company_id, custom_headers=None, raw=False, **operation_config):
        """Creates a countryRegion in Dynamics 365 Business Central.

        :param body:
        :type body:
         ~azure.mgmt.devtestlabs.models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel
        :param company_id: id for company
        :type company_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: CountryRegion or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.CountryRegion or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.post_country_region.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct body
        body_content = self._serialize.body(body, 'BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel')

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [201]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 201:
            deserialized = self._deserialize('CountryRegion', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    post_country_region.metadata = {'url': '/companies({company_id})/countriesRegions'}

    def get_country_region_by_id(
            self, company_id, country_region_id, select=None, custom_headers=None, raw=False, **operation_config):
        """Retrieve the properties and relationships of an countryRegion object
        for Dynamics 365 Business Central.

        :param company_id: id for company
        :type company_id: str
        :param country_region_id: id for countryRegion
        :type country_region_id: str
        :param select: Selected properties to be retrieved
        :type select: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: CountryRegion or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.CountryRegion or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.get_country_region_by_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'countryRegion_id': self._serialize.url("country_region_id", country_region_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('CountryRegion', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_country_region_by_id.metadata = {'url': '/companies({company_id})/countriesRegions({countryRegion_id})'}

    def delete_country_region_by_id(
            self, company_id, country_region_id, custom_headers=None, raw=False, **operation_config):
        """Delete an countryRegion in Dynamics 365 Business Central.

        :param company_id: id for company
        :type company_id: str
        :param country_region_id: id for countryRegion
        :type country_region_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.delete_country_region_by_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'countryRegion_id': self._serialize.url("country_region_id", country_region_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.delete(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [204]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    delete_country_region_by_id.metadata = {'url': '/companies({company_id})/countriesRegions({countryRegion_id})'}

    def patch_country_region_by_id(
            self, body, company_id, country_region_id, custom_headers=None, raw=False, **operation_config):
        """Lets the user patch the specified countryRegion.

        :param body:
        :type body:
         ~azure.mgmt.devtestlabs.models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel
        :param company_id: id for company
        :type company_id: str
        :param country_region_id: id for countryRegion
        :type country_region_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: CountryRegion or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.CountryRegion or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.patch_country_region_by_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'countryRegion_id': self._serialize.url("country_region_id", country_region_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        header_parameters['If-Match'] = self._serialize.header("self.config.if_match", self.config.if_match, 'str')
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct body
        body_content = self._serialize.body(body, 'BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel')

        # Construct and send request
        request = self._client.patch(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('CountryRegion', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    patch_country_region_by_id.metadata = {'url': '/companies({company_id})/countriesRegions({countryRegion_id})'}

    def get_sales_orders(
            self, company_id, expand=None, select=None, custom_headers=None, raw=False, **operation_config):
        """Returns a list of salesOrders.

        :param company_id: id for company
        :type company_id: str
        :param expand: Entities to expand
        :type expand: list[str]
        :param select: Selected properties to be retrieved
        :type select: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: GetSalesOrdersOKResponse or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.GetSalesOrdersOKResponse or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.get_sales_orders.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if self.config.top is not None:
            query_parameters['$top'] = self._serialize.query("self.config.top", self.config.top, 'int')
        if self.config.skip is not None:
            query_parameters['$skip'] = self._serialize.query("self.config.skip", self.config.skip, 'int')
        if self.config.limit is not None:
            query_parameters['$limit'] = self._serialize.query("self.config.limit", self.config.limit, 'int')
        if self.config.filter is not None:
            query_parameters['$filter'] = self._serialize.query("self.config.filter", self.config.filter, 'str')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('GetSalesOrdersOKResponse', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_sales_orders.metadata = {'url': '/companies({company_id})/salesOrders'}

    def post_sales_order(
            self, body, company_id, custom_headers=None, raw=False, **operation_config):
        """Creates a salesOrder in Dynamics 365 Business Central.

        :param body:
        :type body:
         ~azure.mgmt.devtestlabs.models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel
        :param company_id: id for company
        :type company_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: SalesOrder or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.SalesOrder or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.post_sales_order.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct body
        body_content = self._serialize.body(body, 'BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel')

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [201]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 201:
            deserialized = self._deserialize('SalesOrder', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    post_sales_order.metadata = {'url': '/companies({company_id})/salesOrders'}

    def get_sales_order_by_id(
            self, company_id, sales_order_id, expand=None, select=None, custom_headers=None, raw=False, **operation_config):
        """Retrieve the properties and relationships of an salesOrder object for
        Dynamics 365 Business Central.

        :param company_id: id for company
        :type company_id: str
        :param sales_order_id: id for salesOrder
        :type sales_order_id: str
        :param expand: Entities to expand
        :type expand: list[str]
        :param select: Selected properties to be retrieved
        :type select: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: SalesOrder or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.SalesOrder or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.get_sales_order_by_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'salesOrder_id': self._serialize.url("sales_order_id", sales_order_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('SalesOrder', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_sales_order_by_id.metadata = {'url': '/companies({company_id})/salesOrders({salesOrder_id})'}

    def delete_sales_order_by_id(
            self, company_id, sales_order_id, custom_headers=None, raw=False, **operation_config):
        """Delete an salesOrder in Dynamics 365 Business Central.

        :param company_id: id for company
        :type company_id: str
        :param sales_order_id: id for salesOrder
        :type sales_order_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.delete_sales_order_by_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'salesOrder_id': self._serialize.url("sales_order_id", sales_order_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.delete(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [204]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    delete_sales_order_by_id.metadata = {'url': '/companies({company_id})/salesOrders({salesOrder_id})'}

    def patch_sales_order_by_id(
            self, body, company_id, sales_order_id, custom_headers=None, raw=False, **operation_config):
        """Lets the user patch the specified salesOrder.

        :param body:
        :type body:
         ~azure.mgmt.devtestlabs.models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel
        :param company_id: id for company
        :type company_id: str
        :param sales_order_id: id for salesOrder
        :type sales_order_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: SalesOrder or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.SalesOrder or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.patch_sales_order_by_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'salesOrder_id': self._serialize.url("sales_order_id", sales_order_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        header_parameters['If-Match'] = self._serialize.header("self.config.if_match", self.config.if_match, 'str')
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct body
        body_content = self._serialize.body(body, 'BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel')

        # Construct and send request
        request = self._client.patch(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('SalesOrder', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    patch_sales_order_by_id.metadata = {'url': '/companies({company_id})/salesOrders({salesOrder_id})'}

    def get_sales_order_lines_for_sales_order(
            self, company_id, sales_order_id, expand=None, select=None, custom_headers=None, raw=False, **operation_config):
        """Returns a list of salesOrderLines.

        :param company_id: id for company
        :type company_id: str
        :param sales_order_id: id for salesOrder
        :type sales_order_id: str
        :param expand: Entities to expand
        :type expand: list[str]
        :param select: Selected properties to be retrieved
        :type select: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: GetSalesOrderLinesForSalesOrderOKResponse or
         ClientRawResponse if raw=true
        :rtype:
         ~azure.mgmt.devtestlabs.models.GetSalesOrderLinesForSalesOrderOKResponse
         or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.get_sales_order_lines_for_sales_order.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'salesOrder_id': self._serialize.url("sales_order_id", sales_order_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if self.config.top is not None:
            query_parameters['$top'] = self._serialize.query("self.config.top", self.config.top, 'int')
        if self.config.skip is not None:
            query_parameters['$skip'] = self._serialize.query("self.config.skip", self.config.skip, 'int')
        if self.config.limit is not None:
            query_parameters['$limit'] = self._serialize.query("self.config.limit", self.config.limit, 'int')
        if self.config.filter is not None:
            query_parameters['$filter'] = self._serialize.query("self.config.filter", self.config.filter, 'str')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('GetSalesOrderLinesForSalesOrderOKResponse', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_sales_order_lines_for_sales_order.metadata = {'url': '/companies({company_id})/salesOrders({salesOrder_id})/salesOrderLines'}

    def post_sales_order_line_for_sales_order(
            self, body, company_id, sales_order_id, custom_headers=None, raw=False, **operation_config):
        """Creates a salesOrderLine in Dynamics 365 Business Central.

        :param body:
        :type body:
         ~azure.mgmt.devtestlabs.models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel
        :param company_id: id for company
        :type company_id: str
        :param sales_order_id: id for salesOrder
        :type sales_order_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: SalesOrderLine or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.SalesOrderLine or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.post_sales_order_line_for_sales_order.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'salesOrder_id': self._serialize.url("sales_order_id", sales_order_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct body
        body_content = self._serialize.body(body, 'BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel')

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [201]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 201:
            deserialized = self._deserialize('SalesOrderLine', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    post_sales_order_line_for_sales_order.metadata = {'url': '/companies({company_id})/salesOrders({salesOrder_id})/salesOrderLines'}

    def get_sales_order_line_for_sales_order_by_id(
            self, company_id, sales_order_id, sales_order_line_id, expand=None, select=None, custom_headers=None, raw=False, **operation_config):
        """Retrieve the properties and relationships of an salesOrderLine object
        for Dynamics 365 Business Central.

        :param company_id: id for company
        :type company_id: str
        :param sales_order_id: id for salesOrder
        :type sales_order_id: str
        :param sales_order_line_id: id for salesOrderLine
        :type sales_order_line_id: str
        :param expand: Entities to expand
        :type expand: list[str]
        :param select: Selected properties to be retrieved
        :type select: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: SalesOrderLine or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.SalesOrderLine or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.get_sales_order_line_for_sales_order_by_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'salesOrder_id': self._serialize.url("sales_order_id", sales_order_id, 'str'),
            'salesOrderLine_id': self._serialize.url("sales_order_line_id", sales_order_line_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('SalesOrderLine', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_sales_order_line_for_sales_order_by_id.metadata = {'url': '/companies({company_id})/salesOrders({salesOrder_id})/salesOrderLines('{salesOrderLine_id}')'}

    def delete_sales_order_line_for_sales_order_by_id_by_id(
            self, company_id, sales_order_id, sales_order_line_id, custom_headers=None, raw=False, **operation_config):
        """Delete an salesOrderLine in Dynamics 365 Business Central.

        :param company_id: id for company
        :type company_id: str
        :param sales_order_id: id for salesOrder
        :type sales_order_id: str
        :param sales_order_line_id: id for salesOrderLine
        :type sales_order_line_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.delete_sales_order_line_for_sales_order_by_id_by_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'salesOrder_id': self._serialize.url("sales_order_id", sales_order_id, 'str'),
            'salesOrderLine_id': self._serialize.url("sales_order_line_id", sales_order_line_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.delete(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [204]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    delete_sales_order_line_for_sales_order_by_id_by_id.metadata = {'url': '/companies({company_id})/salesOrders({salesOrder_id})/salesOrderLines('{salesOrderLine_id}')'}

    def patch_sales_order_line_for_sales_order_by_id_by_id(
            self, body, company_id, sales_order_id, sales_order_line_id, custom_headers=None, raw=False, **operation_config):
        """Lets the user patch the specified salesOrderLine.

        :param body:
        :type body:
         ~azure.mgmt.devtestlabs.models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel
        :param company_id: id for company
        :type company_id: str
        :param sales_order_id: id for salesOrder
        :type sales_order_id: str
        :param sales_order_line_id: id for salesOrderLine
        :type sales_order_line_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: SalesOrderLine or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.SalesOrderLine or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.patch_sales_order_line_for_sales_order_by_id_by_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'salesOrder_id': self._serialize.url("sales_order_id", sales_order_id, 'str'),
            'salesOrderLine_id': self._serialize.url("sales_order_line_id", sales_order_line_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        header_parameters['If-Match'] = self._serialize.header("self.config.if_match", self.config.if_match, 'str')
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct body
        body_content = self._serialize.body(body, 'BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel')

        # Construct and send request
        request = self._client.patch(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('SalesOrderLine', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    patch_sales_order_line_for_sales_order_by_id_by_id.metadata = {'url': '/companies({company_id})/salesOrders({salesOrder_id})/salesOrderLines('{salesOrderLine_id}')'}

    def get_sales_order_lines(
            self, company_id, expand=None, select=None, custom_headers=None, raw=False, **operation_config):
        """Returns a list of salesOrderLines.

        :param company_id: id for company
        :type company_id: str
        :param expand: Entities to expand
        :type expand: list[str]
        :param select: Selected properties to be retrieved
        :type select: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: GetSalesOrderLinesOKResponse or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.GetSalesOrderLinesOKResponse or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.get_sales_order_lines.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if self.config.top is not None:
            query_parameters['$top'] = self._serialize.query("self.config.top", self.config.top, 'int')
        if self.config.skip is not None:
            query_parameters['$skip'] = self._serialize.query("self.config.skip", self.config.skip, 'int')
        if self.config.limit is not None:
            query_parameters['$limit'] = self._serialize.query("self.config.limit", self.config.limit, 'int')
        if self.config.filter is not None:
            query_parameters['$filter'] = self._serialize.query("self.config.filter", self.config.filter, 'str')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('GetSalesOrderLinesOKResponse', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_sales_order_lines.metadata = {'url': '/companies({company_id})/salesOrderLines'}

    def post_sales_order_line(
            self, body, company_id, custom_headers=None, raw=False, **operation_config):
        """Creates a salesOrderLine in Dynamics 365 Business Central.

        :param body:
        :type body:
         ~azure.mgmt.devtestlabs.models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel
        :param company_id: id for company
        :type company_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: SalesOrderLine or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.SalesOrderLine or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.post_sales_order_line.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct body
        body_content = self._serialize.body(body, 'BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel')

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [201]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 201:
            deserialized = self._deserialize('SalesOrderLine', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    post_sales_order_line.metadata = {'url': '/companies({company_id})/salesOrderLines'}

    def get_sales_order_line_by_id(
            self, company_id, sales_order_line_id, expand=None, select=None, custom_headers=None, raw=False, **operation_config):
        """Retrieve the properties and relationships of an salesOrderLine object
        for Dynamics 365 Business Central.

        :param company_id: id for company
        :type company_id: str
        :param sales_order_line_id: id for salesOrderLine
        :type sales_order_line_id: str
        :param expand: Entities to expand
        :type expand: list[str]
        :param select: Selected properties to be retrieved
        :type select: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: SalesOrderLine or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.SalesOrderLine or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.get_sales_order_line_by_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'salesOrderLine_id': self._serialize.url("sales_order_line_id", sales_order_line_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('SalesOrderLine', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_sales_order_line_by_id.metadata = {'url': '/companies({company_id})/salesOrderLines('{salesOrderLine_id}')'}

    def delete_sales_order_line_by_id(
            self, company_id, sales_order_line_id, custom_headers=None, raw=False, **operation_config):
        """Delete an salesOrderLine in Dynamics 365 Business Central.

        :param company_id: id for company
        :type company_id: str
        :param sales_order_line_id: id for salesOrderLine
        :type sales_order_line_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.delete_sales_order_line_by_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'salesOrderLine_id': self._serialize.url("sales_order_line_id", sales_order_line_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.delete(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [204]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    delete_sales_order_line_by_id.metadata = {'url': '/companies({company_id})/salesOrderLines('{salesOrderLine_id}')'}

    def patch_sales_order_line_by_id(
            self, body, company_id, sales_order_line_id, custom_headers=None, raw=False, **operation_config):
        """Lets the user patch the specified salesOrderLine.

        :param body:
        :type body:
         ~azure.mgmt.devtestlabs.models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel
        :param company_id: id for company
        :type company_id: str
        :param sales_order_line_id: id for salesOrderLine
        :type sales_order_line_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: SalesOrderLine or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.SalesOrderLine or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.patch_sales_order_line_by_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'salesOrderLine_id': self._serialize.url("sales_order_line_id", sales_order_line_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        header_parameters['If-Match'] = self._serialize.header("self.config.if_match", self.config.if_match, 'str')
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct body
        body_content = self._serialize.body(body, 'BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel')

        # Construct and send request
        request = self._client.patch(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('SalesOrderLine', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    patch_sales_order_line_by_id.metadata = {'url': '/companies({company_id})/salesOrderLines('{salesOrderLine_id}')'}

    def get_retained_earnings_statement(
            self, company_id, select=None, custom_headers=None, raw=False, **operation_config):
        """Returns a list of retainedEarningsStatement.

        :param company_id: id for company
        :type company_id: str
        :param select: Selected properties to be retrieved
        :type select: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: GetRetainedEarningsStatementOKResponse or ClientRawResponse
         if raw=true
        :rtype:
         ~azure.mgmt.devtestlabs.models.GetRetainedEarningsStatementOKResponse
         or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.get_retained_earnings_statement.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if self.config.top is not None:
            query_parameters['$top'] = self._serialize.query("self.config.top", self.config.top, 'int')
        if self.config.skip is not None:
            query_parameters['$skip'] = self._serialize.query("self.config.skip", self.config.skip, 'int')
        if self.config.limit is not None:
            query_parameters['$limit'] = self._serialize.query("self.config.limit", self.config.limit, 'int')
        if self.config.filter is not None:
            query_parameters['$filter'] = self._serialize.query("self.config.filter", self.config.filter, 'str')
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('GetRetainedEarningsStatementOKResponse', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_retained_earnings_statement.metadata = {'url': '/companies({company_id})/retainedEarningsStatement'}

    def get_retained_earnings_statement_by_line_number(
            self, company_id, retained_earnings_statement_line_number, select=None, custom_headers=None, raw=False, **operation_config):
        """Retrieve the properties and relationships of an
        retainedEarningsStatement object for Dynamics 365 Business Central.

        :param company_id: id for company
        :type company_id: str
        :param retained_earnings_statement_line_number: lineNumber for
         retainedEarningsStatement
        :type retained_earnings_statement_line_number: int
        :param select: Selected properties to be retrieved
        :type select: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: RetainedEarningsStatement or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.RetainedEarningsStatement or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.get_retained_earnings_statement_by_line_number.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'retainedEarningsStatement_lineNumber': self._serialize.url("retained_earnings_statement_line_number", retained_earnings_statement_line_number, 'int')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('RetainedEarningsStatement', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_retained_earnings_statement_by_line_number.metadata = {'url': '/companies({company_id})/retainedEarningsStatement({retainedEarningsStatement_lineNumber})'}

    def get_units_of_measure(
            self, company_id, select=None, custom_headers=None, raw=False, **operation_config):
        """Returns a list of unitsOfMeasure.

        :param company_id: id for company
        :type company_id: str
        :param select: Selected properties to be retrieved
        :type select: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: GetUnitsOfMeasureOKResponse or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.GetUnitsOfMeasureOKResponse or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.get_units_of_measure.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if self.config.top is not None:
            query_parameters['$top'] = self._serialize.query("self.config.top", self.config.top, 'int')
        if self.config.skip is not None:
            query_parameters['$skip'] = self._serialize.query("self.config.skip", self.config.skip, 'int')
        if self.config.limit is not None:
            query_parameters['$limit'] = self._serialize.query("self.config.limit", self.config.limit, 'int')
        if self.config.filter is not None:
            query_parameters['$filter'] = self._serialize.query("self.config.filter", self.config.filter, 'str')
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('GetUnitsOfMeasureOKResponse', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_units_of_measure.metadata = {'url': '/companies({company_id})/unitsOfMeasure'}

    def post_unit_of_measure(
            self, body, company_id, custom_headers=None, raw=False, **operation_config):
        """Creates a unitOfMeasure in Dynamics 365 Business Central.

        :param body:
        :type body:
         ~azure.mgmt.devtestlabs.models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel
        :param company_id: id for company
        :type company_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: UnitOfMeasure or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.UnitOfMeasure or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.post_unit_of_measure.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct body
        body_content = self._serialize.body(body, 'BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel')

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [201]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 201:
            deserialized = self._deserialize('UnitOfMeasure', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    post_unit_of_measure.metadata = {'url': '/companies({company_id})/unitsOfMeasure'}

    def get_unit_of_measure_by_id(
            self, company_id, unit_of_measure_id, select=None, custom_headers=None, raw=False, **operation_config):
        """Retrieve the properties and relationships of an unitOfMeasure object
        for Dynamics 365 Business Central.

        :param company_id: id for company
        :type company_id: str
        :param unit_of_measure_id: id for unitOfMeasure
        :type unit_of_measure_id: str
        :param select: Selected properties to be retrieved
        :type select: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: UnitOfMeasure or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.UnitOfMeasure or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.get_unit_of_measure_by_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'unitOfMeasure_id': self._serialize.url("unit_of_measure_id", unit_of_measure_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('UnitOfMeasure', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_unit_of_measure_by_id.metadata = {'url': '/companies({company_id})/unitsOfMeasure({unitOfMeasure_id})'}

    def delete_unit_of_measure_by_id(
            self, company_id, unit_of_measure_id, custom_headers=None, raw=False, **operation_config):
        """Delete an unitOfMeasure in Dynamics 365 Business Central.

        :param company_id: id for company
        :type company_id: str
        :param unit_of_measure_id: id for unitOfMeasure
        :type unit_of_measure_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.delete_unit_of_measure_by_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'unitOfMeasure_id': self._serialize.url("unit_of_measure_id", unit_of_measure_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.delete(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [204]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    delete_unit_of_measure_by_id.metadata = {'url': '/companies({company_id})/unitsOfMeasure({unitOfMeasure_id})'}

    def patch_unit_of_measure_by_id(
            self, body, company_id, unit_of_measure_id, custom_headers=None, raw=False, **operation_config):
        """Lets the user patch the specified unitOfMeasure.

        :param body:
        :type body:
         ~azure.mgmt.devtestlabs.models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel
        :param company_id: id for company
        :type company_id: str
        :param unit_of_measure_id: id for unitOfMeasure
        :type unit_of_measure_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: UnitOfMeasure or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.UnitOfMeasure or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.patch_unit_of_measure_by_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'unitOfMeasure_id': self._serialize.url("unit_of_measure_id", unit_of_measure_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        header_parameters['If-Match'] = self._serialize.header("self.config.if_match", self.config.if_match, 'str')
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct body
        body_content = self._serialize.body(body, 'BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel')

        # Construct and send request
        request = self._client.patch(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('UnitOfMeasure', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    patch_unit_of_measure_by_id.metadata = {'url': '/companies({company_id})/unitsOfMeasure({unitOfMeasure_id})'}

    def get_aged_accounts_receivable(
            self, company_id, select=None, custom_headers=None, raw=False, **operation_config):
        """Returns a list of agedAccountsReceivable.

        :param company_id: id for company
        :type company_id: str
        :param select: Selected properties to be retrieved
        :type select: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: GetAgedAccountsReceivableOKResponse or ClientRawResponse if
         raw=true
        :rtype:
         ~azure.mgmt.devtestlabs.models.GetAgedAccountsReceivableOKResponse or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.get_aged_accounts_receivable.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if self.config.top is not None:
            query_parameters['$top'] = self._serialize.query("self.config.top", self.config.top, 'int')
        if self.config.skip is not None:
            query_parameters['$skip'] = self._serialize.query("self.config.skip", self.config.skip, 'int')
        if self.config.limit is not None:
            query_parameters['$limit'] = self._serialize.query("self.config.limit", self.config.limit, 'int')
        if self.config.filter is not None:
            query_parameters['$filter'] = self._serialize.query("self.config.filter", self.config.filter, 'str')
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('GetAgedAccountsReceivableOKResponse', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_aged_accounts_receivable.metadata = {'url': '/companies({company_id})/agedAccountsReceivable'}

    def get_aged_accounts_receivable_by_customer_id(
            self, company_id, aged_accounts_receivable_customer_id, select=None, custom_headers=None, raw=False, **operation_config):
        """Retrieve the properties and relationships of an agedAccountsReceivable
        object for Dynamics 365 Business Central.

        :param company_id: id for company
        :type company_id: str
        :param aged_accounts_receivable_customer_id: customerId for
         agedAccountsReceivable
        :type aged_accounts_receivable_customer_id: str
        :param select: Selected properties to be retrieved
        :type select: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: AgedAccountsReceivable or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.AgedAccountsReceivable or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.get_aged_accounts_receivable_by_customer_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'agedAccountsReceivable_customerId': self._serialize.url("aged_accounts_receivable_customer_id", aged_accounts_receivable_customer_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('AgedAccountsReceivable', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_aged_accounts_receivable_by_customer_id.metadata = {'url': '/companies({company_id})/agedAccountsReceivable({agedAccountsReceivable_customerId})'}

    def get_aged_accounts_payable(
            self, company_id, select=None, custom_headers=None, raw=False, **operation_config):
        """Returns a list of agedAccountsPayable.

        :param company_id: id for company
        :type company_id: str
        :param select: Selected properties to be retrieved
        :type select: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: GetAgedAccountsPayableOKResponse or ClientRawResponse if
         raw=true
        :rtype:
         ~azure.mgmt.devtestlabs.models.GetAgedAccountsPayableOKResponse or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.get_aged_accounts_payable.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if self.config.top is not None:
            query_parameters['$top'] = self._serialize.query("self.config.top", self.config.top, 'int')
        if self.config.skip is not None:
            query_parameters['$skip'] = self._serialize.query("self.config.skip", self.config.skip, 'int')
        if self.config.limit is not None:
            query_parameters['$limit'] = self._serialize.query("self.config.limit", self.config.limit, 'int')
        if self.config.filter is not None:
            query_parameters['$filter'] = self._serialize.query("self.config.filter", self.config.filter, 'str')
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('GetAgedAccountsPayableOKResponse', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_aged_accounts_payable.metadata = {'url': '/companies({company_id})/agedAccountsPayable'}

    def get_aged_accounts_payable_by_vendor_id(
            self, company_id, aged_accounts_payable_vendor_id, select=None, custom_headers=None, raw=False, **operation_config):
        """Retrieve the properties and relationships of an agedAccountsPayable
        object for Dynamics 365 Business Central.

        :param company_id: id for company
        :type company_id: str
        :param aged_accounts_payable_vendor_id: vendorId for
         agedAccountsPayable
        :type aged_accounts_payable_vendor_id: str
        :param select: Selected properties to be retrieved
        :type select: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: AgedAccountsPayable or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.AgedAccountsPayable or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.get_aged_accounts_payable_by_vendor_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'agedAccountsPayable_vendorId': self._serialize.url("aged_accounts_payable_vendor_id", aged_accounts_payable_vendor_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('AgedAccountsPayable', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_aged_accounts_payable_by_vendor_id.metadata = {'url': '/companies({company_id})/agedAccountsPayable({agedAccountsPayable_vendorId})'}

    def get_balance_sheet(
            self, company_id, select=None, custom_headers=None, raw=False, **operation_config):
        """Returns a list of balanceSheet.

        :param company_id: id for company
        :type company_id: str
        :param select: Selected properties to be retrieved
        :type select: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: GetBalanceSheetOKResponse or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.GetBalanceSheetOKResponse or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.get_balance_sheet.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if self.config.top is not None:
            query_parameters['$top'] = self._serialize.query("self.config.top", self.config.top, 'int')
        if self.config.skip is not None:
            query_parameters['$skip'] = self._serialize.query("self.config.skip", self.config.skip, 'int')
        if self.config.limit is not None:
            query_parameters['$limit'] = self._serialize.query("self.config.limit", self.config.limit, 'int')
        if self.config.filter is not None:
            query_parameters['$filter'] = self._serialize.query("self.config.filter", self.config.filter, 'str')
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('GetBalanceSheetOKResponse', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_balance_sheet.metadata = {'url': '/companies({company_id})/balanceSheet'}

    def get_balance_sheet_by_line_number(
            self, company_id, balance_sheet_line_number, select=None, custom_headers=None, raw=False, **operation_config):
        """Retrieve the properties and relationships of an balanceSheet object for
        Dynamics 365 Business Central.

        :param company_id: id for company
        :type company_id: str
        :param balance_sheet_line_number: lineNumber for balanceSheet
        :type balance_sheet_line_number: int
        :param select: Selected properties to be retrieved
        :type select: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: BalanceSheet or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.BalanceSheet or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.get_balance_sheet_by_line_number.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'balanceSheet_lineNumber': self._serialize.url("balance_sheet_line_number", balance_sheet_line_number, 'int')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('BalanceSheet', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_balance_sheet_by_line_number.metadata = {'url': '/companies({company_id})/balanceSheet({balanceSheet_lineNumber})'}

    def get_trial_balance(
            self, company_id, expand=None, select=None, custom_headers=None, raw=False, **operation_config):
        """Returns a list of trialBalance.

        :param company_id: id for company
        :type company_id: str
        :param expand: Entities to expand
        :type expand: list[str]
        :param select: Selected properties to be retrieved
        :type select: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: GetTrialBalanceOKResponse or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.GetTrialBalanceOKResponse or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.get_trial_balance.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if self.config.top is not None:
            query_parameters['$top'] = self._serialize.query("self.config.top", self.config.top, 'int')
        if self.config.skip is not None:
            query_parameters['$skip'] = self._serialize.query("self.config.skip", self.config.skip, 'int')
        if self.config.limit is not None:
            query_parameters['$limit'] = self._serialize.query("self.config.limit", self.config.limit, 'int')
        if self.config.filter is not None:
            query_parameters['$filter'] = self._serialize.query("self.config.filter", self.config.filter, 'str')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('GetTrialBalanceOKResponse', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_trial_balance.metadata = {'url': '/companies({company_id})/trialBalance'}

    def get_trial_balance_by_number(
            self, company_id, trial_balance_number, expand=None, select=None, custom_headers=None, raw=False, **operation_config):
        """Retrieve the properties and relationships of an trialBalance object for
        Dynamics 365 Business Central.

        :param company_id: id for company
        :type company_id: str
        :param trial_balance_number: number for trialBalance
        :type trial_balance_number: str
        :param expand: Entities to expand
        :type expand: list[str]
        :param select: Selected properties to be retrieved
        :type select: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: TrialBalance or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.TrialBalance or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.get_trial_balance_by_number.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'trialBalance_number': self._serialize.url("trial_balance_number", trial_balance_number, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('TrialBalance', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_trial_balance_by_number.metadata = {'url': '/companies({company_id})/trialBalance('{trialBalance_number}')'}

    def get_income_statement(
            self, company_id, select=None, custom_headers=None, raw=False, **operation_config):
        """Returns a list of incomeStatement.

        :param company_id: id for company
        :type company_id: str
        :param select: Selected properties to be retrieved
        :type select: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: GetIncomeStatementOKResponse or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.GetIncomeStatementOKResponse or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.get_income_statement.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if self.config.top is not None:
            query_parameters['$top'] = self._serialize.query("self.config.top", self.config.top, 'int')
        if self.config.skip is not None:
            query_parameters['$skip'] = self._serialize.query("self.config.skip", self.config.skip, 'int')
        if self.config.limit is not None:
            query_parameters['$limit'] = self._serialize.query("self.config.limit", self.config.limit, 'int')
        if self.config.filter is not None:
            query_parameters['$filter'] = self._serialize.query("self.config.filter", self.config.filter, 'str')
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('GetIncomeStatementOKResponse', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_income_statement.metadata = {'url': '/companies({company_id})/incomeStatement'}

    def get_income_statement_by_line_number(
            self, company_id, income_statement_line_number, select=None, custom_headers=None, raw=False, **operation_config):
        """Retrieve the properties and relationships of an incomeStatement object
        for Dynamics 365 Business Central.

        :param company_id: id for company
        :type company_id: str
        :param income_statement_line_number: lineNumber for incomeStatement
        :type income_statement_line_number: int
        :param select: Selected properties to be retrieved
        :type select: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: IncomeStatement or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.IncomeStatement or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.get_income_statement_by_line_number.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'incomeStatement_lineNumber': self._serialize.url("income_statement_line_number", income_statement_line_number, 'int')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('IncomeStatement', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_income_statement_by_line_number.metadata = {'url': '/companies({company_id})/incomeStatement({incomeStatement_lineNumber})'}

    def get_tax_areas(
            self, company_id, select=None, custom_headers=None, raw=False, **operation_config):
        """Returns a list of taxAreas.

        :param company_id: id for company
        :type company_id: str
        :param select: Selected properties to be retrieved
        :type select: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: GetTaxAreasOKResponse or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.GetTaxAreasOKResponse or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.get_tax_areas.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if self.config.top is not None:
            query_parameters['$top'] = self._serialize.query("self.config.top", self.config.top, 'int')
        if self.config.skip is not None:
            query_parameters['$skip'] = self._serialize.query("self.config.skip", self.config.skip, 'int')
        if self.config.limit is not None:
            query_parameters['$limit'] = self._serialize.query("self.config.limit", self.config.limit, 'int')
        if self.config.filter is not None:
            query_parameters['$filter'] = self._serialize.query("self.config.filter", self.config.filter, 'str')
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('GetTaxAreasOKResponse', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_tax_areas.metadata = {'url': '/companies({company_id})/taxAreas'}

    def post_tax_area(
            self, body, company_id, custom_headers=None, raw=False, **operation_config):
        """Creates a taxArea in Dynamics 365 Business Central.

        :param body:
        :type body:
         ~azure.mgmt.devtestlabs.models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel
        :param company_id: id for company
        :type company_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: TaxArea or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.TaxArea or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.post_tax_area.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct body
        body_content = self._serialize.body(body, 'BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel')

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [201]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 201:
            deserialized = self._deserialize('TaxArea', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    post_tax_area.metadata = {'url': '/companies({company_id})/taxAreas'}

    def get_tax_area_by_id(
            self, company_id, tax_area_id, select=None, custom_headers=None, raw=False, **operation_config):
        """Retrieve the properties and relationships of an taxArea object for
        Dynamics 365 Business Central.

        :param company_id: id for company
        :type company_id: str
        :param tax_area_id: id for taxArea
        :type tax_area_id: str
        :param select: Selected properties to be retrieved
        :type select: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: TaxArea or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.TaxArea or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.get_tax_area_by_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'taxArea_id': self._serialize.url("tax_area_id", tax_area_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('TaxArea', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_tax_area_by_id.metadata = {'url': '/companies({company_id})/taxAreas({taxArea_id})'}

    def delete_tax_area_by_id(
            self, company_id, tax_area_id, custom_headers=None, raw=False, **operation_config):
        """Delete an taxArea in Dynamics 365 Business Central.

        :param company_id: id for company
        :type company_id: str
        :param tax_area_id: id for taxArea
        :type tax_area_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.delete_tax_area_by_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'taxArea_id': self._serialize.url("tax_area_id", tax_area_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.delete(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [204]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    delete_tax_area_by_id.metadata = {'url': '/companies({company_id})/taxAreas({taxArea_id})'}

    def patch_tax_area_by_id(
            self, body, company_id, tax_area_id, custom_headers=None, raw=False, **operation_config):
        """Lets the user patch the specified taxArea.

        :param body:
        :type body:
         ~azure.mgmt.devtestlabs.models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel
        :param company_id: id for company
        :type company_id: str
        :param tax_area_id: id for taxArea
        :type tax_area_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: TaxArea or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.TaxArea or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.patch_tax_area_by_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'taxArea_id': self._serialize.url("tax_area_id", tax_area_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        header_parameters['If-Match'] = self._serialize.header("self.config.if_match", self.config.if_match, 'str')
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct body
        body_content = self._serialize.body(body, 'BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel')

        # Construct and send request
        request = self._client.patch(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('TaxArea', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    patch_tax_area_by_id.metadata = {'url': '/companies({company_id})/taxAreas({taxArea_id})'}

    def get_sales_quotes(
            self, company_id, expand=None, select=None, custom_headers=None, raw=False, **operation_config):
        """Returns a list of salesQuotes.

        :param company_id: id for company
        :type company_id: str
        :param expand: Entities to expand
        :type expand: list[str]
        :param select: Selected properties to be retrieved
        :type select: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: GetSalesQuotesOKResponse or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.GetSalesQuotesOKResponse or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.get_sales_quotes.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if self.config.top is not None:
            query_parameters['$top'] = self._serialize.query("self.config.top", self.config.top, 'int')
        if self.config.skip is not None:
            query_parameters['$skip'] = self._serialize.query("self.config.skip", self.config.skip, 'int')
        if self.config.limit is not None:
            query_parameters['$limit'] = self._serialize.query("self.config.limit", self.config.limit, 'int')
        if self.config.filter is not None:
            query_parameters['$filter'] = self._serialize.query("self.config.filter", self.config.filter, 'str')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('GetSalesQuotesOKResponse', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_sales_quotes.metadata = {'url': '/companies({company_id})/salesQuotes'}

    def post_sales_quote(
            self, body, company_id, custom_headers=None, raw=False, **operation_config):
        """Creates a salesQuote in Dynamics 365 Business Central.

        :param body:
        :type body:
         ~azure.mgmt.devtestlabs.models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel
        :param company_id: id for company
        :type company_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: SalesQuote or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.SalesQuote or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.post_sales_quote.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct body
        body_content = self._serialize.body(body, 'BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel')

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [201]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 201:
            deserialized = self._deserialize('SalesQuote', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    post_sales_quote.metadata = {'url': '/companies({company_id})/salesQuotes'}

    def get_sales_quote_by_id(
            self, company_id, sales_quote_id, expand=None, select=None, custom_headers=None, raw=False, **operation_config):
        """Retrieve the properties and relationships of an salesQuote object for
        Dynamics 365 Business Central.

        :param company_id: id for company
        :type company_id: str
        :param sales_quote_id: id for salesQuote
        :type sales_quote_id: str
        :param expand: Entities to expand
        :type expand: list[str]
        :param select: Selected properties to be retrieved
        :type select: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: SalesQuote or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.SalesQuote or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.get_sales_quote_by_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'salesQuote_id': self._serialize.url("sales_quote_id", sales_quote_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('SalesQuote', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_sales_quote_by_id.metadata = {'url': '/companies({company_id})/salesQuotes({salesQuote_id})'}

    def delete_sales_quote_by_id(
            self, company_id, sales_quote_id, custom_headers=None, raw=False, **operation_config):
        """Delete an salesQuote in Dynamics 365 Business Central.

        :param company_id: id for company
        :type company_id: str
        :param sales_quote_id: id for salesQuote
        :type sales_quote_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.delete_sales_quote_by_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'salesQuote_id': self._serialize.url("sales_quote_id", sales_quote_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.delete(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [204]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    delete_sales_quote_by_id.metadata = {'url': '/companies({company_id})/salesQuotes({salesQuote_id})'}

    def patch_sales_quote_by_id(
            self, body, company_id, sales_quote_id, custom_headers=None, raw=False, **operation_config):
        """Lets the user patch the specified salesQuote.

        :param body:
        :type body:
         ~azure.mgmt.devtestlabs.models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel
        :param company_id: id for company
        :type company_id: str
        :param sales_quote_id: id for salesQuote
        :type sales_quote_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: SalesQuote or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.SalesQuote or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.patch_sales_quote_by_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'salesQuote_id': self._serialize.url("sales_quote_id", sales_quote_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        header_parameters['If-Match'] = self._serialize.header("self.config.if_match", self.config.if_match, 'str')
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct body
        body_content = self._serialize.body(body, 'BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel')

        # Construct and send request
        request = self._client.patch(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('SalesQuote', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    patch_sales_quote_by_id.metadata = {'url': '/companies({company_id})/salesQuotes({salesQuote_id})'}

    def make_invoice_action_sales_quotes(
            self, company_id, sales_quote_id, custom_headers=None, raw=False, **operation_config):
        """Performs the makeInvoice action for salesQuotes entity.

        :param company_id: id for company
        :type company_id: str
        :param sales_quote_id: id for salesQuote
        :type sales_quote_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.make_invoice_action_sales_quotes.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'salesQuote_id': self._serialize.url("sales_quote_id", sales_quote_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [204]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    make_invoice_action_sales_quotes.metadata = {'url': '/companies({company_id})/salesQuotes({salesQuote_id})/Microsoft.NAV.makeInvoice'}

    def send_action_sales_quotes(
            self, company_id, sales_quote_id, custom_headers=None, raw=False, **operation_config):
        """Performs the send action for salesQuotes entity.

        :param company_id: id for company
        :type company_id: str
        :param sales_quote_id: id for salesQuote
        :type sales_quote_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.send_action_sales_quotes.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'salesQuote_id': self._serialize.url("sales_quote_id", sales_quote_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [204]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    send_action_sales_quotes.metadata = {'url': '/companies({company_id})/salesQuotes({salesQuote_id})/Microsoft.NAV.send'}

    def get_sales_quote_lines_for_sales_quote(
            self, company_id, sales_quote_id, expand=None, select=None, custom_headers=None, raw=False, **operation_config):
        """Returns a list of salesQuoteLines.

        :param company_id: id for company
        :type company_id: str
        :param sales_quote_id: id for salesQuote
        :type sales_quote_id: str
        :param expand: Entities to expand
        :type expand: list[str]
        :param select: Selected properties to be retrieved
        :type select: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: GetSalesQuoteLinesForSalesQuoteOKResponse or
         ClientRawResponse if raw=true
        :rtype:
         ~azure.mgmt.devtestlabs.models.GetSalesQuoteLinesForSalesQuoteOKResponse
         or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.get_sales_quote_lines_for_sales_quote.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'salesQuote_id': self._serialize.url("sales_quote_id", sales_quote_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if self.config.top is not None:
            query_parameters['$top'] = self._serialize.query("self.config.top", self.config.top, 'int')
        if self.config.skip is not None:
            query_parameters['$skip'] = self._serialize.query("self.config.skip", self.config.skip, 'int')
        if self.config.limit is not None:
            query_parameters['$limit'] = self._serialize.query("self.config.limit", self.config.limit, 'int')
        if self.config.filter is not None:
            query_parameters['$filter'] = self._serialize.query("self.config.filter", self.config.filter, 'str')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('GetSalesQuoteLinesForSalesQuoteOKResponse', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_sales_quote_lines_for_sales_quote.metadata = {'url': '/companies({company_id})/salesQuotes({salesQuote_id})/salesQuoteLines'}

    def post_sales_quote_line_for_sales_quote(
            self, body, company_id, sales_quote_id, custom_headers=None, raw=False, **operation_config):
        """Creates a salesQuoteLine in Dynamics 365 Business Central.

        :param body:
        :type body:
         ~azure.mgmt.devtestlabs.models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel
        :param company_id: id for company
        :type company_id: str
        :param sales_quote_id: id for salesQuote
        :type sales_quote_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: SalesQuoteLine or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.SalesQuoteLine or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.post_sales_quote_line_for_sales_quote.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'salesQuote_id': self._serialize.url("sales_quote_id", sales_quote_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct body
        body_content = self._serialize.body(body, 'BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel')

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [201]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 201:
            deserialized = self._deserialize('SalesQuoteLine', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    post_sales_quote_line_for_sales_quote.metadata = {'url': '/companies({company_id})/salesQuotes({salesQuote_id})/salesQuoteLines'}

    def get_sales_quote_line_for_sales_quote_by_id(
            self, company_id, sales_quote_id, sales_quote_line_id, expand=None, select=None, custom_headers=None, raw=False, **operation_config):
        """Retrieve the properties and relationships of an salesQuoteLine object
        for Dynamics 365 Business Central.

        :param company_id: id for company
        :type company_id: str
        :param sales_quote_id: id for salesQuote
        :type sales_quote_id: str
        :param sales_quote_line_id: id for salesQuoteLine
        :type sales_quote_line_id: str
        :param expand: Entities to expand
        :type expand: list[str]
        :param select: Selected properties to be retrieved
        :type select: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: SalesQuoteLine or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.SalesQuoteLine or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.get_sales_quote_line_for_sales_quote_by_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'salesQuote_id': self._serialize.url("sales_quote_id", sales_quote_id, 'str'),
            'salesQuoteLine_id': self._serialize.url("sales_quote_line_id", sales_quote_line_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('SalesQuoteLine', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_sales_quote_line_for_sales_quote_by_id.metadata = {'url': '/companies({company_id})/salesQuotes({salesQuote_id})/salesQuoteLines('{salesQuoteLine_id}')'}

    def delete_sales_quote_line_for_sales_quote_by_id_by_id(
            self, company_id, sales_quote_id, sales_quote_line_id, custom_headers=None, raw=False, **operation_config):
        """Delete an salesQuoteLine in Dynamics 365 Business Central.

        :param company_id: id for company
        :type company_id: str
        :param sales_quote_id: id for salesQuote
        :type sales_quote_id: str
        :param sales_quote_line_id: id for salesQuoteLine
        :type sales_quote_line_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.delete_sales_quote_line_for_sales_quote_by_id_by_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'salesQuote_id': self._serialize.url("sales_quote_id", sales_quote_id, 'str'),
            'salesQuoteLine_id': self._serialize.url("sales_quote_line_id", sales_quote_line_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.delete(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [204]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    delete_sales_quote_line_for_sales_quote_by_id_by_id.metadata = {'url': '/companies({company_id})/salesQuotes({salesQuote_id})/salesQuoteLines('{salesQuoteLine_id}')'}

    def patch_sales_quote_line_for_sales_quote_by_id_by_id(
            self, body, company_id, sales_quote_id, sales_quote_line_id, custom_headers=None, raw=False, **operation_config):
        """Lets the user patch the specified salesQuoteLine.

        :param body:
        :type body:
         ~azure.mgmt.devtestlabs.models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel
        :param company_id: id for company
        :type company_id: str
        :param sales_quote_id: id for salesQuote
        :type sales_quote_id: str
        :param sales_quote_line_id: id for salesQuoteLine
        :type sales_quote_line_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: SalesQuoteLine or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.SalesQuoteLine or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.patch_sales_quote_line_for_sales_quote_by_id_by_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'salesQuote_id': self._serialize.url("sales_quote_id", sales_quote_id, 'str'),
            'salesQuoteLine_id': self._serialize.url("sales_quote_line_id", sales_quote_line_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        header_parameters['If-Match'] = self._serialize.header("self.config.if_match", self.config.if_match, 'str')
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct body
        body_content = self._serialize.body(body, 'BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel')

        # Construct and send request
        request = self._client.patch(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('SalesQuoteLine', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    patch_sales_quote_line_for_sales_quote_by_id_by_id.metadata = {'url': '/companies({company_id})/salesQuotes({salesQuote_id})/salesQuoteLines('{salesQuoteLine_id}')'}

    def get_pdf_document_for_sales_quote(
            self, company_id, sales_quote_id, select=None, custom_headers=None, raw=False, **operation_config):
        """Returns a list of pdfDocument.

        :param company_id: id for company
        :type company_id: str
        :param sales_quote_id: id for salesQuote
        :type sales_quote_id: str
        :param select: Selected properties to be retrieved
        :type select: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: GetPdfDocumentForSalesQuoteOKResponse or ClientRawResponse if
         raw=true
        :rtype:
         ~azure.mgmt.devtestlabs.models.GetPdfDocumentForSalesQuoteOKResponse
         or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.get_pdf_document_for_sales_quote.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'salesQuote_id': self._serialize.url("sales_quote_id", sales_quote_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if self.config.top is not None:
            query_parameters['$top'] = self._serialize.query("self.config.top", self.config.top, 'int')
        if self.config.skip is not None:
            query_parameters['$skip'] = self._serialize.query("self.config.skip", self.config.skip, 'int')
        if self.config.limit is not None:
            query_parameters['$limit'] = self._serialize.query("self.config.limit", self.config.limit, 'int')
        if self.config.filter is not None:
            query_parameters['$filter'] = self._serialize.query("self.config.filter", self.config.filter, 'str')
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('GetPdfDocumentForSalesQuoteOKResponse', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_pdf_document_for_sales_quote.metadata = {'url': '/companies({company_id})/salesQuotes({salesQuote_id})/pdfDocument'}

    def get_pdf_document_for_sales_quote_by_id(
            self, company_id, sales_quote_id, pdf_document_id, select=None, custom_headers=None, raw=False, **operation_config):
        """Retrieve the properties and relationships of an pdfDocument object for
        Dynamics 365 Business Central.

        :param company_id: id for company
        :type company_id: str
        :param sales_quote_id: id for salesQuote
        :type sales_quote_id: str
        :param pdf_document_id: id for pdfDocument
        :type pdf_document_id: str
        :param select: Selected properties to be retrieved
        :type select: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: PdfDocument or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.PdfDocument or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.get_pdf_document_for_sales_quote_by_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'salesQuote_id': self._serialize.url("sales_quote_id", sales_quote_id, 'str'),
            'pdfDocument_id': self._serialize.url("pdf_document_id", pdf_document_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('PdfDocument', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_pdf_document_for_sales_quote_by_id.metadata = {'url': '/companies({company_id})/salesQuotes({salesQuote_id})/pdfDocument({pdfDocument_id})'}

    def get_sales_quote_lines(
            self, company_id, expand=None, select=None, custom_headers=None, raw=False, **operation_config):
        """Returns a list of salesQuoteLines.

        :param company_id: id for company
        :type company_id: str
        :param expand: Entities to expand
        :type expand: list[str]
        :param select: Selected properties to be retrieved
        :type select: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: GetSalesQuoteLinesOKResponse or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.GetSalesQuoteLinesOKResponse or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.get_sales_quote_lines.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if self.config.top is not None:
            query_parameters['$top'] = self._serialize.query("self.config.top", self.config.top, 'int')
        if self.config.skip is not None:
            query_parameters['$skip'] = self._serialize.query("self.config.skip", self.config.skip, 'int')
        if self.config.limit is not None:
            query_parameters['$limit'] = self._serialize.query("self.config.limit", self.config.limit, 'int')
        if self.config.filter is not None:
            query_parameters['$filter'] = self._serialize.query("self.config.filter", self.config.filter, 'str')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('GetSalesQuoteLinesOKResponse', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_sales_quote_lines.metadata = {'url': '/companies({company_id})/salesQuoteLines'}

    def post_sales_quote_line(
            self, body, company_id, custom_headers=None, raw=False, **operation_config):
        """Creates a salesQuoteLine in Dynamics 365 Business Central.

        :param body:
        :type body:
         ~azure.mgmt.devtestlabs.models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel
        :param company_id: id for company
        :type company_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: SalesQuoteLine or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.SalesQuoteLine or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.post_sales_quote_line.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct body
        body_content = self._serialize.body(body, 'BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel')

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [201]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 201:
            deserialized = self._deserialize('SalesQuoteLine', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    post_sales_quote_line.metadata = {'url': '/companies({company_id})/salesQuoteLines'}

    def get_sales_quote_line_by_id(
            self, company_id, sales_quote_line_id, expand=None, select=None, custom_headers=None, raw=False, **operation_config):
        """Retrieve the properties and relationships of an salesQuoteLine object
        for Dynamics 365 Business Central.

        :param company_id: id for company
        :type company_id: str
        :param sales_quote_line_id: id for salesQuoteLine
        :type sales_quote_line_id: str
        :param expand: Entities to expand
        :type expand: list[str]
        :param select: Selected properties to be retrieved
        :type select: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: SalesQuoteLine or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.SalesQuoteLine or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.get_sales_quote_line_by_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'salesQuoteLine_id': self._serialize.url("sales_quote_line_id", sales_quote_line_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('SalesQuoteLine', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_sales_quote_line_by_id.metadata = {'url': '/companies({company_id})/salesQuoteLines('{salesQuoteLine_id}')'}

    def delete_sales_quote_line_by_id(
            self, company_id, sales_quote_line_id, custom_headers=None, raw=False, **operation_config):
        """Delete an salesQuoteLine in Dynamics 365 Business Central.

        :param company_id: id for company
        :type company_id: str
        :param sales_quote_line_id: id for salesQuoteLine
        :type sales_quote_line_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.delete_sales_quote_line_by_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'salesQuoteLine_id': self._serialize.url("sales_quote_line_id", sales_quote_line_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.delete(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [204]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    delete_sales_quote_line_by_id.metadata = {'url': '/companies({company_id})/salesQuoteLines('{salesQuoteLine_id}')'}

    def patch_sales_quote_line_by_id(
            self, body, company_id, sales_quote_line_id, custom_headers=None, raw=False, **operation_config):
        """Lets the user patch the specified salesQuoteLine.

        :param body:
        :type body:
         ~azure.mgmt.devtestlabs.models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel
        :param company_id: id for company
        :type company_id: str
        :param sales_quote_line_id: id for salesQuoteLine
        :type sales_quote_line_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: SalesQuoteLine or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.SalesQuoteLine or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.patch_sales_quote_line_by_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'salesQuoteLine_id': self._serialize.url("sales_quote_line_id", sales_quote_line_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        header_parameters['If-Match'] = self._serialize.header("self.config.if_match", self.config.if_match, 'str')
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct body
        body_content = self._serialize.body(body, 'BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel')

        # Construct and send request
        request = self._client.patch(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('SalesQuoteLine', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    patch_sales_quote_line_by_id.metadata = {'url': '/companies({company_id})/salesQuoteLines('{salesQuoteLine_id}')'}

    def get_sales_credit_memos(
            self, company_id, expand=None, select=None, custom_headers=None, raw=False, **operation_config):
        """Returns a list of salesCreditMemos.

        :param company_id: id for company
        :type company_id: str
        :param expand: Entities to expand
        :type expand: list[str]
        :param select: Selected properties to be retrieved
        :type select: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: GetSalesCreditMemosOKResponse or ClientRawResponse if
         raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.GetSalesCreditMemosOKResponse
         or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.get_sales_credit_memos.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if self.config.top is not None:
            query_parameters['$top'] = self._serialize.query("self.config.top", self.config.top, 'int')
        if self.config.skip is not None:
            query_parameters['$skip'] = self._serialize.query("self.config.skip", self.config.skip, 'int')
        if self.config.limit is not None:
            query_parameters['$limit'] = self._serialize.query("self.config.limit", self.config.limit, 'int')
        if self.config.filter is not None:
            query_parameters['$filter'] = self._serialize.query("self.config.filter", self.config.filter, 'str')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('GetSalesCreditMemosOKResponse', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_sales_credit_memos.metadata = {'url': '/companies({company_id})/salesCreditMemos'}

    def post_sales_credit_memo(
            self, body, company_id, custom_headers=None, raw=False, **operation_config):
        """Creates a salesCreditMemo in Dynamics 365 Business Central.

        :param body:
        :type body:
         ~azure.mgmt.devtestlabs.models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel
        :param company_id: id for company
        :type company_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: SalesCreditMemo or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.SalesCreditMemo or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.post_sales_credit_memo.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct body
        body_content = self._serialize.body(body, 'BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel')

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [201]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 201:
            deserialized = self._deserialize('SalesCreditMemo', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    post_sales_credit_memo.metadata = {'url': '/companies({company_id})/salesCreditMemos'}

    def get_sales_credit_memo_by_id(
            self, company_id, sales_credit_memo_id, expand=None, select=None, custom_headers=None, raw=False, **operation_config):
        """Retrieve the properties and relationships of an salesCreditMemo object
        for Dynamics 365 Business Central.

        :param company_id: id for company
        :type company_id: str
        :param sales_credit_memo_id: id for salesCreditMemo
        :type sales_credit_memo_id: str
        :param expand: Entities to expand
        :type expand: list[str]
        :param select: Selected properties to be retrieved
        :type select: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: SalesCreditMemo or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.SalesCreditMemo or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.get_sales_credit_memo_by_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'salesCreditMemo_id': self._serialize.url("sales_credit_memo_id", sales_credit_memo_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('SalesCreditMemo', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_sales_credit_memo_by_id.metadata = {'url': '/companies({company_id})/salesCreditMemos({salesCreditMemo_id})'}

    def delete_sales_credit_memo_by_id(
            self, company_id, sales_credit_memo_id, custom_headers=None, raw=False, **operation_config):
        """Delete an salesCreditMemo in Dynamics 365 Business Central.

        :param company_id: id for company
        :type company_id: str
        :param sales_credit_memo_id: id for salesCreditMemo
        :type sales_credit_memo_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.delete_sales_credit_memo_by_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'salesCreditMemo_id': self._serialize.url("sales_credit_memo_id", sales_credit_memo_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.delete(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [204]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    delete_sales_credit_memo_by_id.metadata = {'url': '/companies({company_id})/salesCreditMemos({salesCreditMemo_id})'}

    def patch_sales_credit_memo_by_id(
            self, body, company_id, sales_credit_memo_id, custom_headers=None, raw=False, **operation_config):
        """Lets the user patch the specified salesCreditMemo.

        :param body:
        :type body:
         ~azure.mgmt.devtestlabs.models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel
        :param company_id: id for company
        :type company_id: str
        :param sales_credit_memo_id: id for salesCreditMemo
        :type sales_credit_memo_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: SalesCreditMemo or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.SalesCreditMemo or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.patch_sales_credit_memo_by_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'salesCreditMemo_id': self._serialize.url("sales_credit_memo_id", sales_credit_memo_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        header_parameters['If-Match'] = self._serialize.header("self.config.if_match", self.config.if_match, 'str')
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct body
        body_content = self._serialize.body(body, 'BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel')

        # Construct and send request
        request = self._client.patch(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('SalesCreditMemo', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    patch_sales_credit_memo_by_id.metadata = {'url': '/companies({company_id})/salesCreditMemos({salesCreditMemo_id})'}

    def get_sales_credit_memo_lines_for_sales_credit_memo(
            self, company_id, sales_credit_memo_id, expand=None, select=None, custom_headers=None, raw=False, **operation_config):
        """Returns a list of salesCreditMemoLines.

        :param company_id: id for company
        :type company_id: str
        :param sales_credit_memo_id: id for salesCreditMemo
        :type sales_credit_memo_id: str
        :param expand: Entities to expand
        :type expand: list[str]
        :param select: Selected properties to be retrieved
        :type select: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: GetSalesCreditMemoLinesForSalesCreditMemoOKResponse or
         ClientRawResponse if raw=true
        :rtype:
         ~azure.mgmt.devtestlabs.models.GetSalesCreditMemoLinesForSalesCreditMemoOKResponse
         or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.get_sales_credit_memo_lines_for_sales_credit_memo.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'salesCreditMemo_id': self._serialize.url("sales_credit_memo_id", sales_credit_memo_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if self.config.top is not None:
            query_parameters['$top'] = self._serialize.query("self.config.top", self.config.top, 'int')
        if self.config.skip is not None:
            query_parameters['$skip'] = self._serialize.query("self.config.skip", self.config.skip, 'int')
        if self.config.limit is not None:
            query_parameters['$limit'] = self._serialize.query("self.config.limit", self.config.limit, 'int')
        if self.config.filter is not None:
            query_parameters['$filter'] = self._serialize.query("self.config.filter", self.config.filter, 'str')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('GetSalesCreditMemoLinesForSalesCreditMemoOKResponse', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_sales_credit_memo_lines_for_sales_credit_memo.metadata = {'url': '/companies({company_id})/salesCreditMemos({salesCreditMemo_id})/salesCreditMemoLines'}

    def post_sales_credit_memo_line_for_sales_credit_memo(
            self, body, company_id, sales_credit_memo_id, custom_headers=None, raw=False, **operation_config):
        """Creates a salesCreditMemoLine in Dynamics 365 Business Central.

        :param body:
        :type body:
         ~azure.mgmt.devtestlabs.models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel
        :param company_id: id for company
        :type company_id: str
        :param sales_credit_memo_id: id for salesCreditMemo
        :type sales_credit_memo_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: SalesCreditMemoLine or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.SalesCreditMemoLine or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.post_sales_credit_memo_line_for_sales_credit_memo.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'salesCreditMemo_id': self._serialize.url("sales_credit_memo_id", sales_credit_memo_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct body
        body_content = self._serialize.body(body, 'BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel')

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [201]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 201:
            deserialized = self._deserialize('SalesCreditMemoLine', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    post_sales_credit_memo_line_for_sales_credit_memo.metadata = {'url': '/companies({company_id})/salesCreditMemos({salesCreditMemo_id})/salesCreditMemoLines'}

    def get_sales_credit_memo_line_for_sales_credit_memo_by_id(
            self, company_id, sales_credit_memo_id, sales_credit_memo_line_id, expand=None, select=None, custom_headers=None, raw=False, **operation_config):
        """Retrieve the properties and relationships of an salesCreditMemoLine
        object for Dynamics 365 Business Central.

        :param company_id: id for company
        :type company_id: str
        :param sales_credit_memo_id: id for salesCreditMemo
        :type sales_credit_memo_id: str
        :param sales_credit_memo_line_id: id for salesCreditMemoLine
        :type sales_credit_memo_line_id: str
        :param expand: Entities to expand
        :type expand: list[str]
        :param select: Selected properties to be retrieved
        :type select: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: SalesCreditMemoLine or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.SalesCreditMemoLine or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.get_sales_credit_memo_line_for_sales_credit_memo_by_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'salesCreditMemo_id': self._serialize.url("sales_credit_memo_id", sales_credit_memo_id, 'str'),
            'salesCreditMemoLine_id': self._serialize.url("sales_credit_memo_line_id", sales_credit_memo_line_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('SalesCreditMemoLine', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_sales_credit_memo_line_for_sales_credit_memo_by_id.metadata = {'url': '/companies({company_id})/salesCreditMemos({salesCreditMemo_id})/salesCreditMemoLines('{salesCreditMemoLine_id}')'}

    def delete_sales_credit_memo_line_for_sales_credit_memo_by_id_by_id(
            self, company_id, sales_credit_memo_id, sales_credit_memo_line_id, custom_headers=None, raw=False, **operation_config):
        """Delete an salesCreditMemoLine in Dynamics 365 Business Central.

        :param company_id: id for company
        :type company_id: str
        :param sales_credit_memo_id: id for salesCreditMemo
        :type sales_credit_memo_id: str
        :param sales_credit_memo_line_id: id for salesCreditMemoLine
        :type sales_credit_memo_line_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.delete_sales_credit_memo_line_for_sales_credit_memo_by_id_by_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'salesCreditMemo_id': self._serialize.url("sales_credit_memo_id", sales_credit_memo_id, 'str'),
            'salesCreditMemoLine_id': self._serialize.url("sales_credit_memo_line_id", sales_credit_memo_line_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.delete(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [204]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    delete_sales_credit_memo_line_for_sales_credit_memo_by_id_by_id.metadata = {'url': '/companies({company_id})/salesCreditMemos({salesCreditMemo_id})/salesCreditMemoLines('{salesCreditMemoLine_id}')'}

    def patch_sales_credit_memo_line_for_sales_credit_memo_by_id_by_id(
            self, body, company_id, sales_credit_memo_id, sales_credit_memo_line_id, custom_headers=None, raw=False, **operation_config):
        """Lets the user patch the specified salesCreditMemoLine.

        :param body:
        :type body:
         ~azure.mgmt.devtestlabs.models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel
        :param company_id: id for company
        :type company_id: str
        :param sales_credit_memo_id: id for salesCreditMemo
        :type sales_credit_memo_id: str
        :param sales_credit_memo_line_id: id for salesCreditMemoLine
        :type sales_credit_memo_line_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: SalesCreditMemoLine or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.SalesCreditMemoLine or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.patch_sales_credit_memo_line_for_sales_credit_memo_by_id_by_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'salesCreditMemo_id': self._serialize.url("sales_credit_memo_id", sales_credit_memo_id, 'str'),
            'salesCreditMemoLine_id': self._serialize.url("sales_credit_memo_line_id", sales_credit_memo_line_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        header_parameters['If-Match'] = self._serialize.header("self.config.if_match", self.config.if_match, 'str')
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct body
        body_content = self._serialize.body(body, 'BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel')

        # Construct and send request
        request = self._client.patch(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('SalesCreditMemoLine', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    patch_sales_credit_memo_line_for_sales_credit_memo_by_id_by_id.metadata = {'url': '/companies({company_id})/salesCreditMemos({salesCreditMemo_id})/salesCreditMemoLines('{salesCreditMemoLine_id}')'}

    def get_pdf_document_for_sales_credit_memo(
            self, company_id, sales_credit_memo_id, select=None, custom_headers=None, raw=False, **operation_config):
        """Returns a list of pdfDocument.

        :param company_id: id for company
        :type company_id: str
        :param sales_credit_memo_id: id for salesCreditMemo
        :type sales_credit_memo_id: str
        :param select: Selected properties to be retrieved
        :type select: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: GetPdfDocumentForSalesCreditMemoOKResponse or
         ClientRawResponse if raw=true
        :rtype:
         ~azure.mgmt.devtestlabs.models.GetPdfDocumentForSalesCreditMemoOKResponse
         or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.get_pdf_document_for_sales_credit_memo.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'salesCreditMemo_id': self._serialize.url("sales_credit_memo_id", sales_credit_memo_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if self.config.top is not None:
            query_parameters['$top'] = self._serialize.query("self.config.top", self.config.top, 'int')
        if self.config.skip is not None:
            query_parameters['$skip'] = self._serialize.query("self.config.skip", self.config.skip, 'int')
        if self.config.limit is not None:
            query_parameters['$limit'] = self._serialize.query("self.config.limit", self.config.limit, 'int')
        if self.config.filter is not None:
            query_parameters['$filter'] = self._serialize.query("self.config.filter", self.config.filter, 'str')
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('GetPdfDocumentForSalesCreditMemoOKResponse', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_pdf_document_for_sales_credit_memo.metadata = {'url': '/companies({company_id})/salesCreditMemos({salesCreditMemo_id})/pdfDocument'}

    def get_pdf_document_for_sales_credit_memo_by_id(
            self, company_id, sales_credit_memo_id, pdf_document_id, select=None, custom_headers=None, raw=False, **operation_config):
        """Retrieve the properties and relationships of an pdfDocument object for
        Dynamics 365 Business Central.

        :param company_id: id for company
        :type company_id: str
        :param sales_credit_memo_id: id for salesCreditMemo
        :type sales_credit_memo_id: str
        :param pdf_document_id: id for pdfDocument
        :type pdf_document_id: str
        :param select: Selected properties to be retrieved
        :type select: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: PdfDocument or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.PdfDocument or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.get_pdf_document_for_sales_credit_memo_by_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'salesCreditMemo_id': self._serialize.url("sales_credit_memo_id", sales_credit_memo_id, 'str'),
            'pdfDocument_id': self._serialize.url("pdf_document_id", pdf_document_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('PdfDocument', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_pdf_document_for_sales_credit_memo_by_id.metadata = {'url': '/companies({company_id})/salesCreditMemos({salesCreditMemo_id})/pdfDocument({pdfDocument_id})'}

    def get_sales_credit_memo_lines(
            self, company_id, expand=None, select=None, custom_headers=None, raw=False, **operation_config):
        """Returns a list of salesCreditMemoLines.

        :param company_id: id for company
        :type company_id: str
        :param expand: Entities to expand
        :type expand: list[str]
        :param select: Selected properties to be retrieved
        :type select: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: GetSalesCreditMemoLinesOKResponse or ClientRawResponse if
         raw=true
        :rtype:
         ~azure.mgmt.devtestlabs.models.GetSalesCreditMemoLinesOKResponse or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.get_sales_credit_memo_lines.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if self.config.top is not None:
            query_parameters['$top'] = self._serialize.query("self.config.top", self.config.top, 'int')
        if self.config.skip is not None:
            query_parameters['$skip'] = self._serialize.query("self.config.skip", self.config.skip, 'int')
        if self.config.limit is not None:
            query_parameters['$limit'] = self._serialize.query("self.config.limit", self.config.limit, 'int')
        if self.config.filter is not None:
            query_parameters['$filter'] = self._serialize.query("self.config.filter", self.config.filter, 'str')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('GetSalesCreditMemoLinesOKResponse', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_sales_credit_memo_lines.metadata = {'url': '/companies({company_id})/salesCreditMemoLines'}

    def post_sales_credit_memo_line(
            self, body, company_id, custom_headers=None, raw=False, **operation_config):
        """Creates a salesCreditMemoLine in Dynamics 365 Business Central.

        :param body:
        :type body:
         ~azure.mgmt.devtestlabs.models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel
        :param company_id: id for company
        :type company_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: SalesCreditMemoLine or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.SalesCreditMemoLine or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.post_sales_credit_memo_line.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct body
        body_content = self._serialize.body(body, 'BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel')

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [201]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 201:
            deserialized = self._deserialize('SalesCreditMemoLine', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    post_sales_credit_memo_line.metadata = {'url': '/companies({company_id})/salesCreditMemoLines'}

    def get_sales_credit_memo_line_by_id(
            self, company_id, sales_credit_memo_line_id, expand=None, select=None, custom_headers=None, raw=False, **operation_config):
        """Retrieve the properties and relationships of an salesCreditMemoLine
        object for Dynamics 365 Business Central.

        :param company_id: id for company
        :type company_id: str
        :param sales_credit_memo_line_id: id for salesCreditMemoLine
        :type sales_credit_memo_line_id: str
        :param expand: Entities to expand
        :type expand: list[str]
        :param select: Selected properties to be retrieved
        :type select: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: SalesCreditMemoLine or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.SalesCreditMemoLine or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.get_sales_credit_memo_line_by_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'salesCreditMemoLine_id': self._serialize.url("sales_credit_memo_line_id", sales_credit_memo_line_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('SalesCreditMemoLine', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_sales_credit_memo_line_by_id.metadata = {'url': '/companies({company_id})/salesCreditMemoLines('{salesCreditMemoLine_id}')'}

    def delete_sales_credit_memo_line_by_id(
            self, company_id, sales_credit_memo_line_id, custom_headers=None, raw=False, **operation_config):
        """Delete an salesCreditMemoLine in Dynamics 365 Business Central.

        :param company_id: id for company
        :type company_id: str
        :param sales_credit_memo_line_id: id for salesCreditMemoLine
        :type sales_credit_memo_line_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.delete_sales_credit_memo_line_by_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'salesCreditMemoLine_id': self._serialize.url("sales_credit_memo_line_id", sales_credit_memo_line_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.delete(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [204]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    delete_sales_credit_memo_line_by_id.metadata = {'url': '/companies({company_id})/salesCreditMemoLines('{salesCreditMemoLine_id}')'}

    def patch_sales_credit_memo_line_by_id(
            self, body, company_id, sales_credit_memo_line_id, custom_headers=None, raw=False, **operation_config):
        """Lets the user patch the specified salesCreditMemoLine.

        :param body:
        :type body:
         ~azure.mgmt.devtestlabs.models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel
        :param company_id: id for company
        :type company_id: str
        :param sales_credit_memo_line_id: id for salesCreditMemoLine
        :type sales_credit_memo_line_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: SalesCreditMemoLine or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.SalesCreditMemoLine or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.patch_sales_credit_memo_line_by_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'salesCreditMemoLine_id': self._serialize.url("sales_credit_memo_line_id", sales_credit_memo_line_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        header_parameters['If-Match'] = self._serialize.header("self.config.if_match", self.config.if_match, 'str')
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct body
        body_content = self._serialize.body(body, 'BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel')

        # Construct and send request
        request = self._client.patch(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('SalesCreditMemoLine', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    patch_sales_credit_memo_line_by_id.metadata = {'url': '/companies({company_id})/salesCreditMemoLines('{salesCreditMemoLine_id}')'}

    def get_general_ledger_entry_attachments(
            self, company_id, expand=None, select=None, custom_headers=None, raw=False, **operation_config):
        """Returns a list of generalLedgerEntryAttachments.

        :param company_id: id for company
        :type company_id: str
        :param expand: Entities to expand
        :type expand: list[str]
        :param select: Selected properties to be retrieved
        :type select: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: GetGeneralLedgerEntryAttachmentsOKResponse or
         ClientRawResponse if raw=true
        :rtype:
         ~azure.mgmt.devtestlabs.models.GetGeneralLedgerEntryAttachmentsOKResponse
         or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.get_general_ledger_entry_attachments.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if self.config.top is not None:
            query_parameters['$top'] = self._serialize.query("self.config.top", self.config.top, 'int')
        if self.config.skip is not None:
            query_parameters['$skip'] = self._serialize.query("self.config.skip", self.config.skip, 'int')
        if self.config.limit is not None:
            query_parameters['$limit'] = self._serialize.query("self.config.limit", self.config.limit, 'int')
        if self.config.filter is not None:
            query_parameters['$filter'] = self._serialize.query("self.config.filter", self.config.filter, 'str')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('GetGeneralLedgerEntryAttachmentsOKResponse', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_general_ledger_entry_attachments.metadata = {'url': '/companies({company_id})/generalLedgerEntryAttachments'}

    def post_general_ledger_entry_attachments(
            self, body, company_id, custom_headers=None, raw=False, **operation_config):
        """Creates a generalLedgerEntryAttachments in Dynamics 365 Business
        Central.

        :param body:
        :type body:
         ~azure.mgmt.devtestlabs.models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel
        :param company_id: id for company
        :type company_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: GeneralLedgerEntryAttachments or ClientRawResponse if
         raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.GeneralLedgerEntryAttachments
         or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.post_general_ledger_entry_attachments.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct body
        body_content = self._serialize.body(body, 'BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel')

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [201]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 201:
            deserialized = self._deserialize('GeneralLedgerEntryAttachments', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    post_general_ledger_entry_attachments.metadata = {'url': '/companies({company_id})/generalLedgerEntryAttachments'}

    def get_general_ledger_entry_attachments_by_id_by_general_ledger_entry_number(
            self, company_id, general_ledger_entry_attachments_general_ledger_entry_number, general_ledger_entry_attachments_id, expand=None, select=None, custom_headers=None, raw=False, **operation_config):
        """Retrieve the properties and relationships of an
        generalLedgerEntryAttachments object for Dynamics 365 Business Central.

        :param company_id: id for company
        :type company_id: str
        :param general_ledger_entry_attachments_general_ledger_entry_number:
         generalLedgerEntryNumber for generalLedgerEntryAttachments
        :type general_ledger_entry_attachments_general_ledger_entry_number:
         int
        :param general_ledger_entry_attachments_id: id for
         generalLedgerEntryAttachments
        :type general_ledger_entry_attachments_id: str
        :param expand: Entities to expand
        :type expand: list[str]
        :param select: Selected properties to be retrieved
        :type select: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: GeneralLedgerEntryAttachments or ClientRawResponse if
         raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.GeneralLedgerEntryAttachments
         or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.get_general_ledger_entry_attachments_by_id_by_general_ledger_entry_number.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'generalLedgerEntryAttachments_generalLedgerEntryNumber': self._serialize.url("general_ledger_entry_attachments_general_ledger_entry_number", general_ledger_entry_attachments_general_ledger_entry_number, 'int'),
            'generalLedgerEntryAttachments_id': self._serialize.url("general_ledger_entry_attachments_id", general_ledger_entry_attachments_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('GeneralLedgerEntryAttachments', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_general_ledger_entry_attachments_by_id_by_general_ledger_entry_number.metadata = {'url': '/companies({company_id})/generalLedgerEntryAttachments({generalLedgerEntryAttachments_generalLedgerEntryNumber},{generalLedgerEntryAttachments_id})'}

    def delete_general_ledger_entry_attachments_by_id_by_general_ledger_entry_number(
            self, company_id, general_ledger_entry_attachments_general_ledger_entry_number, general_ledger_entry_attachments_id, custom_headers=None, raw=False, **operation_config):
        """Delete an generalLedgerEntryAttachments in Dynamics 365 Business
        Central.

        :param company_id: id for company
        :type company_id: str
        :param general_ledger_entry_attachments_general_ledger_entry_number:
         generalLedgerEntryNumber for generalLedgerEntryAttachments
        :type general_ledger_entry_attachments_general_ledger_entry_number:
         int
        :param general_ledger_entry_attachments_id: id for
         generalLedgerEntryAttachments
        :type general_ledger_entry_attachments_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.delete_general_ledger_entry_attachments_by_id_by_general_ledger_entry_number.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'generalLedgerEntryAttachments_generalLedgerEntryNumber': self._serialize.url("general_ledger_entry_attachments_general_ledger_entry_number", general_ledger_entry_attachments_general_ledger_entry_number, 'int'),
            'generalLedgerEntryAttachments_id': self._serialize.url("general_ledger_entry_attachments_id", general_ledger_entry_attachments_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.delete(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [204]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    delete_general_ledger_entry_attachments_by_id_by_general_ledger_entry_number.metadata = {'url': '/companies({company_id})/generalLedgerEntryAttachments({generalLedgerEntryAttachments_generalLedgerEntryNumber},{generalLedgerEntryAttachments_id})'}

    def patch_general_ledger_entry_attachments_by_id_by_general_ledger_entry_number(
            self, body, company_id, general_ledger_entry_attachments_general_ledger_entry_number, general_ledger_entry_attachments_id, custom_headers=None, raw=False, **operation_config):
        """Lets the user patch the specified generalLedgerEntryAttachments.

        :param body:
        :type body:
         ~azure.mgmt.devtestlabs.models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel
        :param company_id: id for company
        :type company_id: str
        :param general_ledger_entry_attachments_general_ledger_entry_number:
         generalLedgerEntryNumber for generalLedgerEntryAttachments
        :type general_ledger_entry_attachments_general_ledger_entry_number:
         int
        :param general_ledger_entry_attachments_id: id for
         generalLedgerEntryAttachments
        :type general_ledger_entry_attachments_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: GeneralLedgerEntryAttachments or ClientRawResponse if
         raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.GeneralLedgerEntryAttachments
         or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.patch_general_ledger_entry_attachments_by_id_by_general_ledger_entry_number.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'generalLedgerEntryAttachments_generalLedgerEntryNumber': self._serialize.url("general_ledger_entry_attachments_general_ledger_entry_number", general_ledger_entry_attachments_general_ledger_entry_number, 'int'),
            'generalLedgerEntryAttachments_id': self._serialize.url("general_ledger_entry_attachments_id", general_ledger_entry_attachments_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        header_parameters['If-Match'] = self._serialize.header("self.config.if_match", self.config.if_match, 'str')
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct body
        body_content = self._serialize.body(body, 'BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel')

        # Construct and send request
        request = self._client.patch(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('GeneralLedgerEntryAttachments', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    patch_general_ledger_entry_attachments_by_id_by_general_ledger_entry_number.metadata = {'url': '/companies({company_id})/generalLedgerEntryAttachments({generalLedgerEntryAttachments_generalLedgerEntryNumber},{generalLedgerEntryAttachments_id})'}

    def get_purchase_invoices(
            self, company_id, expand=None, select=None, custom_headers=None, raw=False, **operation_config):
        """Returns a list of purchaseInvoices.

        :param company_id: id for company
        :type company_id: str
        :param expand: Entities to expand
        :type expand: list[str]
        :param select: Selected properties to be retrieved
        :type select: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: GetPurchaseInvoicesOKResponse or ClientRawResponse if
         raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.GetPurchaseInvoicesOKResponse
         or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.get_purchase_invoices.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if self.config.top is not None:
            query_parameters['$top'] = self._serialize.query("self.config.top", self.config.top, 'int')
        if self.config.skip is not None:
            query_parameters['$skip'] = self._serialize.query("self.config.skip", self.config.skip, 'int')
        if self.config.limit is not None:
            query_parameters['$limit'] = self._serialize.query("self.config.limit", self.config.limit, 'int')
        if self.config.filter is not None:
            query_parameters['$filter'] = self._serialize.query("self.config.filter", self.config.filter, 'str')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('GetPurchaseInvoicesOKResponse', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_purchase_invoices.metadata = {'url': '/companies({company_id})/purchaseInvoices'}

    def post_purchase_invoice(
            self, body, company_id, custom_headers=None, raw=False, **operation_config):
        """Creates a purchaseInvoice in Dynamics 365 Business Central.

        :param body:
        :type body:
         ~azure.mgmt.devtestlabs.models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel
        :param company_id: id for company
        :type company_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: PurchaseInvoice or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.PurchaseInvoice or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.post_purchase_invoice.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct body
        body_content = self._serialize.body(body, 'BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel')

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [201]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 201:
            deserialized = self._deserialize('PurchaseInvoice', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    post_purchase_invoice.metadata = {'url': '/companies({company_id})/purchaseInvoices'}

    def get_purchase_invoice_by_id(
            self, company_id, purchase_invoice_id, expand=None, select=None, custom_headers=None, raw=False, **operation_config):
        """Retrieve the properties and relationships of an purchaseInvoice object
        for Dynamics 365 Business Central.

        :param company_id: id for company
        :type company_id: str
        :param purchase_invoice_id: id for purchaseInvoice
        :type purchase_invoice_id: str
        :param expand: Entities to expand
        :type expand: list[str]
        :param select: Selected properties to be retrieved
        :type select: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: PurchaseInvoice or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.PurchaseInvoice or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.get_purchase_invoice_by_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'purchaseInvoice_id': self._serialize.url("purchase_invoice_id", purchase_invoice_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('PurchaseInvoice', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_purchase_invoice_by_id.metadata = {'url': '/companies({company_id})/purchaseInvoices({purchaseInvoice_id})'}

    def delete_purchase_invoice_by_id(
            self, company_id, purchase_invoice_id, custom_headers=None, raw=False, **operation_config):
        """Delete an purchaseInvoice in Dynamics 365 Business Central.

        :param company_id: id for company
        :type company_id: str
        :param purchase_invoice_id: id for purchaseInvoice
        :type purchase_invoice_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.delete_purchase_invoice_by_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'purchaseInvoice_id': self._serialize.url("purchase_invoice_id", purchase_invoice_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.delete(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [204]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    delete_purchase_invoice_by_id.metadata = {'url': '/companies({company_id})/purchaseInvoices({purchaseInvoice_id})'}

    def patch_purchase_invoice_by_id(
            self, body, company_id, purchase_invoice_id, custom_headers=None, raw=False, **operation_config):
        """Lets the user patch the specified purchaseInvoice.

        :param body:
        :type body:
         ~azure.mgmt.devtestlabs.models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel
        :param company_id: id for company
        :type company_id: str
        :param purchase_invoice_id: id for purchaseInvoice
        :type purchase_invoice_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: PurchaseInvoice or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.PurchaseInvoice or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.patch_purchase_invoice_by_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'purchaseInvoice_id': self._serialize.url("purchase_invoice_id", purchase_invoice_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        header_parameters['If-Match'] = self._serialize.header("self.config.if_match", self.config.if_match, 'str')
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct body
        body_content = self._serialize.body(body, 'BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel')

        # Construct and send request
        request = self._client.patch(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('PurchaseInvoice', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    patch_purchase_invoice_by_id.metadata = {'url': '/companies({company_id})/purchaseInvoices({purchaseInvoice_id})'}

    def post_action_purchase_invoices(
            self, company_id, purchase_invoice_id, custom_headers=None, raw=False, **operation_config):
        """Performs the post action for purchaseInvoices entity.

        :param company_id: id for company
        :type company_id: str
        :param purchase_invoice_id: id for purchaseInvoice
        :type purchase_invoice_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.post_action_purchase_invoices.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'purchaseInvoice_id': self._serialize.url("purchase_invoice_id", purchase_invoice_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [204]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    post_action_purchase_invoices.metadata = {'url': '/companies({company_id})/purchaseInvoices({purchaseInvoice_id})/Microsoft.NAV.post'}

    def get_purchase_invoice_lines_for_purchase_invoice(
            self, company_id, purchase_invoice_id, expand=None, select=None, custom_headers=None, raw=False, **operation_config):
        """Returns a list of purchaseInvoiceLines.

        :param company_id: id for company
        :type company_id: str
        :param purchase_invoice_id: id for purchaseInvoice
        :type purchase_invoice_id: str
        :param expand: Entities to expand
        :type expand: list[str]
        :param select: Selected properties to be retrieved
        :type select: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: GetPurchaseInvoiceLinesForPurchaseInvoiceOKResponse or
         ClientRawResponse if raw=true
        :rtype:
         ~azure.mgmt.devtestlabs.models.GetPurchaseInvoiceLinesForPurchaseInvoiceOKResponse
         or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.get_purchase_invoice_lines_for_purchase_invoice.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'purchaseInvoice_id': self._serialize.url("purchase_invoice_id", purchase_invoice_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if self.config.top is not None:
            query_parameters['$top'] = self._serialize.query("self.config.top", self.config.top, 'int')
        if self.config.skip is not None:
            query_parameters['$skip'] = self._serialize.query("self.config.skip", self.config.skip, 'int')
        if self.config.limit is not None:
            query_parameters['$limit'] = self._serialize.query("self.config.limit", self.config.limit, 'int')
        if self.config.filter is not None:
            query_parameters['$filter'] = self._serialize.query("self.config.filter", self.config.filter, 'str')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('GetPurchaseInvoiceLinesForPurchaseInvoiceOKResponse', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_purchase_invoice_lines_for_purchase_invoice.metadata = {'url': '/companies({company_id})/purchaseInvoices({purchaseInvoice_id})/purchaseInvoiceLines'}

    def post_purchase_invoice_line_for_purchase_invoice(
            self, body, company_id, purchase_invoice_id, custom_headers=None, raw=False, **operation_config):
        """Creates a purchaseInvoiceLine in Dynamics 365 Business Central.

        :param body:
        :type body:
         ~azure.mgmt.devtestlabs.models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel
        :param company_id: id for company
        :type company_id: str
        :param purchase_invoice_id: id for purchaseInvoice
        :type purchase_invoice_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: PurchaseInvoiceLine or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.PurchaseInvoiceLine or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.post_purchase_invoice_line_for_purchase_invoice.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'purchaseInvoice_id': self._serialize.url("purchase_invoice_id", purchase_invoice_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct body
        body_content = self._serialize.body(body, 'BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel')

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [201]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 201:
            deserialized = self._deserialize('PurchaseInvoiceLine', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    post_purchase_invoice_line_for_purchase_invoice.metadata = {'url': '/companies({company_id})/purchaseInvoices({purchaseInvoice_id})/purchaseInvoiceLines'}

    def get_purchase_invoice_line_for_purchase_invoice_by_id(
            self, company_id, purchase_invoice_id, purchase_invoice_line_id, expand=None, select=None, custom_headers=None, raw=False, **operation_config):
        """Retrieve the properties and relationships of an purchaseInvoiceLine
        object for Dynamics 365 Business Central.

        :param company_id: id for company
        :type company_id: str
        :param purchase_invoice_id: id for purchaseInvoice
        :type purchase_invoice_id: str
        :param purchase_invoice_line_id: id for purchaseInvoiceLine
        :type purchase_invoice_line_id: str
        :param expand: Entities to expand
        :type expand: list[str]
        :param select: Selected properties to be retrieved
        :type select: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: PurchaseInvoiceLine or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.PurchaseInvoiceLine or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.get_purchase_invoice_line_for_purchase_invoice_by_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'purchaseInvoice_id': self._serialize.url("purchase_invoice_id", purchase_invoice_id, 'str'),
            'purchaseInvoiceLine_id': self._serialize.url("purchase_invoice_line_id", purchase_invoice_line_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('PurchaseInvoiceLine', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_purchase_invoice_line_for_purchase_invoice_by_id.metadata = {'url': '/companies({company_id})/purchaseInvoices({purchaseInvoice_id})/purchaseInvoiceLines('{purchaseInvoiceLine_id}')'}

    def delete_purchase_invoice_line_for_purchase_invoice_by_id_by_id(
            self, company_id, purchase_invoice_id, purchase_invoice_line_id, custom_headers=None, raw=False, **operation_config):
        """Delete an purchaseInvoiceLine in Dynamics 365 Business Central.

        :param company_id: id for company
        :type company_id: str
        :param purchase_invoice_id: id for purchaseInvoice
        :type purchase_invoice_id: str
        :param purchase_invoice_line_id: id for purchaseInvoiceLine
        :type purchase_invoice_line_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.delete_purchase_invoice_line_for_purchase_invoice_by_id_by_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'purchaseInvoice_id': self._serialize.url("purchase_invoice_id", purchase_invoice_id, 'str'),
            'purchaseInvoiceLine_id': self._serialize.url("purchase_invoice_line_id", purchase_invoice_line_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.delete(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [204]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    delete_purchase_invoice_line_for_purchase_invoice_by_id_by_id.metadata = {'url': '/companies({company_id})/purchaseInvoices({purchaseInvoice_id})/purchaseInvoiceLines('{purchaseInvoiceLine_id}')'}

    def patch_purchase_invoice_line_for_purchase_invoice_by_id_by_id(
            self, body, company_id, purchase_invoice_id, purchase_invoice_line_id, custom_headers=None, raw=False, **operation_config):
        """Lets the user patch the specified purchaseInvoiceLine.

        :param body:
        :type body:
         ~azure.mgmt.devtestlabs.models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel
        :param company_id: id for company
        :type company_id: str
        :param purchase_invoice_id: id for purchaseInvoice
        :type purchase_invoice_id: str
        :param purchase_invoice_line_id: id for purchaseInvoiceLine
        :type purchase_invoice_line_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: PurchaseInvoiceLine or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.PurchaseInvoiceLine or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.patch_purchase_invoice_line_for_purchase_invoice_by_id_by_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'purchaseInvoice_id': self._serialize.url("purchase_invoice_id", purchase_invoice_id, 'str'),
            'purchaseInvoiceLine_id': self._serialize.url("purchase_invoice_line_id", purchase_invoice_line_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        header_parameters['If-Match'] = self._serialize.header("self.config.if_match", self.config.if_match, 'str')
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct body
        body_content = self._serialize.body(body, 'BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel')

        # Construct and send request
        request = self._client.patch(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('PurchaseInvoiceLine', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    patch_purchase_invoice_line_for_purchase_invoice_by_id_by_id.metadata = {'url': '/companies({company_id})/purchaseInvoices({purchaseInvoice_id})/purchaseInvoiceLines('{purchaseInvoiceLine_id}')'}

    def get_pdf_document_for_purchase_invoice(
            self, company_id, purchase_invoice_id, select=None, custom_headers=None, raw=False, **operation_config):
        """Returns a list of pdfDocument.

        :param company_id: id for company
        :type company_id: str
        :param purchase_invoice_id: id for purchaseInvoice
        :type purchase_invoice_id: str
        :param select: Selected properties to be retrieved
        :type select: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: GetPdfDocumentForPurchaseInvoiceOKResponse or
         ClientRawResponse if raw=true
        :rtype:
         ~azure.mgmt.devtestlabs.models.GetPdfDocumentForPurchaseInvoiceOKResponse
         or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.get_pdf_document_for_purchase_invoice.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'purchaseInvoice_id': self._serialize.url("purchase_invoice_id", purchase_invoice_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if self.config.top is not None:
            query_parameters['$top'] = self._serialize.query("self.config.top", self.config.top, 'int')
        if self.config.skip is not None:
            query_parameters['$skip'] = self._serialize.query("self.config.skip", self.config.skip, 'int')
        if self.config.limit is not None:
            query_parameters['$limit'] = self._serialize.query("self.config.limit", self.config.limit, 'int')
        if self.config.filter is not None:
            query_parameters['$filter'] = self._serialize.query("self.config.filter", self.config.filter, 'str')
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('GetPdfDocumentForPurchaseInvoiceOKResponse', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_pdf_document_for_purchase_invoice.metadata = {'url': '/companies({company_id})/purchaseInvoices({purchaseInvoice_id})/pdfDocument'}

    def get_pdf_document_for_purchase_invoice_by_id(
            self, company_id, purchase_invoice_id, pdf_document_id, select=None, custom_headers=None, raw=False, **operation_config):
        """Retrieve the properties and relationships of an pdfDocument object for
        Dynamics 365 Business Central.

        :param company_id: id for company
        :type company_id: str
        :param purchase_invoice_id: id for purchaseInvoice
        :type purchase_invoice_id: str
        :param pdf_document_id: id for pdfDocument
        :type pdf_document_id: str
        :param select: Selected properties to be retrieved
        :type select: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: PdfDocument or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.PdfDocument or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.get_pdf_document_for_purchase_invoice_by_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'purchaseInvoice_id': self._serialize.url("purchase_invoice_id", purchase_invoice_id, 'str'),
            'pdfDocument_id': self._serialize.url("pdf_document_id", pdf_document_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('PdfDocument', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_pdf_document_for_purchase_invoice_by_id.metadata = {'url': '/companies({company_id})/purchaseInvoices({purchaseInvoice_id})/pdfDocument({pdfDocument_id})'}

    def get_purchase_invoice_lines(
            self, company_id, expand=None, select=None, custom_headers=None, raw=False, **operation_config):
        """Returns a list of purchaseInvoiceLines.

        :param company_id: id for company
        :type company_id: str
        :param expand: Entities to expand
        :type expand: list[str]
        :param select: Selected properties to be retrieved
        :type select: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: GetPurchaseInvoiceLinesOKResponse or ClientRawResponse if
         raw=true
        :rtype:
         ~azure.mgmt.devtestlabs.models.GetPurchaseInvoiceLinesOKResponse or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.get_purchase_invoice_lines.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if self.config.top is not None:
            query_parameters['$top'] = self._serialize.query("self.config.top", self.config.top, 'int')
        if self.config.skip is not None:
            query_parameters['$skip'] = self._serialize.query("self.config.skip", self.config.skip, 'int')
        if self.config.limit is not None:
            query_parameters['$limit'] = self._serialize.query("self.config.limit", self.config.limit, 'int')
        if self.config.filter is not None:
            query_parameters['$filter'] = self._serialize.query("self.config.filter", self.config.filter, 'str')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('GetPurchaseInvoiceLinesOKResponse', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_purchase_invoice_lines.metadata = {'url': '/companies({company_id})/purchaseInvoiceLines'}

    def post_purchase_invoice_line(
            self, body, company_id, custom_headers=None, raw=False, **operation_config):
        """Creates a purchaseInvoiceLine in Dynamics 365 Business Central.

        :param body:
        :type body:
         ~azure.mgmt.devtestlabs.models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel
        :param company_id: id for company
        :type company_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: PurchaseInvoiceLine or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.PurchaseInvoiceLine or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.post_purchase_invoice_line.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct body
        body_content = self._serialize.body(body, 'BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel')

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [201]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 201:
            deserialized = self._deserialize('PurchaseInvoiceLine', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    post_purchase_invoice_line.metadata = {'url': '/companies({company_id})/purchaseInvoiceLines'}

    def get_purchase_invoice_line_by_id(
            self, company_id, purchase_invoice_line_id, expand=None, select=None, custom_headers=None, raw=False, **operation_config):
        """Retrieve the properties and relationships of an purchaseInvoiceLine
        object for Dynamics 365 Business Central.

        :param company_id: id for company
        :type company_id: str
        :param purchase_invoice_line_id: id for purchaseInvoiceLine
        :type purchase_invoice_line_id: str
        :param expand: Entities to expand
        :type expand: list[str]
        :param select: Selected properties to be retrieved
        :type select: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: PurchaseInvoiceLine or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.PurchaseInvoiceLine or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.get_purchase_invoice_line_by_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'purchaseInvoiceLine_id': self._serialize.url("purchase_invoice_line_id", purchase_invoice_line_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('PurchaseInvoiceLine', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_purchase_invoice_line_by_id.metadata = {'url': '/companies({company_id})/purchaseInvoiceLines('{purchaseInvoiceLine_id}')'}

    def delete_purchase_invoice_line_by_id(
            self, company_id, purchase_invoice_line_id, custom_headers=None, raw=False, **operation_config):
        """Delete an purchaseInvoiceLine in Dynamics 365 Business Central.

        :param company_id: id for company
        :type company_id: str
        :param purchase_invoice_line_id: id for purchaseInvoiceLine
        :type purchase_invoice_line_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.delete_purchase_invoice_line_by_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'purchaseInvoiceLine_id': self._serialize.url("purchase_invoice_line_id", purchase_invoice_line_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.delete(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [204]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    delete_purchase_invoice_line_by_id.metadata = {'url': '/companies({company_id})/purchaseInvoiceLines('{purchaseInvoiceLine_id}')'}

    def patch_purchase_invoice_line_by_id(
            self, body, company_id, purchase_invoice_line_id, custom_headers=None, raw=False, **operation_config):
        """Lets the user patch the specified purchaseInvoiceLine.

        :param body:
        :type body:
         ~azure.mgmt.devtestlabs.models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel
        :param company_id: id for company
        :type company_id: str
        :param purchase_invoice_line_id: id for purchaseInvoiceLine
        :type purchase_invoice_line_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: PurchaseInvoiceLine or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.PurchaseInvoiceLine or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.patch_purchase_invoice_line_by_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'purchaseInvoiceLine_id': self._serialize.url("purchase_invoice_line_id", purchase_invoice_line_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        header_parameters['If-Match'] = self._serialize.header("self.config.if_match", self.config.if_match, 'str')
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct body
        body_content = self._serialize.body(body, 'BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel')

        # Construct and send request
        request = self._client.patch(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('PurchaseInvoiceLine', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    patch_purchase_invoice_line_by_id.metadata = {'url': '/companies({company_id})/purchaseInvoiceLines('{purchaseInvoiceLine_id}')'}

    def get_customer_sales(
            self, company_id, select=None, custom_headers=None, raw=False, **operation_config):
        """Returns a list of customerSales.

        :param company_id: id for company
        :type company_id: str
        :param select: Selected properties to be retrieved
        :type select: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: GetCustomerSalesOKResponse or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.GetCustomerSalesOKResponse or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.get_customer_sales.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if self.config.top is not None:
            query_parameters['$top'] = self._serialize.query("self.config.top", self.config.top, 'int')
        if self.config.skip is not None:
            query_parameters['$skip'] = self._serialize.query("self.config.skip", self.config.skip, 'int')
        if self.config.limit is not None:
            query_parameters['$limit'] = self._serialize.query("self.config.limit", self.config.limit, 'int')
        if self.config.filter is not None:
            query_parameters['$filter'] = self._serialize.query("self.config.filter", self.config.filter, 'str')
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('GetCustomerSalesOKResponse', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_customer_sales.metadata = {'url': '/companies({company_id})/customerSales'}

    def get_customer_sale_by_name_by_customer_number_by_customer_id(
            self, company_id, customer_sale_customer_id, customer_sale_customer_number, customer_sale_name, select=None, custom_headers=None, raw=False, **operation_config):
        """Retrieve the properties and relationships of an customerSale object for
        Dynamics 365 Business Central.

        :param company_id: id for company
        :type company_id: str
        :param customer_sale_customer_id: customerId for customerSale
        :type customer_sale_customer_id: str
        :param customer_sale_customer_number: customerNumber for customerSale
        :type customer_sale_customer_number: str
        :param customer_sale_name: name for customerSale
        :type customer_sale_name: str
        :param select: Selected properties to be retrieved
        :type select: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: CustomerSale or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.CustomerSale or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.get_customer_sale_by_name_by_customer_number_by_customer_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'customerSale_customerId': self._serialize.url("customer_sale_customer_id", customer_sale_customer_id, 'str'),
            'customerSale_customerNumber': self._serialize.url("customer_sale_customer_number", customer_sale_customer_number, 'str'),
            'customerSale_name': self._serialize.url("customer_sale_name", customer_sale_name, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('CustomerSale', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_customer_sale_by_name_by_customer_number_by_customer_id.metadata = {'url': '/companies({company_id})/customerSales({customerSale_customerId},'{customerSale_customerNumber}','{customerSale_name}')'}

    def get_vendor_purchases(
            self, company_id, select=None, custom_headers=None, raw=False, **operation_config):
        """Returns a list of vendorPurchases.

        :param company_id: id for company
        :type company_id: str
        :param select: Selected properties to be retrieved
        :type select: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: GetVendorPurchasesOKResponse or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.GetVendorPurchasesOKResponse or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.get_vendor_purchases.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if self.config.top is not None:
            query_parameters['$top'] = self._serialize.query("self.config.top", self.config.top, 'int')
        if self.config.skip is not None:
            query_parameters['$skip'] = self._serialize.query("self.config.skip", self.config.skip, 'int')
        if self.config.limit is not None:
            query_parameters['$limit'] = self._serialize.query("self.config.limit", self.config.limit, 'int')
        if self.config.filter is not None:
            query_parameters['$filter'] = self._serialize.query("self.config.filter", self.config.filter, 'str')
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('GetVendorPurchasesOKResponse', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_vendor_purchases.metadata = {'url': '/companies({company_id})/vendorPurchases'}

    def get_vendor_purchase_by_name_by_vendor_number_by_vendor_id(
            self, company_id, vendor_purchase_vendor_id, vendor_purchase_vendor_number, vendor_purchase_name, select=None, custom_headers=None, raw=False, **operation_config):
        """Retrieve the properties and relationships of an vendorPurchase object
        for Dynamics 365 Business Central.

        :param company_id: id for company
        :type company_id: str
        :param vendor_purchase_vendor_id: vendorId for vendorPurchase
        :type vendor_purchase_vendor_id: str
        :param vendor_purchase_vendor_number: vendorNumber for vendorPurchase
        :type vendor_purchase_vendor_number: str
        :param vendor_purchase_name: name for vendorPurchase
        :type vendor_purchase_name: str
        :param select: Selected properties to be retrieved
        :type select: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: VendorPurchase or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.devtestlabs.models.VendorPurchase or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.get_vendor_purchase_by_name_by_vendor_number_by_vendor_id.metadata['url']
        path_format_arguments = {
            'company_id': self._serialize.url("company_id", company_id, 'str'),
            'vendorPurchase_vendorId': self._serialize.url("vendor_purchase_vendor_id", vendor_purchase_vendor_id, 'str'),
            'vendorPurchase_vendorNumber': self._serialize.url("vendor_purchase_vendor_number", vendor_purchase_vendor_number, 'str'),
            'vendorPurchase_name': self._serialize.url("vendor_purchase_name", vendor_purchase_name, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('VendorPurchase', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_vendor_purchase_by_name_by_vendor_number_by_vendor_id.metadata = {'url': '/companies({company_id})/vendorPurchases({vendorPurchase_vendorId},'{vendorPurchase_vendorNumber}','{vendorPurchase_name}')'}
